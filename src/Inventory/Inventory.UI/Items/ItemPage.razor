@page "/inventory/items/{id}" 
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal
@inject IItemsClient ItemsClient
@inject ISnackbar Snackbar
@inject IWarehouseItemsClient WarehouseItemsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService


@if (Item is null)
{
    @if (loadingFailed)
    {
        <MudText Typo="Typo.h3" Class="mb-4">Error when loading profile.</MudText>
    }
    else
    {
        <LoadingIndicator />
    }
}
else 
{
    <AppPageTitle>@Item?.Id - @Item?.Name</AppPageTitle>

    <MudText Typo="Typo.h3" Class="mb-4">@Item?.Id - @Item?.Name</MudText>

    <MudButton Variant="Variant.Filled" OnClick="UpdateItem" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Default" Class="mb-2 me-2">
        Edit details
    </MudButton>

    <MudButton Variant="Variant.Filled" OnClick="async () => await OnItemClicked(null)" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
        Add item to warehouse
    </MudButton>

    <MudPaper Class="pa-4 mb-4" Elevation="25">
        @Item.Unit

        @Item.Group.Name
    </MudPaper>

    <MudPaper Class="pa-4" Elevation="25">
        <MudTable @ref="table" T="WarehouseItem" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
                Striped="true" OnRowClick="ItemOnClick">
            <ToolBarContent>

                <WarehouseSelector Value="Warehouse" ValueChanged="OnWarehouseChanged" For="() => Warehouse" />

                <MudSpacer />

                <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
            </ToolBarContent>
        <HeaderContent>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="Warehouse.Site">Site</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="Warehouse">Warehouse</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="Location">Location</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="QuantityOnHand">Qty on hand</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="QuantityPicked">Qty picked</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="QuantityReserved">Qty reserved</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="QuantityAvailable">Qty available</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="WarehouseItem" SortLabel="QuantityThreshold">Qty threshold</MudTableSortLabel></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="item">
                <MudTd DataLabel="Site">@item.Warehouse.Site.Name</MudTd>
                <MudTd DataLabel="Warehouse">@item.Warehouse.Name</MudTd>
                <MudTd DataLabel="Location">@item.Location</MudTd>
                <MudTd DataLabel="Qty on hand">@item.QuantityOnHand<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="async () => OnItemAdjustQuantityOnHand(item)" /></MudTd>
                <MudTd DataLabel="Qty picked">@item.QuantityPicked<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="async () => OnPickItems(item)" /></MudTd>
                <MudTd DataLabel="Qty reserved">@item.QuantityReserved<MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="async () => OnReserveItems(item)" /></MudTd>
                <MudTd DataLabel="Qty available">@item.QuantityAvailable</MudTd>
                <MudTd DataLabel="Qty threshold">@item.QuantityThreshold</MudTd>
                <MudTd>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.LocalShipping" OnClick="async () => OnShipItems(item)" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.CallReceived" OnClick="async () => OnReceiveItems(item)" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
}

@code {
    MudTable<WarehouseItem> table; 
    string? searchString;
    bool loadingFailed = false;

    [Parameter]
    public string Id { get; set; }

    public Item Item { get; set; }

    public Warehouse? Warehouse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Item = await ItemsClient.GetItemAsync(Id);
    }

    private async Task<TableData<WarehouseItem>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var results = await ItemsClient.GetWarehouseItemsAsync(Id, state.Page + 1, state.PageSize, Warehouse?.Id, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Inventory.Client.SortDirection.Asc : YourBrand.Inventory.Client.SortDirection.Desc), cancellationToken);
            return new TableData<WarehouseItem> { Items = results.Items, TotalItems = results.TotalItems };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            loadingFailed = true;
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<WarehouseItem> ev)
    {
        var item = ev.Item;

        await OnItemClicked(item);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnWarehouseChanged(Warehouse w)
    {
        Warehouse = w;
        table.ReloadServerData();
    }

    async Task UpdateItem()
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(ItemDialog.Id), Item.Id);

            var dialogReference = await DialogService.ShowAsync<ItemDialog>($"Update {Item.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            Item = await ItemsClient.GetItemAsync(Id);   
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnItemClicked(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Inventory.Warehouses.Items.ItemDialog.Id), dto?.Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.ItemDialog.ItemId), Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.ItemDialog.WarehouseId), dto?.Warehouse?.Id);

            var dialogReference = await DialogService.ShowAsync<Inventory.Warehouses.Items.ItemDialog>(dto is null ? "New Item" : $"Update {dto.Item.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnItemAdjustQuantityOnHand(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Inventory.Warehouses.Items.AdjustQuantityOnHandDialog.ItemId), dto.Item.Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.AdjustQuantityOnHandDialog.WarehouseId), dto?.Warehouse?.Id);

            var dialogReference = await DialogService.ShowAsync<Inventory.Warehouses.Items.AdjustQuantityOnHandDialog>("Adjust Quantity on Hand", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

           var item2 = await WarehouseItemsClient.GetItemAsync(dto?.Warehouse?.Id, dto.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnPickItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Inventory.Warehouses.Items.PickItemsDialog.ItemId), dto.Item.Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.PickItemsDialog.WarehouseId), dto?.Warehouse?.Id);

            var dialogReference = await DialogService.ShowAsync<Inventory.Warehouses.Items.PickItemsDialog>("Pick items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

           var item2 = await WarehouseItemsClient.GetItemAsync(dto?.Warehouse?.Id, dto.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnReserveItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Inventory.Warehouses.Items.ReserveItemsDialog.ItemId), dto.Item.Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.ReserveItemsDialog.WarehouseId), dto?.Warehouse?.Id);

            var dialogReference = await DialogService.ShowAsync<Inventory.Warehouses.Items.ReserveItemsDialog>("Reserve items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

           var item2 = await WarehouseItemsClient.GetItemAsync(dto?.Warehouse?.Id, dto.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnShipItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Inventory.Warehouses.Items.ShipItemsDialog.ItemId), dto.Item.Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.ShipItemsDialog.WarehouseId), dto?.Warehouse?.Id);

            var dialogReference = await DialogService.ShowAsync<Inventory.Warehouses.Items.ShipItemsDialog>("Ship items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

           var item2 = await WarehouseItemsClient.GetItemAsync(dto?.Warehouse?.Id, dto.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnReceiveItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Inventory.Warehouses.Items.ReceiveItemsDialog.ItemId), dto.Item.Id);
            parameters.Add(nameof(Inventory.Warehouses.Items.ReceiveItemsDialog.WarehouseId), dto?.Warehouse?.Id);

            var dialogReference = await DialogService.ShowAsync<Inventory.Warehouses.Items.ReceiveItemsDialog>("Receive items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

           var item2 = await WarehouseItemsClient.GetItemAsync(dto?.Warehouse?.Id, dto.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private TableData<WarehouseItem>? GetTableData()
    {
        return (TableData<WarehouseItem>?)table?.GetType()?
            .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
                         System.Reflection.BindingFlags.Instance)?
            .GetValue(table);
    }
}