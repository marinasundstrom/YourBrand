@using System.ComponentModel.DataAnnotations
@inject IWarehousesClient WarehousesClient
@inject ISnackbar Snackbar

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Gutters="false">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                <MudTextField Label="Name" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Name"
                              For="@(() => Name)" />

                <SiteSelector Label="Site" Class="mt-4" Variant="Variant.Outlined" @bind-Value="Site" For="() => Site" />
            </MudContainer>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                @if(WarehouseId is null) 
                {
                    <text>Add</text>
                }
                else 
                {
                    <text>Update</text>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code
{
    EditContext context = null!;

    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public string? WarehouseId { get; set; } = null!;

    [Required]
    public Site Site { get; set; }

    [Required]
    public string Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        if (WarehouseId is not null) 
        {
            var warehouse = await WarehousesClient.GetWarehouseAsync(WarehouseId);
            Site = warehouse.Site;
            Name = warehouse.Name;
        }
    }

    public async Task OnValidSubmit()
    {
        if(WarehouseId is null) 
        {
            var warehouse = await WarehousesClient.CreateWarehouseAsync(new CreateWarehouse {
                Name = Name,
                SiteId = Site.Id
            });

            Dialog.Close(warehouse);
        }
        else 
        {
            if (context.IsModified())
            {
                await WarehousesClient.UpdateWarehouseAsync(WarehouseId, new UpdateWarehouse
                {
                    Name = Name,
                    SiteId = Site.Id
                });
            }

            Dialog.Close();
        }
    }
}