@page "/inventory/warehouses/items"
@attribute [Authorize]
@inject IWarehouseItemsClient WarehouseItemsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<AppPageTitle>Items</AppPageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Items</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnItemClicked(null)" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    Add item to warehouse
</MudButton>

<MudPaper Class="pa-4" Elevation="25">
    <MudTable @ref="table" T="WarehouseItem" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
              Striped="true" OnRowClick="ItemOnClick">
        <ToolBarContent>

            <WarehouseSelector Value="Warehouse" ValueChanged="OnWarehouseChanged" For="() => Warehouse" />

            <MudSpacer />

            <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>
       <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Warehouse</MudTh>
            <MudTh>Qt on hand</MudTh>
            <MudTh>Qt picked</MudTh>
            <MudTh>Qt reserved</MudTh>
            <MudTh>Qt available</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="item">
            <MudTd DataLabel="Id">@item.Id</MudTd>
            <MudTd DataLabel="Name">@item.Item.Name</MudTd>
            <MudTd DataLabel="Warehouse">@item.Warehouse.Name</MudTd>
            <MudTd DataLabel="Qt on hand">@item.QuantityOnHand <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="async () => OnItemAdjustQuantityOnHand(item)" /></MudTd>
            <MudTd DataLabel="Qt on hand">@item.QuantityPicked <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="async () => OnPickItems(item)" /></MudTd>
            <MudTd DataLabel="Qt on hand">@item.QuantityReserved <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="async () => OnReserveItems(item)" /></MudTd>
            <MudTd DataLabel="Qt on hand">@item.QuantityAvailable</MudTd>
            <MudTd>
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.LocalShipping" OnClick="async () => OnShipItems(item)" />
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.CallReceived" OnClick="async () => OnReceiveItems(item)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    MudTable<WarehouseItem> table; 
    string? searchString;

    public Warehouse Warehouse { get; set; }

    private async Task<TableData<WarehouseItem>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var results = await WarehouseItemsClient.GetItemsAsync(Warehouse?.Id, state.Page + 1, state.PageSize, null, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Inventory.Client.SortDirection.Asc : YourBrand.Inventory.Client.SortDirection.Desc), cancellationToken);
            return new TableData<WarehouseItem> { Items = results.Items, TotalItems = results.TotalItems };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<WarehouseItem> ev)
    {
        var item = ev.Item;

        await OnItemClicked(item);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnWarehouseChanged(Warehouse w)
    {
        Warehouse = w;
        table.ReloadServerData();
    }

    async Task OnItemClicked(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(ItemDialog.WarehouseId), dto?.Warehouse.Id);
            parameters.Add(nameof(ItemDialog.ItemId), dto?.Item.Id);

            var dialogReference = DialogService.Show<ItemDialog>(dto is null ? "New Item" : $"Update {dto.Item.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnItemAdjustQuantityOnHand(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(AdjustQuantityOnHandDialog.ItemId), dto?.Item.Id);

            var dialogReference = DialogService.Show<AdjustQuantityOnHandDialog>("Adjust Quantity on Hand", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

            var item2 = await WarehouseItemsClient.GetItemAsync(Warehouse?.Id, dto?.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnPickItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(PickItemsDialog.ItemId), dto?.Item.Id);

            var dialogReference = DialogService.Show<PickItemsDialog>("Pick items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

            var item2 = await WarehouseItemsClient.GetItemAsync(Warehouse?.Id, dto?.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnReserveItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(ReserveItemsDialog.ItemId), dto?.Item.Id);

            var dialogReference = DialogService.Show<ReserveItemsDialog>("Reserve items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

            var item2 = await WarehouseItemsClient.GetItemAsync(Warehouse?.Id, dto?.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnShipItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(ShipItemsDialog.ItemId), dto?.Item.Id);

            var dialogReference = DialogService.Show<ShipItemsDialog>("Ship items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

            var item2 = await WarehouseItemsClient.GetItemAsync(Warehouse?.Id, dto?.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task OnReceiveItems(WarehouseItem? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(ReceiveItemsDialog.ItemId), dto?.Item.Id);

            var dialogReference = DialogService.Show<ReceiveItemsDialog>("Receive items", parameters, new DialogOptions {
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

           var tableData = GetTableData();
           var item = tableData.Items.First(x => x.Id == dto.Id);

            var item2 = await WarehouseItemsClient.GetItemAsync(Warehouse?.Id, dto?.Item.Id);

            item.QuantityAvailable = item2.QuantityAvailable;
            item.QuantityOnHand = item2.QuantityOnHand;
            item.QuantityPicked = item2.QuantityPicked;
            item.QuantityReserved = item2.QuantityReserved;

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private TableData<WarehouseItem>? GetTableData()
    {
        return (TableData<WarehouseItem>?)table?.GetType()?
            .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
                         System.Reflection.BindingFlags.Instance)?
            .GetValue(table);
    }
}