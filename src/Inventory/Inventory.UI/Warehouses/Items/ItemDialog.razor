@using System.ComponentModel.DataAnnotations
@inject IWarehouseItemsClient WarehouseItemsClient
@inject ISnackbar Snackbar

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Gutters="false">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                <WarehouseSelector Label="Warehouse" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Warehouse" For="@(() => Warehouse)" />

                <MudTextField Label="Location" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Location"
                              For="@(() => Location)" />

                @if(Id is null) 
                {
                    <MudNumericField Label="Quantity on Hand" Variant="Variant.Outlined" Class="mt-4" @bind-Value="QuantityOnHand"
                              For="@(() => QuantityOnHand)" />

                    <MudNumericField Label="Quantity Threshold" Variant="Variant.Outlined" Class="mt-4" @bind-Value="QuantityThreshold"
                              For="@(() => QuantityThreshold)" />
                }
            </MudContainer>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                @if(Id is null) 
                {
                    <text>Add</text>
                }
                else 
                {
                    <text>Update</text>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code
{
    EditContext context = null!;

    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string WarehouseId { get; set; } = null!;

    [Parameter]
    public string? ItemId { get; set; }

    [Required]
    public string Location { get; set; } 

    [Required]
    public Warehouse Warehouse { get; set; }

    [Required]
    public int QuantityOnHand { get; set; } 

    [Required]
    public int QuantityThreshold { get; set; } 


    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        if (Id is not null) 
        {
            var item = await WarehouseItemsClient.GetItemAsync(WarehouseId, ItemId);
            Id = item.Id;
            Warehouse = item.Warehouse;
            Location = item.Location;
        }
    }

    public async Task OnValidSubmit()
    {
        if(Id is null) 
        {
            var item = await WarehouseItemsClient.CreateItemAsync(Warehouse?.Id, new CreateWarehouseItem {
                ItemId = ItemId,
                Location = Location,
                QuantityOnHand = QuantityOnHand,
                QuantityThreshold = QuantityThreshold
            });

            Dialog.Close(item);
        }
        else 
        {
            if (context.IsModified())
            {
                await WarehouseItemsClient.UpdateItemAsync(Warehouse?.Id, Id, new UpdateWarehouseItem
                {
                    //Id = Id,
                    Location = Location
                });
            }

            Dialog.Close();
        }
    }
}