@page "/inventory/sites"
@attribute [Authorize]
@inject ISitesClient SitesClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<AppPageTitle>Sites</AppPageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Sites</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnSiteClicked(null)" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    New Site
</MudButton>

<MudPaper Class="pa-4" Elevation="25">
    <MudTable @ref="table" T="Site" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
              Striped="true" OnRowClick="ItemOnClick">
        <ToolBarContent>

            <MudSpacer />

            <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh><MudTableSortLabel T="Site" SortLabel="Name">Name</MudTableSortLabel></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    MudTable<Site> table; 
    string? searchString;

    private async Task<TableData<Site>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var results = await SitesClient.GetSitesAsync(state.Page + 1, state.PageSize, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Inventory.Client.SortDirection.Asc : YourBrand.Inventory.Client.SortDirection.Desc), cancellationToken);
            return new TableData<Site> { Items = results.Items, TotalItems = results.TotalItems };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<Site> ev)
    {
        var item = ev.Item;

        await OnSiteClicked(item);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    async Task OnSiteClicked(Site? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(SiteDialog.SiteId), dto?.Id);

            var dialogReference = await DialogService.ShowAsync<SiteDialog>(dto is null ? "New Site" : $"Update {dto.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}