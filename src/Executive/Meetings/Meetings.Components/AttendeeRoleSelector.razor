@using System
@using System.Linq
@using System.Linq.Expressions
@inject IAttendeeRolesClient AttendeeRolesClient
@inject IDialogService DialogService

<div class="d-flex flex-grow-1">
    <div class="flex-1 d-flex">
        <MudAutocomplete T="AttendeeRole" Label="@Label" Dense="true" Variant="Variant" Style="@Style" Class="@Class" Value="Value" ValueChanged="ValueChanged" Disabled="@Disabled" For="For" SearchFunc="SearchAttendeeRoles" ToStringFunc="(x) => x.Name"
            ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false">
            <ItemTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemTemplate>

            <ItemSelectedTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
    </div>
</div>

@code {
    [Parameter]
    public string Label { get; set; } = "Role";

    [Parameter]
    public AttendeeRole Value { get; set; }

    [Parameter]
    public EventCallback<AttendeeRole> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<AttendeeRole>> For { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public Variant Variant { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? OrganizationId { get; set; }

    async Task<IEnumerable<AttendeeRole>> SearchAttendeeRoles(string text, CancellationToken cancellationToken)
    {
        try
        {
            var results = await AttendeeRolesClient.GetAttendeeRolesAsync(OrganizationId, 1, 10, text, null, null, cancellationToken);

            return results.Items?
                .Where(r => string.Equals(r.Name, "Observer", StringComparison.OrdinalIgnoreCase)
                    || string.Equals(r.Name, "Attendee", StringComparison.OrdinalIgnoreCase))
                .OrderBy(r => r.Name)
                .ToList()
                ?? Enumerable.Empty<AttendeeRole>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return Enumerable.Empty<AttendeeRole>();
    }
}