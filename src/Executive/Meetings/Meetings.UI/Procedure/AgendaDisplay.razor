<ul>
    @foreach (var item in Agenda.Items)
    {
        <li class="mb-2">
            <MudText  @key="item.Id" Typo="@Typo.body1" Class="mb-2">
                @if (item.Id == AgendaItemId)
                {
                    <b>@item.Order. @item.Title</b>
                }
                else
                {
                    <text>@item.Order. @item.Title</text>
                }
                @if (!string.IsNullOrEmpty(GetEstimateLabel(item)))
                {
                    <span class="ms-2 text-secondary">(@GetEstimateLabel(item))</span>
                }
                @*
                @if (item.SubItems.Any())
                {
                    <MudIcon Icon="@Icons.Material.Filled.ChevronRight" />
                }*@
            </MudText>
            @if (item.Id == AgendaItemId && item.SubItems.Any() || DisplaySubItems) 
            {
                <ul class="ms-4">
                    @foreach (var item2 in item.SubItems)
                    {
                        <li class="mb-2">
                            <MudText @key="item2.Id" Typo="@Typo.body1" Class="mb-2">
                                @if (item2.Id == AgendaSubItemId)
                                {
                                    <b>@item2.Order. @item2.Title</b>
                                }
                                else
                                {
                                    <text>@item2.Order. @item2.Title</text>
                                }
                                @if (!string.IsNullOrEmpty(GetEstimateLabel(item2)))
                                {
                                    <span class="ms-2 text-secondary">(@GetEstimateLabel(item2))</span>
                                }
                            </MudText>
                        </li>
                    }
                </ul>
            }
        </li>
    }
</ul>

@code
{
    [Parameter]
    public Agenda Agenda { get; set; }

    [Parameter]
    public string AgendaItemId { get; set; }

    [Parameter]
    public string? AgendaSubItemId { get; set; }

    [Parameter]
    public bool DisplaySubItems { get; set; }

    [Parameter]
    public bool ShowTimeEstimates { get; set; }

    private string? GetEstimateLabel(AgendaItem item)
    {
        if (!ShowTimeEstimates)
        {
            return null;
        }

        List<string> parts = new();

        if (item.EstimatedStartTime is not null)
        {
            parts.Add($"Start {FormatTime(item.EstimatedStartTime.Value)}");
        }

        if (item.EstimatedEndTime is not null)
        {
            parts.Add($"End {FormatTime(item.EstimatedEndTime.Value)}");
        }

        if (item.EstimatedDuration is not null)
        {
            parts.Add($"Duration {FormatDuration(item.EstimatedDuration.Value)}");
        }

        return parts.Count == 0 ? null : string.Join(" â€¢ ", parts);
    }

    private static string FormatTime(TimeSpan value) => value.ToString(@"hh\:mm");

    private static string FormatDuration(TimeSpan value)
    {
        var minutes = value.TotalMinutes;

        return minutes % 1 == 0
            ? $"{minutes:0} min"
            : $"{minutes:0.##} min";
    }
}