@page "/meetings/{MeetingId:int}/procedure"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic
@using System.Linq
@using YourBrand.Portal.Services
@using YourBrand.Meetings
@using YourBrand.Meetings.Procedure
@attribute [Authorize]
@inject IStringLocalizer<DisplayPage> T
@inject IMeetingsClient MeetingsClient
@inject IAgendasClient AgendasClient
@inject IMotionsClient MotionsClient
@inject IVotingClient VotingClient
@inject IElectionsClient ElectionsClient
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@inject YourBrand.Portal.Services.IAccessTokenProvider AccessTokenProvider
@inject IUserContext UserContext
@inject ISnackbar Snackbar
@implements IDisposable
@implements IMeetingsProcedureHubClient

@if (meeting == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <AppPageTitle>@meeting?.Title</AppPageTitle>

    <MudGrid>
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-8 mb-4" Elevation="25">
                <MudText Typo="@Typo.h2" GutterBottom="true">@meeting?.Title</MudText>

                @if (meeting.State == MeetingState.Draft)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting is in draft state</MudText>
                }
                else if (meeting.State == MeetingState.Scheduled)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Waiting for the meeting to start</MudText>
                }
                else if (meeting.State == MeetingState.InProgress)
                {
                    @if (agendaItem is not null)
                    {
                        <MudText Typo="@Typo.h4" GutterBottom="true">@agendaItem?.Order. @agendaItem?.Title</MudText>

                        <MudText Typo="@Typo.body1" GutterBottom="true">@agendaItem.State</MudText>
                        @if (meeting.ShowAgendaTimeEstimates)
                        {
                            <MudText Typo="@Typo.body1" GutterBottom="true">Estimated start: @FormatTime(agendaItem.EstimatedStartTime)</MudText>
                            <MudText Typo="@Typo.body1" GutterBottom="true">Estimated end: @FormatTime(agendaItem.EstimatedEndTime)</MudText>
                            <MudText Typo="@Typo.body1" GutterBottom="true">Estimated duration: @FormatDuration(agendaItem.EstimatedDuration)</MudText>
                        }
                    }
                }
                else if (meeting.State == MeetingState.Adjourned)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting is adjourned</MudText>

                    @if (!string.IsNullOrWhiteSpace(meeting.AdjournmentMessage))
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled">@meeting.AdjournmentMessage</MudAlert>
                    }
                }
                else if (meeting.State == MeetingState.Completed)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting has concluded</MudText>
                }
                else if (meeting.State == MeetingState.Canceled)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting is canceled</MudText>
                }
            </MudPaper>

            @if (currentMotion is not null)
            {
                <MudPaper Class="pa-8 mb-4" Elevation="25">
                    <MotionDisplay Motion="@currentMotion" />
                </MudPaper>
            }

        </MudItem>

        <MudItem xs="12" md="4">
            @if(agenda is not null) 
            {
            <MudPaper Class="pa-8 mb-4" Elevation="25">
                    <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Agenda</MudText>

                    @{
                        string? currentItemId = null;
                        string? currentSubItemId = null;

                        currentItemId = agendaItem?.Id;

                        if (agendaItem?.ParentId is not null)
                        {
                            currentItemId = agendaItem.ParentId;
                            currentSubItemId = agendaItem.Id;
                        }
                    }

                    <AgendaDisplay Agenda="@agenda" AgendaItemId="@currentItemId" AgendaSubItemId="@currentSubItemId" ShowTimeEstimates="@meeting.ShowAgendaTimeEstimates" />
            </MudPaper>
            }
        </MudItem>
    </MudGrid>

    @if (@agendaItem?.State == AgendaItemState.Active && @agendaItem?.Phase == AgendaItemPhase.Discussion)
    {
        <MudPaper Class="pa-8 mb-4" Elevation="25">
            <MudText Typo="@Typo.h4" GutterBottom="true">Discussion</MudText>

            <SpeakerDisplay MeetingId="@MeetingId" />

        </MudPaper>
    }
    else if (@agendaItem?.State == AgendaItemState.Active && @agendaItem?.Phase == AgendaItemPhase.Voting)
    {
        <MudPaper Class="pa-8 mb-4" Elevation="25">
            <MudText Typo="@Typo.h4" GutterBottom="true">Voting</MudText>


        </MudPaper>
    }

    @if (agendaItem?.Type.Id == (int)AgendaItemTypeEnum.Voting
        && (agendaItem?.IsVoteCompleted == true || agendaItem?.State == AgendaItemState.Completed))
    {
        var voteResult = voting ?? agendaItem?.Voting;

        if (voteResult is not null)
        {
            <MudPaper Class="pa-8 mb-4" Elevation="25">
                <MudStack Spacing="2">
                    <MudText Typo="@Typo.h4" GutterBottom="true">Vote result</MudText>

                    <MudAlert Severity="@(voteResult.HasPassed ? Severity.Success : Severity.Error)" Variant="Variant.Filled">
                        @(voteResult.HasPassed ? "The motion passed." : "The motion did not pass.")
                    </MudAlert>

                @if (voteResult.Breakdown is not null && votingPresentation is not null)
                {
                    var valueLabel = ResultsPresentationHelper.ValueLabel(votingPresentation.ValueMode);
                    var voteChartSeries = ResultsPresentationHelper.BuildVoteSeries(voteResult.Breakdown, votingPresentation.ValueMode);

                    if (votingPresentation.DisplayMode == ResultsDisplayMode.Diagram)
                    {
                        <MudChart ChartType="ChartType.Pie"
                                  Class="mt-4"
                                  ChartSeries="@voteChartSeries"
                                  XAxisLabels="@VoteLabels" />
                    }
                    else
                    {
                        <MudSimpleTable Dense="true" Class="mt-4">
                            <thead>
                                <tr>
                                    <th>Option</th>
                                    <th class="text-end">@valueLabel</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>For</td>
                                    <td class="text-end">@ResultsPresentationHelper.FormatVoteValue(voteResult.Breakdown.ForVotes, voteResult.Breakdown, votingPresentation.ValueMode)</td>
                                </tr>
                                <tr>
                                    <td>Against</td>
                                    <td class="text-end">@ResultsPresentationHelper.FormatVoteValue(voteResult.Breakdown.AgainstVotes, voteResult.Breakdown, votingPresentation.ValueMode)</td>
                                </tr>
                                <tr>
                                    <td>Abstain</td>
                                    <td class="text-end">@ResultsPresentationHelper.FormatVoteValue(voteResult.Breakdown.AbstainVotes, voteResult.Breakdown, votingPresentation.ValueMode)</td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    }
                }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="mt-4">
                            Waiting for the chairperson to present the detailed results.
                        </MudAlert>
                    }
                </MudStack>
            </MudPaper>
        }
    }

    @if (agendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election
        && (agendaItem?.State == AgendaItemState.Completed || agendaItem?.Election?.ElectedCandidate is not null))
    {
        var electionResult = election ?? agendaItem?.Election;

        if (electionResult is not null)
        {
            <MudPaper Class="pa-8 mb-4" Elevation="25">
                <MudText Typo="@Typo.h4" GutterBottom="true">Election result</MudText>

                @if (electionResult.MeetingFunction?.Name is { } functionName)
                {
                    <MudText Typo="@Typo.subtitle1" Class="mb-2">Position: @functionName</MudText>
                }

                @if (electionResult.ElectedCandidate is { } electedCandidate)
                {
                    <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-2">
                        <MudText Typo="@Typo.h6" Class="mb-0">@electedCandidate.Name</MudText>
                    </MudAlert>

                    @if (!string.IsNullOrWhiteSpace(electedCandidate.Statement))
                    {
                        <MudText Typo="@Typo.body1">@electedCandidate.Statement</MudText>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">
                        No candidate was elected.
                    </MudAlert>
                }

                @{ var electionResults = electionResult.Results?.ToList() ?? new List<ElectionResult>(); }

                @if (electionResults.Count > 0 && electionPresentation is not null)
                {
                    var totalVotes = electionResults.Sum(r => r.Votes);
                    var labels = electionResults.Select(r => r.CandidateName).ToArray();
                    var electionChartSeries = ResultsPresentationHelper.BuildElectionSeries(electionResults, electionPresentation.ValueMode);
                    var valueLabel = ResultsPresentationHelper.ValueLabel(electionPresentation.ValueMode);

                    if (electionPresentation.DisplayMode == ResultsDisplayMode.Diagram)
                    {
                        <MudChart ChartType="ChartType.Pie"
                                  Class="mt-4"
                                  ChartSeries="@electionChartSeries"
                                  XAxisLabels="@labels" />
                    }
                    else
                    {
                        <MudSimpleTable Dense="true" Class="mt-4">
                            <thead>
                                <tr>
                                    <th>Candidate</th>
                                    <th class="text-end">@valueLabel</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var candidateResult in electionResults)
                                {
                                    <tr>
                                        <td>@candidateResult.CandidateName</td>
                                        <td class="text-end">@ResultsPresentationHelper.FormatElectionValue(candidateResult.Votes, totalVotes, electionPresentation.ValueMode)</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    }
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="mt-4">
                        Waiting for the chairperson to present the detailed results.
                    </MudAlert>
                }
            </MudPaper>
        }
    }

}
