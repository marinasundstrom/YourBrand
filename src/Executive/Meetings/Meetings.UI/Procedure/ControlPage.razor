@page "/meetings/{MeetingId:int}/control"
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using System.Linq
@using YourBrand.Portal.Services
@using YourBrand.Meetings.Procedure
@inject IStringLocalizer<DisplayPage> T
@inject IMeetingsClient MeetingsClient
@inject IChairmanClient ChairmanClient
@inject IAgendasClient AgendasClient
@inject IMotionsClient MotionsClient
@inject IDiscussionsClient DiscussionsClient
@inject IVotingClient VotingClient
@inject IElectionsClient ElectionsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@inject YourBrand.Portal.Services.IAccessTokenProvider AccessTokenProvider
@inject ISnackbar Snackbar
@implements IDisposable
@implements IDiscussionsHubClient

<AppPageTitle>@meeting?.Title</AppPageTitle>

@if (meeting == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudCard Elevation="25" Class="pa-3 mb-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h4">@meeting.Title</MudText>
                </MudCardHeader>

                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1"><b>Date:</b> @meeting.ScheduledAt.GetValueOrDefault().ToString("f")
                            </MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1"><b>Location:</b> @meeting.Location</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1"><b>State:</b> @meeting.State</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="mt-4" />

                </MudCardContent>

                <MudCardActions>
                    @if (meeting.State == MeetingState.Scheduled)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartMeeting">Start Meeting</MudButton>
                        }
                        else if (meeting.State == MeetingState.InProgress)
                        {
                            <div class="d-flex justify-space-between flex-grow-1 gap-4">
                                <div>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="me-2" OnClick="MoveToNextAgendaItem"
                                        Disabled="@(lastItem || (currentAgendaItem?.State == AgendaItemState.Active && currentAgendaItem?.Phase == AgendaItemPhase.Default))">Next Agenda Item</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="me-2"  OnClick="ResetProcedure">Reset procedure</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="AdjournMeeting">Adjourn</MudButton>
                                </div>
                                <div>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="me-2" OnClick="EndMeeting"
                                        Disabled="@(!lastItem || currentAgendaItem?.State != AgendaItemState.Completed)">End Meeting</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="me-2" OnClick="CancelMeeting"
                                        Disabled="@(lastItem && currentAgendaItem?.State == AgendaItemState.Completed)">Cancel Meeting</MudButton>
                                </div>
                            </div>
                        }
                        else if (meeting.State == MeetingState.Adjourned)
                        {
                            <div class="d-flex flex-column flex-grow-1 gap-2">
                                <MudText Typo="Typo.subtitle1">The meeting is currently adjourned.</MudText>

                                @if (!string.IsNullOrWhiteSpace(meeting.AdjournmentMessage))
                                {
                                    <MudAlert Severity="Severity.Info" Variant="Variant.Filled">@meeting.AdjournmentMessage</MudAlert>
                                }

                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResumeMeeting">Resume meeting</MudButton>
                            </div>
                        }
                        else if (meeting.State == MeetingState.Completed)
                        {
                            <MudText Typo="Typo.subtitle1">The meeting has concluded.</MudText>
                        }
                    </MudCardActions>
                </MudCard>

                <MudCard Class="pa-3 mb-4" Elevation="25">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Current Agenda Item</MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        @if (currentAgendaItem != null && meeting.State == MeetingState.InProgress)
                        {
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>Number:</b> @currentAgendaItem.Order</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>Title:</b> @currentAgendaItem.Title</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>Type:</b> @currentAgendaItem.Type.Name</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>State:</b> @currentAgendaItem.State</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText Typo="Typo.body1"><b>Description:</b> @currentAgendaItem.Description</MudText>
                                </MudItem>
                                @if (meeting.ShowAgendaTimeEstimates)
                                {
                                    <MudItem xs="12" sm="6">
                                        <MudText Typo="Typo.subtitle1"><b>Estimated start:</b> @FormatTime(currentAgendaItem.EstimatedStartTime)</MudText>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudText Typo="Typo.subtitle1"><b>Estimated end:</b> @FormatTime(currentAgendaItem.EstimatedEndTime)</MudText>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudText Typo="Typo.subtitle1"><b>Estimated duration:</b> @FormatDuration(currentAgendaItem.EstimatedDuration)</MudText>
                                    </MudItem>
                                }
                            </MudGrid>

                            <MudDivider Class="mt-4" />

                            @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Voting
                                && (currentAgendaItem?.IsVoteCompleted == true || currentAgendaItem?.State == AgendaItemState.Completed))
                            {
                                var voteResult = voting ?? currentAgendaItem?.Voting;

                                if (voteResult is not null)
                                {
                                    var canPresentVote = voteResult.Breakdown is not null;

                                    <MudPaper Class="pa-4 mt-4" Elevation="1">
                                        <MudStack Spacing="2">
                                            <MudText Typo="Typo.subtitle1" Class="mb-0">Vote result</MudText>

                                            <MudAlert Severity="@(voteResult.HasPassed ? Severity.Success : Severity.Error)" Variant="Variant.Filled">
                                                <MudText Typo="Typo.subtitle1" Class="mb-0">
                                                    @(voteResult.HasPassed ? "The motion passed." : "The motion did not pass.")
                                                </MudText>
                                            </MudAlert>

                                            <MudStack Direction="Row" Spacing="1" AlignItems="AlignItems.Center">
                                                <MudRadioGroup T="ResultsDisplayMode" Orientation="Orientation.Horizontal" @bind-SelectedOption="votingDisplayMode">
                                                    <MudRadio T="ResultsDisplayMode" Option="ResultsDisplayMode.Diagram">Diagram</MudRadio>
                                                    <MudRadio T="ResultsDisplayMode" Option="ResultsDisplayMode.Numbers">Numbers</MudRadio>
                                                </MudRadioGroup>

                                                <MudRadioGroup T="ResultsValueMode" Orientation="Orientation.Horizontal" @bind-SelectedOption="votingValueMode">
                                                    <MudRadio T="ResultsValueMode" Option="ResultsValueMode.Votes">Votes</MudRadio>
                                                    <MudRadio T="ResultsValueMode" Option="ResultsValueMode.Percent">Percent</MudRadio>
                                                </MudRadioGroup>
                                            </MudStack>

                                            @if (canPresentVote)
                                            {
                                                var valueLabel = ResultsPresentationHelper.ValueLabel(votingValueMode);
                                                var voteChartSeries = ResultsPresentationHelper.BuildVoteSeries(voteResult.Breakdown, votingValueMode);

                                                @if (votingDisplayMode == ResultsDisplayMode.Diagram)
                                                {
                                                    <MudChart ChartType="ChartType.Pie"
                                                              Class="mt-2"
                                                              ChartSeries="@voteChartSeries"
                                                              XAxisLabels="@VoteLabels" />
                                                }
                                                else
                                                {
                                                    <MudSimpleTable Dense="true" Class="mt-2">
                                                        <thead>
                                                            <tr>
                                                                <th>Option</th>
                                                                <th class="text-end">@valueLabel</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td>For</td>
                                                                <td class="text-end">@ResultsPresentationHelper.FormatVoteValue(voteResult.Breakdown.ForVotes, voteResult.Breakdown, votingValueMode)</td>
                                                            </tr>
                                                            <tr>
                                                                <td>Against</td>
                                                                <td class="text-end">@ResultsPresentationHelper.FormatVoteValue(voteResult.Breakdown.AgainstVotes, voteResult.Breakdown, votingValueMode)</td>
                                                            </tr>
                                                            <tr>
                                                                <td>Abstain</td>
                                                                <td class="text-end">@ResultsPresentationHelper.FormatVoteValue(voteResult.Breakdown.AbstainVotes, voteResult.Breakdown, votingValueMode)</td>
                                                            </tr>
                                                        </tbody>
                                                    </MudSimpleTable>
                                                }
                                            }
                                            else
                                            {
                                                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                                    Results are not yet tallied.
                                                </MudAlert>
                                            }

                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!canPresentVote)" OnClick="PresentVotingResultsAsync">
                                                Present results
                                            </MudButton>
                                        </MudStack>
                                    </MudPaper>
                                }
                            }

                            @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election
                                && (currentAgendaItem?.State == AgendaItemState.Completed || currentAgendaItem?.Election?.ElectedCandidate is not null))
                            {
                                var electionResult = election ?? currentAgendaItem?.Election;

                                if (electionResult is not null)
                                {
                                    var hasWinner = electionResult.ElectedCandidate is not null;
                                    var electionResults = electionResult.Results?.ToList() ?? new List<ElectionResult>();
                                    var canPresentElection = electionResults.Count > 0;

                                    <MudPaper Class="pa-4 mt-4" Elevation="1">
                                        <MudStack Spacing="2">
                                            <MudText Typo="Typo.subtitle1" Class="mb-0">Election result</MudText>

                                            <MudAlert Severity="@(hasWinner ? Severity.Success : Severity.Warning)" Variant="Variant.Filled">
                                                <MudStack Spacing="1">
                                                    @if (electionResult.MeetingFunction?.Name is { } functionName)
                                                    {
                                                        <MudText Typo="Typo.body2" Class="mb-0">Position: @functionName</MudText>
                                                    }

                                                    @if (hasWinner)
                                                    {
                                                        <MudText Typo="Typo.h6" Class="mb-0">@electionResult.ElectedCandidate!.Name</MudText>

                                                        @if (!string.IsNullOrWhiteSpace(electionResult.ElectedCandidate!.Statement))
                                                        {
                                                            <MudText Typo="Typo.body2">@electionResult.ElectedCandidate!.Statement</MudText>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.body2" Class="mb-0">No candidate was elected.</MudText>
                                                    }
                                                </MudStack>
                                            </MudAlert>

                                            <MudStack Direction="Row" Spacing="1" AlignItems="AlignItems.Center">
                                                <MudRadioGroup T="ResultsDisplayMode" Orientation="Orientation.Horizontal" @bind-SelectedOption="electionDisplayMode">
                                                    <MudRadio T="ResultsDisplayMode" Option="ResultsDisplayMode.Diagram">Diagram</MudRadio>
                                                    <MudRadio T="ResultsDisplayMode" Option="ResultsDisplayMode.Numbers">Numbers</MudRadio>
                                                </MudRadioGroup>

                                                <MudRadioGroup T="ResultsValueMode" Orientation="Orientation.Horizontal" @bind-SelectedOption="electionValueMode">
                                                    <MudRadio T="ResultsValueMode" Option="ResultsValueMode.Votes">Votes</MudRadio>
                                                    <MudRadio T="ResultsValueMode" Option="ResultsValueMode.Percent">Percent</MudRadio>
                                                </MudRadioGroup>
                                            </MudStack>

                                            @if (canPresentElection)
                                            {
                                                var totalVotes = electionResults.Sum(r => r.Votes);
                                                var labels = electionResults.Select(r => r.CandidateName).ToArray();
                                                var electionChartSeries = ResultsPresentationHelper.BuildElectionSeries(electionResults, electionValueMode);
                                                var valueLabel = ResultsPresentationHelper.ValueLabel(electionValueMode);

                                                @if (electionDisplayMode == ResultsDisplayMode.Diagram)
                                                {
                                                    <MudChart ChartType="ChartType.Pie"
                                                              Class="mt-2"
                                                              ChartSeries="@electionChartSeries"
                                                              XAxisLabels="@labels" />
                                                }
                                                else
                                                {
                                                    <MudSimpleTable Dense="true" Class="mt-2">
                                                        <thead>
                                                            <tr>
                                                                <th>Candidate</th>
                                                                <th class="text-end">@valueLabel</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var candidateResult in electionResults)
                                                            {
                                                                <tr>
                                                                    <td>@candidateResult.CandidateName</td>
                                                                    <td class="text-end">@ResultsPresentationHelper.FormatElectionValue(candidateResult.Votes, totalVotes, electionValueMode)</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </MudSimpleTable>
                                                }
                                            }
                                            else
                                            {
                                                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                                    Results are not yet tallied.
                                                </MudAlert>
                                            }

                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!canPresentElection)" OnClick="PresentElectionResultsAsync">
                                                Present results
                                            </MudButton>
                                        </MudStack>
                                    </MudPaper>
                                }
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.subtitle1">No current agenda item.</MudText>
                        }
                    </MudCardContent>

                    <MudCardActions>
                        @if (currentAgendaItem is not null)
                        {
                            if (currentAgendaItem.State == AgendaItemState.Active && currentAgendaItem.Phase == AgendaItemPhase.Default)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartDiscussion" Class="me-2">Start
                                    Discussion</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="PostponeAgendaItem" Class="me-2">Postpone
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelAgendaItem" Class="me-2">Cancel
                                </MudButton>

                                @if (CanCompleteCurrentAgendaItem)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CompleteAgendaItem">Complete
                                        Agenda Item</MudButton>
                                }
                            }
                            else if (currentAgendaItem.State == AgendaItemState.Active && currentAgendaItem.Phase == AgendaItemPhase.Discussion)
                            {
                                <!-- Include Debate Component -->
                                <Debate Motion="@currentMotion" />
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartVoting">Start Voting</MudButton>
                            }
                            else if (currentAgendaItem.State == AgendaItemState.Active && currentAgendaItem.Phase == AgendaItemPhase.Voting)
                            {
                                <!-- Include Voting Component -->
                                <VoteComponent Motion="@currentMotion" />
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CompleteAgendaItem">Complete Agenda Item
                                </MudButton>
                            }
                            else if (currentAgendaItem.State == AgendaItemState.Completed)
                            {
                                <MudText Typo="Typo.subtitle1">This agenda item has been completed.</MudText>
                            }
                        }
                    </MudCardActions>
                </MudCard>

                @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.RollCall
                    && currentAgendaItem?.Phase != AgendaItemPhase.Voting
                    && currentAgendaItem?.State != AgendaItemState.Completed)
                {
                    <MudPaper Class="pa-6 mb-4" Elevation="25">
                        <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Roll call</MudText>

                        <YourBrand.Meetings.Procedure.RollCall.RollCallDisplay OrganizationId="@organization.Id" Meeting="@meeting" />

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CompleteAgendaItem">Complete Agenda Item</MudButton>
                    </MudPaper>
                }

                @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election
                    && currentAgendaItem?.Phase != AgendaItemPhase.Voting
                    && currentAgendaItem?.State != AgendaItemState.Completed)
                {
                    <MudPaper Class="pa-6 mb-4" Elevation="25">
                        <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Candidates</MudText>

                        <YourBrand.Meetings.Procedure.Election.CandidatesView Meeting="@meeting" AgendaItem="@currentAgendaItem" />

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CompleteAgendaItem">Complete Agenda Item</MudButton>
                    </MudPaper>
                }

                @if (currentMotion is not null)
                {
                    <MudPaper Class="pa-6 mb-4" Elevation="25">
                        <MotionDisplay Motion="@currentMotion" />
                    </MudPaper>
                }

                @if (@currentAgendaItem?.State == AgendaItemState.Active && @currentAgendaItem?.Phase == AgendaItemPhase.Discussion)
                {
                    <MudPaper Class="pa-6 mb-4" Elevation="25">
                        <MudText Typo="@Typo.h4" GutterBottom="true">Discussion</MudText>

                        @if (discussion is not null)
                        {
                            <MudGrid Class="mb-4">
                                <MudItem xs="12" md="6">
                                    <MudNumericField T="int?" @bind-Value="speakingTimeLimitSecondsInput" Immediate="true" Clearable="true" Label="Default speaking time (seconds)" />
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2"
                                               OnClick="SetDiscussionSpeakingTimeAsync">Save</MudButton>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudSelect T="string" @bind-Value="selectedSpeakerRequestId" Dense="true" Label="Select speaker">
                                        @foreach (var speaker in SpeakerRequestsForExtension)
                                        {
                                            <MudSelectItem Value="@speaker.Id">@speaker.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudNumericField T="int" @bind-Value="additionalSpeakingTimeSeconds" Immediate="true" Min="1" Label="Additional speaking time (seconds)" />
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2"
                                               Disabled="@(!CanExtendSpeakerTime)"
                                               OnClick="ExtendSpeakerTimeAsync">Extend</MudButton>
                                </MudItem>
                            </MudGrid>
                        }

                        <MudStack Direction="Row" Spacing="1" Class="mb-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                       Disabled="@(!CanStartSpeakerClock)"
                                       OnClick="StartSpeakerClockAsync">Start clock</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                                       Disabled="@(!CanStopSpeakerClock)"
                                       OnClick="StopSpeakerClockAsync">Stop clock</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Info"
                                       Disabled="@(!CanResetSpeakerClock)"
                                       OnClick="ResetSpeakerClockAsync">Reset clock</MudButton>
                            <MudButton Variant="Variant.Filled"
                                OnClick="async () => await hubProxy.MoveToNextSpeaker()">Next speaker</MudButton>
                        </MudStack>

                        <SpeakerDisplay MeetingId="@MeetingId" />

                    </MudPaper>
                }
        </MudItem>

        <MudItem xs="12" md="4">
            @if(agenda is not null) 
            {
            <MudPaper Class="pa-6 mb-4" Elevation="25">
                <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Agenda</MudText>

                @{
                    string? currentItemId = null;
                    string? currentSubItemId = null;

                    currentItemId = currentAgendaItem?.Id;

                    if(currentAgendaItem?.ParentId is not null) 
                    {
                        currentItemId = currentAgendaItem.ParentId;
                        currentSubItemId = currentAgendaItem.Id;
                    }
                }
                
                <AgendaDisplay Agenda="@agenda" AgendaItemId="@currentItemId"  AgendaSubItemId="@currentSubItemId" ShowTimeEstimates="@meeting.ShowAgendaTimeEstimates"  />

            </MudPaper>
            }
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public int MeetingId { get; set; }

    private Meeting meeting;
    private Agenda? agenda;
    private AgendaItem? currentAgendaItem;
    private Motion? currentMotion;
    private bool lastItem;

    private Discussion? discussion;
    private Voting? voting;
    private Election? election;

    private int? speakingTimeLimitSecondsInput;
    private string? selectedSpeakerRequestId;
    private int additionalSpeakingTimeSeconds = 60;

    private IEnumerable<SpeakerRequest> SpeakerRequestsForExtension =>
        discussion is null
            ? Enumerable.Empty<SpeakerRequest>()
            : (discussion.CurrentSpeaker is not null
                ? new[] { discussion.CurrentSpeaker }.Concat(discussion.SpeakerQueue ?? Enumerable.Empty<SpeakerRequest>())
                : discussion.SpeakerQueue ?? Enumerable.Empty<SpeakerRequest>());

    private bool CanExtendSpeakerTime => !string.IsNullOrEmpty(selectedSpeakerRequestId) && additionalSpeakingTimeSeconds > 0;

    private bool CanStartSpeakerClock =>
        discussion?.CurrentSpeaker is not null && discussion.CurrentSpeakerClock?.IsRunning != true;

    private bool CanStopSpeakerClock =>
        discussion?.CurrentSpeaker is not null && discussion.CurrentSpeakerClock?.IsRunning == true;

    private bool CanResetSpeakerClock =>
        discussion?.CurrentSpeaker is not null && discussion.CurrentSpeakerClock is not null;

    private bool CanCompleteCurrentAgendaItem =>
        currentAgendaItem is not null &&
        currentAgendaItem.State == AgendaItemState.Active &&
        currentAgendaItem.State != AgendaItemState.Canceled &&
        currentAgendaItem.State != AgendaItemState.Skipped &&
        (currentAgendaItem.DiscussionActions != DiscussionActions.Required || currentAgendaItem.IsDiscussionCompleted) &&
        (currentAgendaItem.VoteActions != VoteActions.Required || currentAgendaItem.IsVoteCompleted);

    private static string FormatTime(TimeSpan? timeSpan) => timeSpan is null ? "-" : timeSpan.Value.ToString(@"hh\:mm");

    private static string FormatDuration(TimeSpan? duration)
    {
        if (duration is null)
        {
            return "-";
        }

        var minutes = duration.Value.TotalMinutes;

        return minutes % 1 == 0
            ? $"{minutes:0} min"
            : $"{minutes:0.##} min";
    }

    HubConnection procedureHub = null!;
    IDiscussionsHub hubProxy = default!;
    IMeetingsProcedureHub meetingsHubProxy = default!;

    private ResultsDisplayMode votingDisplayMode = ResultsDisplayMode.Diagram;
    private ResultsValueMode votingValueMode = ResultsValueMode.Votes;
    private ResultsDisplayMode electionDisplayMode = ResultsDisplayMode.Diagram;
    private ResultsValueMode electionValueMode = ResultsValueMode.Votes;
    private static readonly string[] VoteLabels = new[] { "For", "Against", "Abstain" };


    protected override async Task OnInitializedAsync()
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;

        await LoadMeetingDetails();
      await InitHubs();
    }

    private async Task InitHubs()
    {
        procedureHub = new HubConnectionBuilder().WithUrl($"{NavigationManager.BaseUri}api/meetings/hubs/meetings/procedure/?organizationId={organization.Id}&meetingId={MeetingId}",
        options =>
        {
            options.AccessTokenProvider = async () =>
            {
                return await AccessTokenProvider.GetAccessTokenAsync();
            };
        }).WithAutomaticReconnect().Build();

        hubProxy = procedureHub.ServerProxy<IDiscussionsHub>();
        meetingsHubProxy = procedureHub.ServerProxy<IMeetingsProcedureHub>();
        _ = procedureHub.ClientRegistration<IDiscussionsHubClient>(this);

        procedureHub.Closed += (error) =>
        {
            if (error is not null)
            {
                Snackbar.Add($"{error.Message}", Severity.Error, configure: options =>
                {
                    options.Icon = Icons.Material.Filled.Cable;
                });
            }

            Snackbar.Add(T["Disconnected"], configure: options =>
            {
                options.Icon = Icons.Material.Filled.Cable;
            });

            return Task.CompletedTask;
        };

        procedureHub.Reconnected += (error) =>
        {
            Snackbar.Add(T["Reconnected"], configure: options =>
            {
                options.Icon = Icons.Material.Filled.Cable;
            });

            return Task.CompletedTask;
        };

        procedureHub.Reconnecting += (error) =>
        {
            Snackbar.Add(T["Reconnecting"], configure: options =>
            {
                options.Icon = Icons.Material.Filled.Cable;
            });

            return Task.CompletedTask;
        };

        await procedureHub.StartAsync();
    }

    private async Task PresentVotingResultsAsync()
    {
        if (meetingsHubProxy is null)
        {
            return;
        }

        var options = new VotingResultsPresentationOptions(votingDisplayMode, votingValueMode);

        try
        {
            await meetingsHubProxy.PresentVotingResults(options);
            Snackbar.Add("Vote results presented.", Severity.Success);
        }
        catch (HubException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task PresentElectionResultsAsync()
    {
        if (meetingsHubProxy is null)
        {
            return;
        }

        var options = new ElectionResultsPresentationOptions(electionDisplayMode, electionValueMode);

        try
        {
            await meetingsHubProxy.PresentElectionResults(options);
            Snackbar.Add("Election results presented.", Severity.Success);
        }
        catch (HubException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task RefreshDiscussionAsync()
    {
        if (currentAgendaItem is null || currentAgendaItem.State != AgendaItemState.Active || currentAgendaItem.Phase != AgendaItemPhase.Discussion)
        {
            discussion = null;
            speakingTimeLimitSecondsInput = null;
            selectedSpeakerRequestId = null;
            return;
        }

        try
        {
            var previousSelection = selectedSpeakerRequestId;

            discussion = await DiscussionsClient.GetDiscussionAsync(organization.Id, MeetingId);
            speakingTimeLimitSecondsInput = discussion.SpeakingTimeLimitSeconds;

            if (previousSelection is not null && SpeakerRequestsForExtension.Any(x => x.Id == previousSelection))
            {
                selectedSpeakerRequestId = previousSelection;
            }
            else
            {
                selectedSpeakerRequestId = null;
            }

            StateHasChanged();
        }
        catch (ApiException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task SetDiscussionSpeakingTimeAsync()
    {
        if (currentAgendaItem is null)
        {
            return;
        }

        if (speakingTimeLimitSecondsInput is not null && speakingTimeLimitSecondsInput <= 0)
        {
            Snackbar.Add("Speaking time must be greater than zero.", Severity.Warning);
            return;
        }

        await hubProxy.SetDiscussionSpeakingTime(currentAgendaItem.Id, speakingTimeLimitSecondsInput);
    }

    private async Task ExtendSpeakerTimeAsync()
    {
        if (currentAgendaItem is null)
        {
            return;
        }

        if (string.IsNullOrEmpty(selectedSpeakerRequestId))
        {
            Snackbar.Add("Select a speaker before extending time.", Severity.Warning);
            return;
        }

        if (additionalSpeakingTimeSeconds <= 0)
        {
            Snackbar.Add("Additional speaking time must be greater than zero.", Severity.Warning);
            return;
        }

        await hubProxy.ExtendSpeakerTime(currentAgendaItem.Id, selectedSpeakerRequestId, additionalSpeakingTimeSeconds);
    }

    private async Task StartSpeakerClockAsync()
    {
        if (currentAgendaItem is null)
        {
            return;
        }

        await hubProxy.StartCurrentSpeakerClock(currentAgendaItem.Id);
    }

    private async Task StopSpeakerClockAsync()
    {
        if (currentAgendaItem is null)
        {
            return;
        }

        await hubProxy.StopCurrentSpeakerClock(currentAgendaItem.Id);
    }

    private async Task ResetSpeakerClockAsync()
    {
        if (currentAgendaItem is null)
        {
            return;
        }

        await hubProxy.ResetCurrentSpeakerClock(currentAgendaItem.Id);
    }

    private async Task ResetProcedure() 
    {
        var r = await DialogService.ShowMessageBox("Reset the procedure?", "This can't be undone.", "Yes", "No");

        if(!r.GetValueOrDefault()) 
        {
            return;
        }

        await ChairmanClient.ResetMeetingProcedureAsync(organization.Id, MeetingId);

        await LoadMeetingDetails();
    }

    YourBrand.Portal.Services.Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    private async Task LoadMeetingDetails()
    {
        //if(meeting is null) 
        //{
            meeting = await MeetingsClient.GetMeetingByIdAsync(organization.Id, MeetingId);
        //}

        //if(agenda is null) 
        //{
            agenda = await MeetingsClient.GetMeetingAgendaAsync(organization.Id, MeetingId);
        //}
 
        currentAgendaItem = meeting.CurrentAgendaItemIndex is null ? null : agenda!.Items
            .OrderBy(ai => ai.Order)
            .ElementAtOrDefault(meeting.CurrentAgendaItemIndex.GetValueOrDefault());

        if(currentAgendaItem is not null 
            && meeting.CurrentAgendaSubItemIndex is not null
            && currentAgendaItem.SubItems.Any()) 
        {
            currentAgendaItem = meeting.CurrentAgendaSubItemIndex is null ? null : currentAgendaItem!.SubItems
                .OrderBy(ai => ai.Order)
                .ElementAtOrDefault(meeting.CurrentAgendaSubItemIndex.GetValueOrDefault());
        }

        lastItem = agenda.Items.OrderBy(ai => ai.Order).LastOrDefault()?.Id == currentAgendaItem?.Id;

        currentMotion = null;
        voting = null;
        election = null;

        if (currentAgendaItem is not null)
        {
            discussion = null;
            speakingTimeLimitSecondsInput = null;
            selectedSpeakerRequestId = null;

            // Load the current motion associated with the agenda item
            if (currentAgendaItem.MotionId is not null)
            {
                currentMotion = await MotionsClient.GetMotionByIdAsync(organization.Id, currentAgendaItem.MotionId.GetValueOrDefault());
            }

            if(currentAgendaItem.State == AgendaItemState.Active && currentAgendaItem.Phase == AgendaItemPhase.Discussion)
            {
                await RefreshDiscussionAsync();
            }
            
            var isVotingItem = currentAgendaItem.Type.Id == (int)AgendaItemTypeEnum.Voting;
            var isElectionItem = currentAgendaItem.Type.Id == (int)AgendaItemTypeEnum.Election;

            if(currentAgendaItem.State == AgendaItemState.Active && currentAgendaItem.Phase == AgendaItemPhase.Voting)
            {
                if(isVotingItem)
                {
                    voting = await VotingClient.GetVotingAsync(organization.Id, MeetingId);
                }
                else if(isElectionItem)
                {
                    election = await ElectionsClient.GetElectionAsync(organization.Id, MeetingId);
                }
            }
            else
            {
                if(isVotingItem && (currentAgendaItem.IsVoteCompleted || currentAgendaItem.State == AgendaItemState.Completed))
                {
                    voting = currentAgendaItem.Voting ?? await VotingClient.GetVotingAsync(organization.Id, MeetingId);
                }
                else if(isElectionItem && (currentAgendaItem.State == AgendaItemState.Completed || currentAgendaItem.Election?.ElectedCandidate is not null))
                {
                    election = currentAgendaItem.Election ?? await ElectionsClient.GetElectionAsync(organization.Id, MeetingId);
                }
            }
        }
    }

    private async Task StartMeeting()
    {
        await MeetingsClient.StartMeetingAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task MoveToNextAgendaItem()
    {
        await MeetingsClient.MoveToNextAgendaItemAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task EndMeeting()
    {
        await MeetingsClient.EndMeetingAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task CancelMeeting()
    {
        var r = await DialogService.ShowMessageBox("Cancel the meeting?", "This can't be undone.", "Yes", "No");

        if(!r.GetValueOrDefault())
        {
            return;
        }

        await MeetingsClient.CancelMeetingAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task AdjournMeeting()
    {
        var dialog = await DialogService.ShowAsync<AdjournMeetingDialog>("Adjourn meeting");

        var result = await dialog.Result;

        if(result.Canceled)
        {
            return;
        }

        var message = (string)result.Data!;

        await MeetingsClient.AdjournMeetingAsync(organization.Id, MeetingId, new AdjournMeeting { Message = message });

        await LoadMeetingDetails();
    }

    private async Task ResumeMeeting()
    {
        await MeetingsClient.ResumeMeetingAsync(organization.Id, MeetingId);

        await LoadMeetingDetails();
    }

    private async Task StartDiscussion()
    {
        await ChairmanClient.StartDiscussionAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task StartVoting()
    {
        await ChairmanClient.StartVotingAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task CompleteAgendaItem()
    {
        await MeetingsClient.CompleteAgendaItemAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task CancelAgendaItem()
    {
        await MeetingsClient.CancelAgendaItemAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task PostponeAgendaItem()
    {
        await MeetingsClient.PostponeAgendaItemAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    public void Dispose()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
 
    public Task OnDiscussionStatusChanged(int status)
    {
        return Task.CompletedTask;
    }

    public async Task OnSpeakerRequestRevoked(string agendaItemId, string id)
    {
        await RefreshDiscussionAsync();
    }

    public async Task OnSpeakerRequestAdded(string agendaItemId, string id, string attendeeId, string name)
    {
        await RefreshDiscussionAsync();
    }

    public async Task OnMovedToNextSpeaker(string agendaItemId, string? id)
    {
        await RefreshDiscussionAsync();
    }

    public async Task OnSpeakerTimeExtended(string agendaItemId, string speakerRequestId, int? allocatedSeconds)
    {
        if (discussion is null)
        {
            return;
        }

        if (discussion.CurrentSpeaker?.Id == speakerRequestId)
        {
            discussion.CurrentSpeaker.AllocatedSpeakingTimeSeconds = allocatedSeconds;
        }

        if (discussion.SpeakerQueue is not null)
        {
            foreach (var speaker in discussion.SpeakerQueue)
            {
                if (speaker.Id == speakerRequestId)
                {
                    speaker.AllocatedSpeakingTimeSeconds = allocatedSeconds;
                    break;
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public async Task OnDiscussionSpeakingTimeChanged(string agendaItemId, int? speakingTimeLimitSeconds)
    {
        speakingTimeLimitSecondsInput = speakingTimeLimitSeconds;
        await RefreshDiscussionAsync();
    }

    public async Task OnSpeakerClockStarted(string agendaItemId, string speakerRequestId, int elapsedSeconds, DateTimeOffset startedAtUtc)
    {
        if (discussion?.CurrentSpeaker?.Id != speakerRequestId)
        {
            await RefreshDiscussionAsync();
            return;
        }

        discussion.CurrentSpeakerClock ??= new SpeakerClock();
        discussion.CurrentSpeakerClock.IsRunning = true;
        discussion.CurrentSpeakerClock.ElapsedSeconds = elapsedSeconds;
        discussion.CurrentSpeakerClock.StartedAtUtc = startedAtUtc;

        await InvokeAsync(StateHasChanged);
    }

    public async Task OnSpeakerClockStopped(string agendaItemId, string speakerRequestId, int elapsedSeconds)
    {
        if (discussion?.CurrentSpeaker?.Id != speakerRequestId)
        {
            await RefreshDiscussionAsync();
            return;
        }

        discussion.CurrentSpeakerClock ??= new SpeakerClock();
        discussion.CurrentSpeakerClock.IsRunning = false;
        discussion.CurrentSpeakerClock.ElapsedSeconds = elapsedSeconds;
        discussion.CurrentSpeakerClock.StartedAtUtc = null;

        await InvokeAsync(StateHasChanged);
    }

    public async Task OnSpeakerClockReset(string agendaItemId, string speakerRequestId, int elapsedSeconds)
    {
        if (discussion?.CurrentSpeaker?.Id != speakerRequestId)
        {
            await RefreshDiscussionAsync();
            return;
        }

        discussion.CurrentSpeakerClock ??= new SpeakerClock();
        discussion.CurrentSpeakerClock.IsRunning = false;
        discussion.CurrentSpeakerClock.ElapsedSeconds = elapsedSeconds;
        discussion.CurrentSpeakerClock.StartedAtUtc = null;

        await InvokeAsync(StateHasChanged);
    }
}
