@page "/meetings/{MeetingId:int}/control"
@using YourBrand.Portal.Services
@inject IMeetingsClient MeetingsClient
@inject IAgendasClient AgendasClient
@inject IMotionsClient MotionsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

<AppPageTitle>@meeting?.Title</AppPageTitle>

@if (meeting == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudGrid>
        <MudItem xs="12" md="8">
            <MudCard Elevation="25" Class="pa-3 mb-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h4">@meeting.Title</MudText>
                </MudCardHeader>

                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1"><b>Date:</b> @meeting.ScheduledAt.GetValueOrDefault().ToString("f")
                            </MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1"><b>Location:</b> @meeting.Location</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1"><b>State:</b> @meeting.State</MudText>
                        </MudItem>
                    </MudGrid>

                    <MudDivider Class="mt-4" />

                </MudCardContent>

                <MudCardActions>
                    @if (meeting.State == MeetingState.Scheduled)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartMeeting">Start Meeting</MudButton>
                        }
                        else if (meeting.State == MeetingState.InProgress)
                        {
                            <div class="d-flex justify-space-between flex-grow-1 gap-4">
                                <div>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="me-2" OnClick="MoveToNextAgendaItem"
                                        Disabled="@(lastItem || currentAgendaItem?.State == AgendaItemState.Pending)">Next Agenda Item</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="me-2"  OnClick="ResetProcedure">Reset procedure</MudButton>
                                </div>
                                <div>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="me-2" OnClick="EndMeeting"
                                        Disabled="@(!lastItem || currentAgendaItem?.State != AgendaItemState.Completed)">End Meeting</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="me-2" OnClick="CancelMeeting" 
                                        Disabled="@(lastItem && currentAgendaItem?.State == AgendaItemState.Completed)">Cancel Meeting</MudButton>
                                </div>
                            </div>
                        }
                        else if (meeting.State == MeetingState.Completed)
                        {
                            <MudText Typo="Typo.subtitle1">The meeting has concluded.</MudText>
                        }
                    </MudCardActions>
                </MudCard>

                <MudCard Class="pa-3 mb-4" Elevation="25">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6">Current Agenda Item</MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        @if (currentAgendaItem != null && meeting.State == MeetingState.InProgress)
                        {
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>Number:</b> @currentAgendaItem.Order</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>Title:</b> @currentAgendaItem.Title</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>Type:</b> @currentAgendaItem.Type.Name</MudText>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudText Typo="Typo.subtitle1"><b>State:</b> @currentAgendaItem.State</MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText Typo="Typo.body1"><b>Description:</b> @currentAgendaItem.Description</MudText>
                                </MudItem>
                            </MudGrid>

                            <MudDivider Class="mt-4" />
                        }
                        else
                        {
                            <MudText Typo="Typo.subtitle1">No current agenda item.</MudText>
                        }
                    </MudCardContent>

                    <MudCardActions>
                        @if (currentAgendaItem is not null)
                        {
                            if (currentAgendaItem.State == AgendaItemState.Pending)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartDiscussion" Class="me-2">Start
                                    Discussion</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="PostponeAgendaItem" Class="me-2">Postpone
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelAgendaItem" Class="me-2">Cancel
                                </MudButton>
                            }
                            else if (currentAgendaItem.State == AgendaItemState.UnderDiscussion)
                            {
                                <!-- Include Debate Component -->
                                <Debate Motion="@currentMotion" />
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartVoting">Start Voting</MudButton>
                            }
                            else if (currentAgendaItem.State == AgendaItemState.Voting)
                            {
                                <!-- Include Voting Component -->
                                <VoteComponent Motion="@currentMotion" />
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CompleteAgendaItem">Complete Agenda Item
                                </MudButton>
                            }
                            else if (currentAgendaItem.State == AgendaItemState.Completed)
                            {
                                <MudText Typo="Typo.subtitle1">This agenda item has been completed.</MudText>
                            }
                        }
                    </MudCardActions>
                </MudCard>

                @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.RollCall 
                    && currentAgendaItem?.State != AgendaItemState.Voting 
                    && currentAgendaItem?.State != AgendaItemState.Completed)
                {
                    <MudPaper Class="pa-8 mb-4" Elevation="25">
                        <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Roll call</MudText>

                        <YourBrand.Meetings.Procedure.RollCall.RollCallDisplay OrganizationId="@organization.Id" Meeting="@meeting" />

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CompleteAgendaItem">Complete Agenda Item</MudButton>
                    </MudPaper>
                }

                @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election 
                    && currentAgendaItem?.State != AgendaItemState.Voting 
                    && currentAgendaItem?.State != AgendaItemState.Completed)
                {
                    <MudPaper Class="pa-8 mb-4" Elevation="25">
                        <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Candidates</MudText>

                        <YourBrand.Meetings.Procedure.Election.CandidatesView Meeting="@meeting" AgendaItem="@currentAgendaItem" />

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CompleteAgendaItem">Complete Agenda Item</MudButton>
                    </MudPaper>
                }

                @if (currentMotion is not null)
                {
                    <MudPaper Class="pa-8 mb-4" Elevation="25">
                        <MotionDisplay Motion="@currentMotion" />
                    </MudPaper>
                }
        </MudItem>

        <MudItem xs="12" md="4">
            @if(agenda is not null) 
            {
            <MudPaper Class="pa-8 mb-4" Elevation="25">
                <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Agenda</MudText>

                @{
                    string? currentItemId = null;
                    string? currentSubItemId = null;

                    currentItemId = currentAgendaItem?.Id;

                    if(currentAgendaItem?.ParentId is not null) 
                    {
                        currentItemId = currentAgendaItem.ParentId;
                        currentSubItemId = currentAgendaItem.Id;
                    }
                }
                
                <AgendaDisplay Agenda="@agenda" AgendaItemId="@currentItemId"  AgendaSubItemId="@currentSubItemId"  />

            </MudPaper>
            }
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public int MeetingId { get; set; }

    private Meeting meeting;
    private Agenda? agenda;
    private AgendaItem? currentAgendaItem;
    private Motion? currentMotion;
    private bool lastItem;

    protected override async Task OnInitializedAsync()
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;

        await LoadMeetingDetails();
    }

    private async Task ResetProcedure() 
    {
        var r = await DialogService.ShowMessageBox("Reset the procedure?", "This can't be undone.", "Yes", "No");

        if(!r.GetValueOrDefault()) 
        {
            return;
        }

        await MeetingsClient.ResetMeetingProcedureAsync(organization.Id, MeetingId);

        await LoadMeetingDetails();
    }

    YourBrand.Portal.Services.Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    private async Task LoadMeetingDetails()
    {
        meeting = await MeetingsClient.GetMeetingByIdAsync(organization.Id, MeetingId);
        agenda = await MeetingsClient.GetMeetingAgendaAsync(organization.Id, MeetingId);
 
        currentAgendaItem = meeting.CurrentAgendaItemIndex is null ? null : agenda!.Items
            .OrderBy(ai => ai.Order)
            .ElementAtOrDefault(meeting.CurrentAgendaItemIndex.GetValueOrDefault());

        if(currentAgendaItem is not null 
            && meeting.CurrentAgendaSubItemIndex is not null
            && currentAgendaItem.SubItems.Any()) 
        {
            currentAgendaItem = meeting.CurrentAgendaSubItemIndex is null ? null : currentAgendaItem!.SubItems
                .OrderBy(ai => ai.Order)
                .ElementAtOrDefault(meeting.CurrentAgendaSubItemIndex.GetValueOrDefault());
        }

        lastItem = agenda.Items.OrderBy(ai => ai.Order).LastOrDefault()?.Id == currentAgendaItem?.Id;

        currentMotion = null;

        if (currentAgendaItem is not null)
        {
            // Load the current motion associated with the agenda item
            if (currentAgendaItem.MotionId is not null)
            {
                currentMotion = await MotionsClient.GetMotionByIdAsync(organization.Id, currentAgendaItem.MotionId.GetValueOrDefault());
            }
        }
    }

    private async Task StartMeeting()
    {
        await MeetingsClient.StartMeetingAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task MoveToNextAgendaItem()
    {
        await MeetingsClient.MoveToNextAgendaItemAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task EndMeeting()
    {
        await MeetingsClient.EndMeetingAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task CancelMeeting()
    {
        var r = await DialogService.ShowMessageBox("Cancel the meeting?", "This can't be undone.", "Yes", "No");

        if(!r.GetValueOrDefault()) 
        {
            return;
        }

        await MeetingsClient.CancelMeetingAsync(organization.Id, MeetingId);
        await LoadMeetingDetails();
    }

    private async Task StartDiscussion()
    {
        await MeetingsClient.StartAgendaItemDiscussionAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task StartVoting()
    {
        await MeetingsClient.StartAgendaItemVotingAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task CompleteAgendaItem()
    {
        await MeetingsClient.CompleteAgendaItemAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task CancelAgendaItem()
    {
        await MeetingsClient.CancelAgendaItemAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    private async Task PostponeAgendaItem()
    {
        await MeetingsClient.PostponeAgendaItemAsync(organization.Id, meeting.Id);
        await LoadMeetingDetails();
    }

    public void Dispose()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}
