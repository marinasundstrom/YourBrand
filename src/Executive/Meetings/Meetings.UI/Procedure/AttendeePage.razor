@page "/meetings/{MeetingId:int}/attendee"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using YourBrand.Meetings.Procedure.Elections
@using YourBrand.Portal.Services
@using YourBrand.Meetings
@attribute [Authorize]
@inject IStringLocalizer<DisplayPage> T
@inject IMeetingsClient MeetingsClient
@inject IAgendasClient AgendasClient
@inject IMotionsClient MotionsClient
@inject IAttendeeClient AttendeeClient
@inject IDiscussionsClient DiscussionsClient
@inject IVotingClient VotingClient
@inject IElectionsClient ElectionsClient
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@inject YourBrand.Portal.Services.IAccessTokenProvider AccessTokenProvider
@inject IUserContext UserContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@implements IDisposable
@implements IMeetingsProcedureHubClient

@if (meeting == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <AppPageTitle>@meeting?.Title</AppPageTitle>

    <MudGrid>
        <MudItem xs="12" md="8">

            <MudPaper Class="pa-6 mb-4" Elevation="25">
                <MudText Typo="@Typo.h2" GutterBottom="true">@meeting?.Title</MudText>

                @if (meeting.State == MeetingState.Draft)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting is in draft state</MudText>
                }
                else if (meeting.State == MeetingState.Scheduled)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Waiting for the meeting to start</MudText>
                }
                else if (meeting.State == MeetingState.InProgress)
                {
                    @if (currentAgendaItem is not null)
                    {
                        <MudText Typo="@Typo.h4" GutterBottom="true">@currentAgendaItem?.Order. @currentAgendaItem?.Title</MudText>

                        <MudText Typo="@Typo.body1" GutterBottom="true">@currentAgendaItem.State</MudText>
                        @if (meeting.ShowAgendaTimeEstimates)
                        {
                            <MudText Typo="@Typo.body1" GutterBottom="true">Estimated start: @FormatTime(currentAgendaItem.EstimatedStartTime)</MudText>
                            <MudText Typo="@Typo.body1" GutterBottom="true">Estimated end: @FormatTime(currentAgendaItem.EstimatedEndTime)</MudText>
                            <MudText Typo="@Typo.body1" GutterBottom="true">Estimated duration: @FormatDuration(currentAgendaItem.EstimatedDuration)</MudText>
                        }
                    }
                }
                else if (meeting.State == MeetingState.Adjourned)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting is adjourned</MudText>

                    @if (!string.IsNullOrWhiteSpace(meeting.AdjournmentMessage))
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled">@meeting.AdjournmentMessage</MudAlert>
                    }
                }
                else if (meeting.State == MeetingState.Completed)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting has concluded</MudText>
                }
                else if (meeting.State == MeetingState.Canceled)
                {
                    <MudText Typo="@Typo.body1" GutterBottom="true">Meeting is canceled</MudText>
                }
            </MudPaper>

        @if (currentAgendaItem?.State == AgendaItemState.UnderDiscussion)
        {
            <MudPaper Elevation="25" Class="pa-6 mb-4">
                <MudText Typo="@Typo.h4" GutterBottom="true">Discussion</MudText>

                    <MudButton Variant="Variant.Filled" Class="me-2"
                        OnClick="async () => await hubProxy.RequestSpeakerTime(currentAgendaItem.Id)">Request
                        to speak</MudButton>

                    <MudButton Variant="Variant.Filled"
                        OnClick="async () => await hubProxy.RevokeSpeakerTime(currentAgendaItem.Id)">Revoke
                    </MudButton>

                <SpeakerDisplay MeetingId="@MeetingId" />

            </MudPaper>
        }

        @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election
                        && currentAgendaItem?.State != AgendaItemState.Voting)
        {
                <MudPaper Elevation="25" Class="pa-6 mb-4">

                    <MudText Typo="@Typo.h4" GutterBottom="true">Candidates</MudText>

                    @if (currentAgendaItem?.State != AgendaItemState.Canceled 
                        && currentAgendaItem?.State != AgendaItemState.Skipped 
                        && currentAgendaItem?.State != AgendaItemState.Voting 
                        && currentAgendaItem?.State != AgendaItemState.Completed)
                    {
                        <MudButton Variant="Variant.Filled" Class="me-2" OnClick="Nominate">Nominate</MudButton>
                            
                        <MudButton Variant="Variant.Filled" Class="me-2" OnClick="Register">Register for candidacy</MudButton>
                    }

                    <CandidatesView Meeting="meeting" AgendaItem="currentAgendaItem" />

                </MudPaper>
        }

        @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election 
        && currentAgendaItem?.State == AgendaItemState.Voting)
        {
            <MudPaper Elevation="25" Class="pa-6 mb-4">
                
                <MudText Typo="@Typo.h4" GutterBottom="true">Pick a candidate</MudText>

                <CandidatesSelector OrganizationId="@organization?.Id" Meeting="meeting" AgendaItem="currentAgendaItem" />

            </MudPaper>
        }

        @if (currentAgendaItem?.Type.Id == (int)AgendaItemTypeEnum.Election 
        && currentAgendaItem?.State == AgendaItemState.Completed)
        {
            <MudPaper Elevation="25" Class="pa-6 mb-4">
                
                <MudText Typo="@Typo.h4" GutterBottom="true">Elected </MudText>

                @* <CandidatesSelector OrganizationId="@organization?.Id" Meeting="meeting" AgendaItem="currentAgendaItem" /> *@

            </MudPaper>
        }

        </MudItem>

        @if (agenda is not null)
        {
            <MudItem xs="12" md="4">
                <MudPaper Class="pa-6 mb-4" Elevation="25">
                    <MudText Typo="@Typo.h4" GutterBottom="true" Class="mb-4">Agenda</MudText>


                    @{
                        string? currentItemId = null;
                        string? currentSubItemId = null;

                        currentItemId = currentAgendaItem?.Id;

                        if (currentAgendaItem?.ParentId is not null)
                        {
                            currentItemId = currentAgendaItem.ParentId;
                            currentSubItemId = currentAgendaItem.Id;
                        }
                    }

                    <AgendaDisplay Agenda="@agenda" AgendaItemId="@currentItemId" AgendaSubItemId="@currentSubItemId" ShowTimeEstimates="@meeting.ShowAgendaTimeEstimates" />
                </MudPaper>
            </MudItem>
        }
        </MudGrid>
}