@inject IMeetingsClient MeetingsClient

<MudTable T="AttendeeViewModel" Items="Attendees" Hover="true" Elevation="0"
    Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info"
    OnRowClick="async (e) => {}">

    @*
    <ToolBarContent>
        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add"
            OnClick="AddAttendee" Class="mb-2 me-2">Add attendee</MudButton>
        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add"
            OnClick="AddAttendeeGroup" Class="mb-2">Add group</MudButton>
    </ToolBarContent>*@

    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>UserId</MudTh>
        <MudTh>Has Voting Rights</MudTh>
        <MudTh>Present</MudTh>
        @* <MudTh></MudTh> *@
    </HeaderContent>
    <RowTemplate Context="attendee">
        <MudTd DataLabel="Name">@attendee.Name</MudTd>
        <MudTd DataLabel="Role">@attendee.Role.Name</MudTd>
        <MudTd DataLabel="Email">@attendee.Email</MudTd>
        <MudTd DataLabel="UserId">@attendee.User?.Id</MudTd>
        <MudTd DataLabel="HasVotingRights">@(attendee.HasVotingRights.GetValueOrDefault() ? "Yes" : "No")</MudTd>
        <MudTd DataLabel="IsPresent">
            <MudCheckBox T="bool" Value="attendee.IsPresent" ValueChanged="@(async (s) => { await  MarkAttendeeAsPresent(attendee, s); })"/>
        </MudTd>
        @*
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                OnClick="() => EditAttendee(attendee)">
            </MudIconButton>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                OnClick="() => RemoveAttendee(attendee)">
            </MudIconButton>
        </MudTd>*@
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code
{
    [Parameter]
    public string OrganizationId { get; set; }

    [Parameter]
    public Meeting Meeting { get; set; }

    public List<AttendeeViewModel> Attendees { get; set; } = new List<AttendeeViewModel>();

    protected override async Task OnInitializedAsync()
    {
        if (Attendees.Any()) Attendees.Clear();

        Attendees.AddRange(Meeting.Attendees.Select(attendee => new AttendeeViewModel()
            {
                Id = attendee.Id,
                Role = attendee.Role,
                Name = attendee.Name,
                Email = attendee.Email,
                //User = x.User,
                HasVotingRights = attendee.HasVotingRights,
                IsPresent = attendee.IsPresent
            }));
    }

    async Task MarkAttendeeAsPresent(AttendeeViewModel attendee, bool isChecked)
    {
        await MeetingsClient.MarkAttendeeAsPresentAsync(OrganizationId, Meeting.Id, attendee.Id, new MarkAttendeeAsPresent
            {
                IsPresent = isChecked
            });

        attendee.IsPresent = isChecked;
    }
}