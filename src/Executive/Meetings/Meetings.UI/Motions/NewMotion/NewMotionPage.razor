@page "/meetings/motions/new"

@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@inject IMotionsClient MotionsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

<AppPageTitle>Create motion</AppPageTitle>

<MudText Typo="@Typo.h2" GutterBottom="true">Create motion</MudText>

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid>

        <MudItem xs="12" md="6">
            <MudPaper Elevation="25" Class="pa-4 mb-4">
                <MudText Typo="@Typo.h4" GutterBottom="true">Details</MudText>

             <MudTextField Label="Title" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Title"
                    For="@(() => Title)"  Immediate="true" />

                <MudTextField Label="Text" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Text"
                    For="@(() => Text)"  Immediate="true" Lines="10" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudPaper Elevation="25" Class="pa-4 mb-4">
                <MudText Typo="@Typo.h4" GutterBottom="true">Operative clauses</MudText>

                <MudTable T="AddEditOperativeClauseViewModel" Items="OperativeClauses" Dense="true" Hover="true" Elevation="0"
                    Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info"
                    OnRowClick="async (e) => await EditOperativeClause(e.Item)">
                    <ToolBarContent>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add"
                            OnClick="AddOperativeClause" Class="mb-2">Add clause</MudButton>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Action</MudTh>
                        <MudTh>Text</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="item">
                        <MudTd DataLabel="Order">@item.Order</MudTd>
                        <MudTd DataLabel="Action">@item.Action</MudTd>
                        <MudTd DataLabel="Text">@item.Text</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                OnClick="() => EditOperativeClause(item)">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                OnClick="() => RemoveOperativeClause(item)">
                            </MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                </MudTable>
            </MudPaper>
        </MudItem>

    </MudGrid>

    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => {}">Cancel</MudButton>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
        Create
    </MudButton>
</EditForm>

@code
{
    EditContext context = null!;

    [Required]
    public string Title { get; set; }

    [Required]
    public string Text { get; set; }

    public List<AddEditOperativeClauseViewModel> OperativeClauses { get; set; } = new List<AddEditOperativeClauseViewModel>();

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;
    }

    YourBrand.Portal.Services.Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    public async Task OnValidSubmit()
    {
        var motion = await MotionsClient.CreateMotionAsync(organization.Id, new CreateMotion
            {
                Title = Title,
                Text = Text,
                Items = OperativeClauses.Select(model => {
                    return new CreateOperativeClause
                    {
                        Action = model.Action,
                        Text = model.Text
                    };
                }).ToList()
            });

        NavigationManager.NavigateTo($"/meetings/motions/{motion.Id}");
    }

    async Task AddOperativeClause()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(AddEditOperativeClauseDialog.OrganizationId), organization.Id);

        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var modalRef = DialogService.Show<AddEditOperativeClauseDialog>("Add operative clause", parameters, dialogOptions);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var model = (AddEditOperativeClauseViewModel)result.Data;

        OperativeClauses.Add(model);
    }

    async Task EditOperativeClause(AddEditOperativeClauseViewModel item)
    {
        var originalOperativeClause = item;

        DialogParameters parameters = new();
        parameters.Add(nameof(AddEditOperativeClauseDialog.OrganizationId), organization.Id);
        parameters.Add(nameof(AddEditOperativeClauseDialog.Model), originalOperativeClause.Clone());

        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

        var modalRef = DialogService.Show<AddEditOperativeClauseDialog>("Edit operative clause", parameters, dialogOptions);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var updatedModel = (AddEditOperativeClauseViewModel)result.Data;

        var index = OperativeClauses.IndexOf(originalOperativeClause);
        OperativeClauses[index] = updatedModel;
    }

    async Task RemoveOperativeClause(AddEditOperativeClauseViewModel item)
    {
        var r = await DialogService.ShowMessageBox("Delete item?", "This can't be undone. You will have to manually add again.", "Delete", "Cancel");

        if(!r.GetValueOrDefault()) 
        {
            return;
        }

        OperativeClauses.Remove(item);
    }

    public void Dispose()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}