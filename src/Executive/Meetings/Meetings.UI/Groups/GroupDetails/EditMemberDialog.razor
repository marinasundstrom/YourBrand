@using System.ComponentModel.DataAnnotations
@inject IMeetingGroupsClient MeetingGroupsClient
@inject ISnackbar Snackbar

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Gutters="false">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                <MudTextField Label="Name" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Model.Name"
                    For="@(() => Model.Name)" />
                <AttendeeRoleSelector OrganizationId="OrganizationId" Class="mt-4" Label="Role"
                    Variant="Variant.Outlined" @bind-Value="Model.Role" For="() => Model.Role" />
                <MudTextField Label="Email" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Model.Email"
                    For="@(() => Model.Email)" />
                <UserSelector ServiceKey="@ServiceKeys.UserSearchProviderKey" Class="mt-4" Label="User" Variant="Variant.Outlined" @bind-Value="Model.User" For="() => Model.User" />
                <MudCheckBox Label="Has voting rights" @bind-Value="Model.HasVotingRights" Class="mt-4"></MudCheckBox>
            </MudContainer>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                Save
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code
{
    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public string? OrganizationId { get; set; } = null!;

    [Parameter]
    public MemberViewModel? Model { get; set; }

    protected override void OnInitialized()
    {

    }

    public void OnValidSubmit()
    {
        Dialog.Close(new MemberViewModel
            {
                Id = Model.Id,
                Name = Model.Name,
                Role = Model.Role,
                Email = Model.Email,
                User = Model.User,
                HasVotingRights = Model.HasVotingRights
            });
    }
}