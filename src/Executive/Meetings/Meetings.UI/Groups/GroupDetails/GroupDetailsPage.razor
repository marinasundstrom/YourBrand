@page "/meetings/groups/{id:int}"

@using System.ComponentModel.DataAnnotations
@using YourBrand.Meetings.MeetingDetails.Agenda
@using YourBrand.Portal.Services
@inject IMeetingGroupsClient MeetingGroupsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

<AppPageTitle>@Title</AppPageTitle>

<MudText Typo="@Typo.h2" GutterBottom="true">@Title</MudText>

<MudGrid Class="mb-4">

    <MudItem xs="12" md="6">
        <MudPaper Elevation="25" Class="pa-4 mb-4">
            <MudText Typo="@Typo.h4" GutterBottom="true">Details</MudText>

            <EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />

                <MudTextField Label="Title" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Title"
                    For="@(() => Title)"  Immediate="true" />
                <MudTextField Label="Description" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Description"
                    For="@(() => Description)" Immediate="true" Lines="5" />
                <MudNumericField Label="Quorum" Variant="Variant.Outlined" Class="mt-4" @bind-Value="QuorumRequiredNumber"
                    For="@(() => QuorumRequiredNumber)" Immediate="true" HelperText="Required number of members"  />

                <div class="mt-4 d-flex">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                        Save
                    </MudButton>

                    @if(isDetailsModified) 
                    {
                        <MudText Typo="@Typo.body1" Class="ms-2">Modified</MudText>        
                    }
                </div>

            </EditForm>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">

        <MudPaper Elevation="25" Class="pa-4 mb-4">
            <MudText Typo="@Typo.h4" GutterBottom="true">Members</MudText>

            <MemberList OrganizationId="@organization.Id" Id="@Id" Members="@Members" />
        </MudPaper>
    </MudItem>

</MudGrid>

@code
{
    AgendaSection agendaSection;

    EditContext context = null!;

    [Parameter]
    public int Id { get; set; }

    [Required]
    public string Title { get; set; }

    public string Description { get; set; }

    [Required]
    public int QuorumRequiredNumber { get; set; }

    public List<MemberViewModel> Members { get; set; } = new List<MemberViewModel>();

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;

        await LoadMeetingGroup();
    }

    private async Task LoadMeetingGroup() 
    {
        var group = await MeetingGroupsClient.GetMeetingGroupByIdAsync(organization!.Id, Id);
        Title = group.Title;
        Description = group.Description;
        QuorumRequiredNumber = group.Quorum.RequiredNumber;

        if(Members.Any()) Members.Clear();

        Members.AddRange(group.Members.Select(member => new MemberViewModel ()
            {
                Id = member.Id,
                Order = member.Order,
                Role = member.Role,
                Name = member.Name,
                Email = member.Email,
                //User = x.User,
                HasVotingRights = member.HasVotingRights,
            }));
    
        context.OnFieldChanged += OnFieldChanged;
        context.MarkAsUnmodified();

        isDetailsModified = false;
    }

    bool isDetailsModified = false;

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e) 
    {
        isDetailsModified = context.IsModified();
    }

    YourBrand.Portal.Services.Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    public async Task OnValidSubmit()
    {
        if(context.IsModified(() => Title)) 
        {
            var meeting = await MeetingGroupsClient.UpdateMeetingGroupTitleAsync(organization.Id, Id, new UpdateMeetingGroupTitle
            {
                Title = Title
            });

            Snackbar.Add("Title updated");      
        }

        if(context.IsModified(() => Description)) 
        {
            var meeting = await MeetingGroupsClient.UpdateMeetingGroupDescriptionAsync(organization.Id, Id, new UpdateMeetingGroupDescription
            {
                Description = Description
            });

            Snackbar.Add("Description updated");      
        }

        if(context.IsModified(() => QuorumRequiredNumber)) 
        {
            var meeting = await MeetingGroupsClient.ChangeMeetingGroupQuorumAsync(organization.Id, Id, new ChangeMeetingGroupQuorum
            {
                RequiredNumber = QuorumRequiredNumber
            });

            Snackbar.Add("Quorum updated");  
        }

        context.MarkAsUnmodified();

        isDetailsModified = false;
    }

    public void Dispose()
    {
        context.OnFieldChanged -= OnFieldChanged;
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}