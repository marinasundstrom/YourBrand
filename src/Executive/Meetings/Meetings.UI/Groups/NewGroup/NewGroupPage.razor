@page "/meetings/groups/new"

@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@inject IMeetingGroupsClient MeetingGroupsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

<AppPageTitle>Create group</AppPageTitle>

<MudText Typo="@Typo.h2" GutterBottom="true">Create group</MudText>

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid>

        <MudItem xs="12" md="6">
            <MudPaper Elevation="25" Class="pa-4 mb-4">
                <MudText Typo="@Typo.h4" GutterBottom="true">Details</MudText>

                <MudTextField Label="Title" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Title"
                    For="@(() => Title)" Immediate="true" />
                <MudTextField Label="Description" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Description"
                    For="@(() => Description)" Immediate="true" Lines="5" />
                <MudNumericField Label="Quorum" Variant="Variant.Outlined" Class="mt-4" @bind-Value="QuorumRequiredNumber"
                    For="@(() => QuorumRequiredNumber)" Immediate="true" HelperText="Required number of participants" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudPaper Elevation="25" Class="pa-4 mb-4">
                <MudText Typo="@Typo.h4" GutterBottom="true">Members</MudText>

                <MudTable T="AddEditMemberViewModel" Items="Members" Dense="true" Hover="true" Elevation="0"
                    Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info"
                    OnRowClick="async (e) => await EditMember(e.Item)">
                    <ToolBarContent>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add"
                            OnClick="AddMember" Class="mb-2">Add member</MudButton>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>UserId</MudTh>
                        <MudTh>Has Voting Rights</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="participant">
                        <MudTd DataLabel="Name">@participant.Name</MudTd>
                        <MudTd DataLabel="Email">@participant.Email</MudTd>
                        <MudTd DataLabel="UserId">@participant.User?.Id</MudTd>
                        <MudTd DataLabel="HasVotingRights">@(participant.HasVotingRights ? "Yes" : "No")</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                OnClick="() => EditMember(participant)">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                OnClick="() => RemoveMember(participant)">
                            </MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                </MudTable>
            </MudPaper>
        </MudItem>

    </MudGrid>

    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => {}">Cancel</MudButton>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
        Create
    </MudButton>
</EditForm>

@code
{
    EditContext context = null!;

    [Required]
    public string Title { get; set; }

    public string Description { get; set; }

    [Required]
    public int QuorumRequiredNumber { get; set; }

    public List<AddEditMemberViewModel> Members { get; set; } = new List<AddEditMemberViewModel>();

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;
    }

    YourBrand.Portal.Services.Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    public async Task OnValidSubmit()
    {
        var meeting = await MeetingGroupsClient.CreateMeetingGroupAsync(organization.Id, new CreateMeetingGroup
            {
                Title = Title,
                Description = Description,
                Quorum = new CreateMeetingGroupQuorum
                {
                    RequiredNumber = QuorumRequiredNumber
                },
                Members = Members.Select(model => {
                    return new CreateMeetingGroupMember
                    {
                        Name = model.Name,
                        Role = model.Role,
                        Email = model.Email,
                        UserId = model.User?.Id,
                        HasVotingRights = model.HasVotingRights
                    };
                }).ToList()
            });

        NavigationManager.NavigateTo($"/meetings/groups/{meeting.Id}");
    }

    async Task AddMember()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(AddEditMemberDialog.OrganizationId), organization.Id);

        var modalRef = DialogService.Show<AddEditMemberDialog>("Add member", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var model = (AddEditMemberViewModel)result.Data;

        Members.Add(model);
    }

    async Task EditMember(AddEditMemberViewModel participant)
    {
        var originalMember = participant;

        DialogParameters parameters = new();
        parameters.Add(nameof(AddEditMemberDialog.OrganizationId), organization.Id);
        parameters.Add(nameof(AddEditMemberDialog.Model), originalMember.Clone());

        var modalRef = DialogService.Show<AddEditMemberDialog>("Edit member", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var updatedModel = (AddEditMemberViewModel)result.Data;

        var index = Members.IndexOf(originalMember);
        Members[index] = updatedModel;
    }

    async Task RemoveMember(AddEditMemberViewModel participant)
    {
        var r = await DialogService.ShowMessageBox("Delete member?", "This can't be undone. You will have to manually add again.", "Delete", "Cancel");

        if(!r.GetValueOrDefault()) 
        {
            return;
        }

        Members.Remove(participant);
    }

    public void Dispose()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}