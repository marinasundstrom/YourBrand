@page "/meetings/{id:int}"

@using System.ComponentModel.DataAnnotations
@using YourBrand.Meetings.MeetingDetails.Agenda
@using YourBrand.Portal.Services
@inject IMeetingsClient MeetingsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

<MudText Typo="@Typo.h2" GutterBottom="true">@Title</MudText>

<MudGrid Class="mb-4">

    <MudItem xs="12" md="6">
        <MudPaper Elevation="25" Class="pa-4 mb-4">
            <MudText Typo="@Typo.h4" GutterBottom="true">Details</MudText>

            <EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />

                <MudTextField Label="Title" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Title"
                    For="@(() => Title)"  Immediate="true" />
                <div class="d-flex gap-4">
                    <MudDatePicker Label="Date" Variant="Variant.Outlined" Class="mt-4" @bind-Date="Date"
                        For="@(() => Date)" />
                    <MudTimePicker Label="Time" Variant="Variant.Outlined" Class="mt-4" @bind-Time="Time"
                        For="@(() => Time)" />
                </div>
                <MudTextField Label="Location" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Location"
                    For="@(() => Location)" Immediate="true" />
                <MudTextField Label="Description" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Description"
                    For="@(() => Description)" Immediate="true" Lines="5" />
                <MudNumericField Label="Quorum" Variant="Variant.Outlined" Class="mt-4" @bind-Value="QuorumRequiredNumber"
                    For="@(() => QuorumRequiredNumber)" Immediate="true" HelperText="Required number of participants"  />
                <MudSelect T="MeetingState" Label="State" Variant="Variant.Outlined" @bind-Value="State" Immediate="true"
                    Class="mt-4">
                    @foreach (var state in Enum.GetValues<MeetingState>())
                    {
                        <MudSelectItem T="MeetingState" Value="@state">@Enum.GetName(typeof(MeetingState), state)</MudSelectItem>
                    }
                </MudSelect>

                <div class="mt-4 d-flex">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                        Save
                    </MudButton>

                    @if(isDetailsModified) 
                    {
                        <MudText Typo="@Typo.body1" Class="ms-2">Modified</MudText>        
                    }
                </div>

            </EditForm>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">

        <MudPaper Elevation="25" Class="pa-4 mb-4">
            <MudText Typo="@Typo.h4" GutterBottom="true">Participants</MudText>

            <MudTable T="ParticipantViewModel" Items="Participants" Hover="true" Elevation="0"
                Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info"
                OnRowClick="async (e) => await EditParticipant(e.Item)">
                <ToolBarContent>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add"
                        OnClick="AddParticipant" Class="mb-2">Add participant</MudButton>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Role</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>UserId</MudTh>
                    <MudTh>Has Voting Rights</MudTh>
                    <MudTh>Present</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="participant">
                    <MudTd DataLabel="Name">@participant.Name</MudTd>
                    <MudTd DataLabel="Role">@participant.Role</MudTd>
                    <MudTd DataLabel="Email">@participant.Email</MudTd>
                    <MudTd DataLabel="UserId">@participant.User?.Id</MudTd>
                    <MudTd DataLabel="HasVotingRights">@(participant.HasVotingRights ? "Yes" : "No")</MudTd>
                    <MudTd DataLabel="IsPresent">
                        <MudCheckBox T="bool" Value="participant.IsPresent" ValueChanged="@(async (s) => { await  MarkParticipantAsPresent(participant, s); })"/>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                            OnClick="() => EditParticipant(participant)">
                        </MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                            OnClick="() => RemoveParticipant(participant)">
                        </MudIconButton>
                    </MudTd>
                </RowTemplate>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
            </MudTable>
        </MudPaper>
    </MudItem>

</MudGrid>

<MudPaper Elevation="25" Class="pa-4 mb-4">
    <MudText Typo="@Typo.h4" GutterBottom="true">Procedure</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/meetings/{Id}/procedure")" Class="mb-4">Display</MudButton>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/meetings/{Id}/control")" Class="ms-2 mb-4">Control</MudButton>

    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ResetMeetingProcedure" Class="ms-2 mb-4">Reset</MudButton>
</MudPaper>

@if(organization is not null) 
{
    <AgendaSection OrganizationId="@organization?.Id" MeetingId="@Id" />
}

@code
{
    EditContext context = null!;

    [Parameter]
    public int Id { get; set; }

    [Required]
    public string Title { get; set; }

    [Required]
    public DateTime? Date { get; set; } = DateTime.Now;

    [Required]
    public TimeSpan? Time { get; set; } = DateTime.Now.TimeOfDay;

    [Required]
    public string Location { get; set; }

    public string Description { get; set; }

    [Required]
    public int QuorumRequiredNumber { get; set; }

    public MeetingState State { get; set; }

    public List<ParticipantViewModel> Participants { get; set; } = new List<ParticipantViewModel>();

    MeetingState oldState;

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;

        var meeting = await MeetingsClient.GetMeetingByIdAsync(organization!.Id, Id);
        Title = meeting.Title;
        Date = meeting.ScheduledAt?.Date;
        Time = meeting.ScheduledAt?.TimeOfDay;
        Location = meeting.Location;
        Description = meeting.Description;
        QuorumRequiredNumber = meeting.Quorum.RequiredNumber;
        State = meeting.State;
        oldState = State;

        Participants.AddRange(meeting.Participants.Select(participant => new ParticipantViewModel ()
            {
                Id = participant.Id,
                Role = participant.Role,
                Name = participant.Name,
                Email = participant.Email,
                //User = x.User,
                HasVotingRights = participant.HasVotingRights,
                IsPresent = participant.IsPresent
            }));
    
        context.OnFieldChanged += OnFieldChanged;
        context.MarkAsUnmodified();

        isDetailsModified = false;
    }

    bool isDetailsModified = false;

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e) 
    {
        isDetailsModified = context.IsModified();
    }

    YourBrand.Portal.Services.Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    public async Task OnValidSubmit()
    {
        if(context.IsModified(() => Title)) 
        {
            var meeting = await MeetingsClient.UpdateMeetingTitleAsync(organization.Id, Id, new UpdateMeetingTitle
            {
                Title = Title
            });

            Snackbar.Add("Title updated");      
        }

        if(context.IsModified(() => Time) || context.IsModified(() => Date))
        {
            var meeting = await MeetingsClient.ChangeScheduledDateAsync(organization.Id, Id, new ChangeMeetingScheduledDate
            {
                Date = Date.GetValueOrDefault().Add(Time.GetValueOrDefault())
            });

            Snackbar.Add("Scheduled date updated"); 
        }

        if(context.IsModified(() => Location)) 
        {
            var meeting = await MeetingsClient.UpdateMeetingLocationAsync(organization.Id, Id, new UpdateMeetingLocation
            {
                Location = Location
            });

            Snackbar.Add("Location updated");  
        }

        if(context.IsModified(() => Description)) 
        {
            var meeting = await MeetingsClient.UpdateMeetingDescriptionAsync(organization.Id, Id, new UpdateMeetingDescription
            {
                Description = Description
            });

            Snackbar.Add("Description updated");  
        }

        if(context.IsModified(() => QuorumRequiredNumber)) 
        {
            var meeting = await MeetingsClient.ChangeMeetingQuorumAsync(organization.Id, Id, new ChangeMeetingQuorum
            {
                RequiredNumber = QuorumRequiredNumber
            });

            Snackbar.Add("Quorum updated");  
        }

        if(State != oldState) 
        {
            var meeting = await MeetingsClient.ChangeMeetingStateAsync(organization.Id, Id, new ChangeMeetingState
            {
                State = State
            });

            oldState = State;

            Snackbar.Add("State updated");  
        }

        context.MarkAsUnmodified();
    }

    async Task AddParticipant()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(AddParticipantDialog.OrganizationId), organization.Id);

        var modalRef = DialogService.Show<AddParticipantDialog>("Add participant", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var participantModel = (ParticipantViewModel)result.Data;

        var dto = new AddMeetingParticipant
        {
            Name = participantModel.Name,
            Role = participantModel.Role,
            Email = participantModel.Email,
            UserId = participantModel.User?.Id,
            HasVotingRights = participantModel.HasVotingRights,
        };

        var model = await MeetingsClient.AddParticipantAsync(organization.Id, Id, dto);

        participantModel.Id = model.Id;

        Participants.Add(participantModel);
    }

    async Task EditParticipant(ParticipantViewModel participant)
    {
        var originalParticipant = participant;

        DialogParameters parameters = new();
        parameters.Add(nameof(EditParticipantDialog.OrganizationId), organization.Id);
        parameters.Add(nameof(EditParticipantDialog.Model), originalParticipant.Clone());

        var modalRef = DialogService.Show<EditParticipantDialog>("Edit participant", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var editedModel = (ParticipantViewModel)result.Data;

        var dto = new EditMeetingParticipant
        {
            Name = editedModel.Name,
            Role = editedModel.Role,
            Email = editedModel.Email,
            UserId = editedModel.User?.Id,
            HasVotingRights = editedModel.HasVotingRights
        };
        
        await MeetingsClient.EditParticipantAsync(organization.Id, Id, participant.Id, dto);

        var index = Participants.IndexOf(originalParticipant);
        Participants[index] = editedModel;
    }

    async Task MarkParticipantAsPresent(ParticipantViewModel participant, bool isChecked)
    {
        await MeetingsClient.MarkParticipantAsPresentAsync(organization.Id, Id, participant.Id, new MarkParticipantAsPresent {
            IsPresent = isChecked
        });

        participant.IsPresent = isChecked;
    }

    async Task RemoveParticipant(ParticipantViewModel participant)
    {
        var r = await DialogService.ShowMessageBox("Delete participant?", "This can't be undone. You will have to manually add again.", "Delete", "Cancel");

        if(!r.GetValueOrDefault()) 
        {
            return;
        }

        await MeetingsClient.RemoveParticipantAsync(organization.Id, Id, participant.Id);
        Participants.Remove(participant);
    }

    public void Dispose()
    {
        context.OnFieldChanged -= OnFieldChanged;
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }

    async Task ResetMeetingProcedure() 
    {
        await MeetingsClient.ResetMeetingProcedureAsync(organization.Id, Id);

        Snackbar.Add("Procedure was reset");
    }
}