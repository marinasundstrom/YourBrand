@inject IAgendasClient AgendasClient
@inject IMeetingsClient MeetingsClient
@inject IDialogService DialogService

<MudPaper Elevation="25" Class="pa-4 mb-4">
    <MudText Typo="@Typo.h4" GutterBottom="true">Agenda</MudText>
    @if (agenda is null)
    {
        <text>No agenda.</text>

        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateAgenda" Class="mb-2">Create
            agenda</MudButton>
    }
    else
    {
        <MudTable T="AgendaItemViewModel" @ref="table" Items="Items" Dense="true" Hover="true" Elevation="0"
            Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await EditItem(e.Item)">
            <ToolBarContent>
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="AddItem" Class="mb-2">Add
                    Item</MudButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>State</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Motion</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="item">
                <MudTd DataLabel="Order">@item.Order</MudTd>
                <MudTd DataLabel="Title">@item.Title</MudTd>
                <MudTd DataLabel="Type">@item.Type</MudTd>
                <MudTd DataLabel="State">@item.State</MudTd>
                <MudTd DataLabel="Description">@item.Description</MudTd>
                <MudTd DataLabel="Motion">@item.Motion?.Id</MudTd>
                <MudTd>
                    @if (item.Order > 1)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.MoveUp" Size="Size.Small"
                            OnClick="async () => await MoveUp(item)">
                        </MudIconButton>
                    }
                </MudTd>
                <MudTd>
                    @if (item.Order != Items.Last().Order)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.MoveDown" Size="Size.Small"
                            OnClick="async () => await MoveDown(item)">
                        </MudIconButton>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => EditItem(item)">
                    </MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                        OnClick="async () => await RemoveItem(item)">
                    </MudIconButton>
                </MudTd>
            </RowTemplate>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>
    }
    </MudPaper>

    @code
    {
    MudTable<AgendaItemViewModel> table;

    Agenda? agenda;

    [Parameter]
    public string? OrganizationId { get; set; } = null!;

    [Parameter]
    public int? MeetingId { get; set; } = null!;

    public List<AgendaItemViewModel> Items { get; set; } = new List<AgendaItemViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    public async Task ReloadAsync() 
    {
        agenda = await MeetingsClient.GetMeetingAgendaAsync(OrganizationId, MeetingId.GetValueOrDefault());

        if (agenda is null) return;
        
        if (Items.Any()) Items.Clear();

        Items.AddRange(agenda.Items.Select(item => new AgendaItemViewModel()
            {
                Id = item.Id,
                Order = item.Order,
                Title = item.Title,
                Type = item.Type,
                State = item.State,
                Description = item.Description
                //Motion = item.Motion
            }));

        await InvokeAsync(StateHasChanged);
    }

    async Task CreateAgenda()
    {
        agenda = await AgendasClient.CreateAgendaAsync(OrganizationId, MeetingId, new Meetings.CreateAgenda() { Items = [] });
    }

    async Task AddItem()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(AddAgendaItemDialog.OrganizationId), OrganizationId);

        var modalRef = DialogService.Show<AddAgendaItemDialog>("Add item", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var agendaItemModel = (AgendaItemViewModel)result.Data;

        var dto = new AddAgendaItem
            {
                Title = agendaItemModel.Title,
                Type = agendaItemModel.Type,
                Description = agendaItemModel.Description,
                MotionId = agendaItemModel.Motion?.Id
            };

        var model = await AgendasClient.AddAgendaItemAsync(OrganizationId, agenda!.Id, dto);

        agendaItemModel.Id = model.Id;
        agendaItemModel.Order = model.Order;

        Items.Add(agendaItemModel);
    }

    async Task MoveUp(AgendaItemViewModel item)
    {
        await AgendasClient.MoveAgendaItemAsync(OrganizationId, agenda!.Id, item.Id, new MoveAgendaItem
            {
                Order = item.Order - 1
            });

        MoveItem(item, item.Order - 1);

        Items = Items.OrderBy(x => x.Order).ToList();

        await InvokeAsync(StateHasChanged);
    }

    async Task MoveDown(AgendaItemViewModel item)
    {
        await AgendasClient.MoveAgendaItemAsync(OrganizationId, agenda!.Id, item.Id, new MoveAgendaItem
            {
                Order = item.Order + 1
            });

        MoveItem(item, item.Order + 1);

        Items = Items.OrderBy(x => x.Order).ToList();

        await InvokeAsync(StateHasChanged);
    }

    public bool MoveItem(AgendaItemViewModel agendaItem, int newOrderPosition)
    {
        int oldOrderPosition = agendaItem.Order;

        if (oldOrderPosition == newOrderPosition)
            return false;

        // Flyttar objektet uppåt i listan
        if (newOrderPosition < oldOrderPosition)
        {
            var itemsToIncrement = Items
            .Where(i => i.Order >= newOrderPosition && i.Order < oldOrderPosition)
            .ToList();

            foreach (var item in itemsToIncrement)
            {
                item.Order += 1;
            }
        }
        // Flyttar objektet nedåt i listan
        else
        {
            var itemsToDecrement = Items
            .Where(i => i.Order > oldOrderPosition && i.Order <= newOrderPosition)
            .ToList();

            foreach (var item in itemsToDecrement)
            {
                item.Order -= 1;
            }
        }

        // Uppdatera order för objektet som flyttas
        agendaItem.Order = newOrderPosition;

        return true;
    }

    async Task RemoveItem(AgendaItemViewModel item)
    {
        var r = await DialogService.ShowMessageBox("Delete item?", "This can't be undone. You will have to manually add again.",
        "Delete", "Cancel");

        if (!r.GetValueOrDefault())
        {
            return;
        }

        await AgendasClient.RemoveAgendaItemAsync(OrganizationId, agenda!.Id, item.Id);
        Items.Remove(item);
    }

    async Task EditItem(AgendaItemViewModel item)
    {
        var originalItem = item;

        DialogParameters parameters = new();
        parameters.Add(nameof(AddAgendaItemDialog.OrganizationId), OrganizationId);
        parameters.Add(nameof(AddAgendaItemDialog.Model), originalItem.Clone());

        var modalRef = DialogService.Show<AddAgendaItemDialog>("Edit item", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var editedModel = (AgendaItemViewModel)result.Data;

        var dto = new EditAgendaItem
            {
                Title = editedModel.Title,
                Type = editedModel.Type,
                Description = editedModel.Description,
                MotionId = editedModel.Motion?.Id
            };

        await AgendasClient.EditAgendaItemAsync(OrganizationId, agenda!.Id, item.Id, dto);

        var index = Items.IndexOf(originalItem);
        Items[index] = editedModel;
    }
}