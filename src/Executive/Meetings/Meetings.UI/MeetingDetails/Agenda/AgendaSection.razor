@using System
@using System.Linq

@inject IAgendasClient AgendasClient
@inject IMeetingsClient MeetingsClient
@inject IDialogService DialogService

<MudPaper Elevation="25" Class="pa-4 mb-4">
    <MudText Typo="@Typo.h4" GutterBottom="true">Agenda</MudText>
    @if (agenda is null)
    {
        <text>No agenda.</text>

        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateAgenda" Class="mb-2">Create
            agenda</MudButton>
    }
    else
    {
        <MudTable T="AgendaItemViewModel" @ref="table" Items="Items" Dense="true" Hover="true" Elevation="0"
            Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await EditItem(e.Item)">
            <ToolBarContent>
                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="AddItem" Class="mb-2">Add
                    Item</MudButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>State</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Requirements</MudTh>
                <MudTh>Est. start</MudTh>
                <MudTh>Est. end</MudTh>
                <MudTh>Est. duration</MudTh>
                <MudTh>Motion</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="item">
                <MudTd DataLabel="Order">@item.Order</MudTd>
                <MudTd DataLabel="Title">@item.Title</MudTd>
                <MudTd DataLabel="Type">@item.Type.Name</MudTd>
                <MudTd DataLabel="State">@item.State</MudTd>
                <MudTd DataLabel="Description">@item.Description</MudTd>
                <MudTd DataLabel="Requirements">
                    @if (item.Validations.Any())
                    {
                        <MudStack Row="true" Spacing="1">
                            @foreach (var validation in item.Validations)
                            {
                                <MudChip Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">@validation.Message</MudChip>
                            }
                        </MudStack>
                    }
                </MudTd>
                <MudTd DataLabel="Est. start">@FormatTime(item.EstimatedStartTime)</MudTd>
                <MudTd DataLabel="Est. end">@FormatTime(item.EstimatedEndTime)</MudTd>
                <MudTd DataLabel="Est. duration">@FormatDuration(item.EstimatedDuration)</MudTd>
                <MudTd DataLabel="Motion">@item.Motion?.Id</MudTd>
                <MudTd>
                    @if (item.Order > 1)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.MoveUp" Size="Size.Small"
                            OnClick="async () => await MoveUp(item)">
                        </MudIconButton>
                    }
                </MudTd>
                <MudTd>
                    @if (item.Order != Items.Last().Order)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.MoveDown" Size="Size.Small"
                            OnClick="async () => await MoveDown(item)">
                        </MudIconButton>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => EditItem(item)">
                    </MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                        OnClick="async () => await RemoveItem(item)">
                    </MudIconButton>
                </MudTd>
            </RowTemplate>
            <ChildRowContent Context="item">
                <td colspan="13">
                @if(item.SubItems.Any())
                {
                <MudTable T="AgendaItemViewModel" @ref="table" Items="@item.SubItems" Dense="true" Hover="true" Elevation="0"
                    Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await EditItem(e.Item)">
                    <ToolBarContent>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Add" OnClick="AddItem" Class="mb-2">Add
                            Item</MudButton>
                    </ToolBarContent>

                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Title</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>State</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Requirements</MudTh>
                        <MudTh>Est. start</MudTh>
                        <MudTh>Est. end</MudTh>
                        <MudTh>Est. duration</MudTh>
                        <MudTh>Motion</MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="subItem">
                        <MudTd DataLabel="Order">@($"{item.Order}.{subItem.Order}")</MudTd>
                        <MudTd DataLabel="Title">@subItem.Title</MudTd>
                        <MudTd DataLabel="Type">@subItem.Type.Name</MudTd>
                        <MudTd DataLabel="State">@subItem.State</MudTd>
                        <MudTd DataLabel="Description">@subItem.Description</MudTd>
                        <MudTd DataLabel="Requirements">
                            @if (subItem.Validations.Any())
                            {
                                <MudStack Row="true" Spacing="1">
                                    @foreach (var validation in subItem.Validations)
                                    {
                                        <MudChip Color="Color.Error" Variant="Variant.Filled" Size="Size.Small">@validation.Message</MudChip>
                                    }
                                </MudStack>
                            }
                        </MudTd>
                        <MudTd DataLabel="Est. start">@FormatTime(subItem.EstimatedStartTime)</MudTd>
                        <MudTd DataLabel="Est. end">@FormatTime(subItem.EstimatedEndTime)</MudTd>
                        <MudTd DataLabel="Est. duration">@FormatDuration(subItem.EstimatedDuration)</MudTd>
                        <MudTd DataLabel="Motion">@subItem.Motion?.Id</MudTd>
                        <MudTd>
                            @if (subItem.Order > 1)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.MoveUp" Size="Size.Small"
                                    OnClick="async () => await MoveUp(item)">
                                </MudIconButton>
                            }
                        </MudTd>
                        <MudTd>
                            @if (subItem.Order != Items.Last().Order)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.MoveDown" Size="Size.Small"
                                    OnClick="async () => await MoveDown(subItem)">
                                </MudIconButton>
                            }
                        </MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => EditItem(subItem)">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                OnClick="async () => await RemoveItem(subItem)">
                            </MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                </MudTable>
                }
                </td>
            </ChildRowContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>
    }
    </MudPaper>

    @code
    {
    MudTable<AgendaItemViewModel> table;

    Agenda? agenda;

    [Parameter]
    public string? OrganizationId { get; set; } = null!;

    [Parameter]
    public int? MeetingId { get; set; } = null!;

    public List<AgendaItemViewModel> Items { get; set; } = new List<AgendaItemViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    public async Task ReloadAsync() 
    {
        agenda = await MeetingsClient.GetMeetingAgendaAsync(OrganizationId, MeetingId.GetValueOrDefault());

        if (agenda is null) return;
        
        if (Items.Any()) Items.Clear();

        Items.AddRange(agenda.Items.Select(item => new AgendaItemViewModel()
            {
                Id = item.Id,
                Order = item.Order,
                Title = item.Title,
                Type = item.Type,
                State = item.State,
                Description = item.Description,
                EstimatedStartTime = item.EstimatedStartTime,
                EstimatedEndTime = item.EstimatedEndTime,
                EstimatedDuration = item.EstimatedDuration,
                //Motion = item.Motion,
                Validations = item.Validations.Select(v => new AgendaItemValidationViewModel
                {
                    Code = v.Code,
                    Message = v.Message,
                    IsBlocking = v.IsBlocking
                }).ToList(),
                SubItems = item.SubItems.Select(x => new AgendaItemViewModel()
                {
                    Id = x.Id,
                    Order = x.Order,
                    Title = x.Title,
                    Type = x.Type,
                    State = x.State,
                    Description = x.Description,
                    EstimatedStartTime = x.EstimatedStartTime,
                    EstimatedEndTime = x.EstimatedEndTime,
                    EstimatedDuration = x.EstimatedDuration,
                    //Motion = x.Motion
                    Validations = x.Validations.Select(v => new AgendaItemValidationViewModel
                    {
                        Code = v.Code,
                        Message = v.Message,
                        IsBlocking = v.IsBlocking
                    }).ToList()
                }).ToList()
            }
        ));

        await InvokeAsync(StateHasChanged);
    }

    async Task CreateAgenda()
    {
        agenda = await AgendasClient.CreateAgendaAsync(OrganizationId, MeetingId, new Meetings.Dtos.CreateAgenda() { Items = [] });
    }

    async Task AddItem()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(AddAgendaItemDialog.OrganizationId), OrganizationId);

        var modalRef = await DialogService.ShowAsync<AddAgendaItemDialog>("Add item", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var agendaItemModel = (AgendaItemViewModel)result.Data;

        var dto = new AddAgendaItem
            {
                Title = agendaItemModel.Title,
                Type = agendaItemModel.Type.Id,
                Description = agendaItemModel.Description,
                MotionId = agendaItemModel.Motion?.Id,
                EstimatedStartTime = agendaItemModel.EstimatedStartTime,
                EstimatedEndTime = agendaItemModel.EstimatedEndTime,
                EstimatedDuration = agendaItemModel.EstimatedDuration
            };

        await AgendasClient.AddAgendaItemAsync(OrganizationId, agenda!.Id, dto);
        await ReloadAsync();
    }

    async Task MoveUp(AgendaItemViewModel item)
    {
        await AgendasClient.ReorderAgendaItemAsync(OrganizationId, agenda!.Id, item.Id, new ReorderAgendaItem
            {
                Order = item.Order - 1
            });
        await ReloadAsync();
    }

    async Task MoveDown(AgendaItemViewModel item)
    {
        await AgendasClient.ReorderAgendaItemAsync(OrganizationId, agenda!.Id, item.Id, new ReorderAgendaItem
            {
                Order = item.Order + 1
            });
        await ReloadAsync();
    }

    async Task RemoveItem(AgendaItemViewModel item)
    {
        var r = await DialogService.ShowMessageBox("Delete item?", "This can't be undone. You will have to manually add again.",
        "Delete", "Cancel");

        if (!r.GetValueOrDefault())
        {
            return;
        }

        await AgendasClient.RemoveAgendaItemAsync(OrganizationId, agenda!.Id, item.Id);
        await ReloadAsync();
    }

    async Task EditItem(AgendaItemViewModel item)
    {
        var originalItem = item;

        DialogParameters parameters = new();
        parameters.Add(nameof(AddAgendaItemDialog.OrganizationId), OrganizationId);
        parameters.Add(nameof(AddAgendaItemDialog.Model), originalItem.Clone());

        var modalRef = await DialogService.ShowAsync<AddAgendaItemDialog>("Edit item", parameters);

        var result = await modalRef.Result;

        if (result.Canceled) return;

        var editedModel = (AgendaItemViewModel)result.Data;

        var dto = new EditAgendaItem
            {
                Title = editedModel.Title,
                Type = editedModel.Type.Id,
                Description = editedModel.Description,
                MotionId = editedModel.Motion?.Id,
                EstimatedStartTime = editedModel.EstimatedStartTime,
                EstimatedEndTime = editedModel.EstimatedEndTime,
                EstimatedDuration = editedModel.EstimatedDuration
            };

        await AgendasClient.EditAgendaItemAsync(OrganizationId, agenda!.Id, item.Id, dto);

        await ReloadAsync();
    }

    private static string FormatTime(TimeSpan? timeSpan)
        => timeSpan is null ? "-" : timeSpan.Value.ToString(@"hh\:mm");

    private static string FormatDuration(TimeSpan? duration)
    {
        if (duration is null)
        {
            return "-";
        }

        var minutes = duration.Value.TotalMinutes;

        return minutes % 1 == 0
            ? $"{minutes:0} min"
            : $"{minutes:0.##} min";
    }
}