// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourBrand.Meetings.Infrastructure.Persistence;

#nullable disable

namespace YourBrand.Meetings.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Agenda", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("MinutesId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("RejectedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "MeetingId")
                        .IsUnique();

                    b.HasIndex("OrganizationId", "MinutesId")
                        .IsUnique()
                        .HasFilter("[MinutesId] IS NOT NULL");

                    b.ToTable("Agendas", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.AgendaItem", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AgendaId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscussionActions")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DiscussionEndedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DiscussionStartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EstimatedEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("EstimatedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDiscussionCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoteCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MotionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("VoteActions")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("VotingEndedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("VotingStartedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.HasIndex("OrganizationId", "AgendaId");

                    b.HasIndex("OrganizationId", "ParentId");

                    b.ToTable("AgendaItems", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.AgendaItemType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("CanBePostponed")
                        .HasColumnType("bit");

                    b.Property<bool>("CanBeSkipped")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("HandledByFunctionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresDiscussion")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresVoting")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HandledByFunctionId");

                    b.ToTable("AgendaItemTypes", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.AttendeeRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("CanPropose")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSpeak")
                        .HasColumnType("bit");

                    b.Property<bool>("CanVote")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AttendeeRoles", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Ballot", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ElectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SelectedCandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("TimeCast")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VoterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "ElectionId");

                    b.HasIndex("OrganizationId", "SelectedCandidateId");

                    b.ToTable("Ballots", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Discussion", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgendaItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("CurrentSpeakerClockStartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CurrentSpeakerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("SpeakingTimeLimit")
                        .HasColumnType("time");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "AgendaItemId")
                        .IsUnique()
                        .HasFilter("[AgendaItemId] IS NOT NULL");

                    b.HasIndex("OrganizationId", "CurrentSpeakerId");

                    b.ToTable("Discussions", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Election", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int");

                    b.Property<string>("AgendaItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ElectedCandidateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MeetingFunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumVotesToWin")
                        .HasColumnType("int");

                    b.Property<string>("MotionOperativeClauseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MeetingFunctionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "AgendaItemId")
                        .IsUnique()
                        .HasFilter("[AgendaItemId] IS NOT NULL");

                    b.HasIndex("OrganizationId", "ElectedCandidateId");

                    b.ToTable("Elections", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.ElectionCandidate", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ElectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupMemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPreMeetingNomination")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("NominatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Statement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WithdrawnAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "ElectionId");

                    b.ToTable("ElectionCandidates", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Meeting", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AdjournedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AdjournmentMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("CanAnyoneJoin")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CanceledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CurrentAgendaItemIndex")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentAgendaSubItemIndex")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("JoinAsId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ScheduledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("ShowAgendaTimeEstimates")
                        .HasColumnType("bit");

                    b.Property<int>("SpeakingRightsAccessLevel")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VotingRightsAccessLevel")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JoinAsId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingAttendee", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("AddedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasSpeakingRights")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasVotingRights")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("InviteAcceptedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("InvitedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("JoinedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MeetingGroupId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingGroupMemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RemovedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "MeetingId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("MeetingAttendees", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingAttendeeFunction", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingAttendeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MeetingFunctionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "MeetingId", "MeetingAttendeeId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("MeetingFunctionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.ToTable("MeetingAttendeeFunctions", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeetingFunctions");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingGroup", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.ToTable("MeetingGroups", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingGroupMember", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasSpeakingRights")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasVotingRights")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MeetingGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "MeetingGroupId");

                    b.ToTable("MeetingGroupMembers", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MemberRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MemberRoles", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Minutes", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Canceled")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Ended")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("Started")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "MeetingId")
                        .IsUnique();

                    b.ToTable("Minutes", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MinutesAttendee", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MinutesId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasSpeakingRights")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasVotingRights")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MeetingGroupId")
                        .HasColumnType("int");

                    b.Property<string>("MeetingGroupMemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "MinutesId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("MinutesAttendees", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MinutesItem", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int");

                    b.Property<string>("AgendaItemId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MinutesId")
                        .HasColumnType("int");

                    b.Property<int?>("MotionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.HasIndex("OrganizationId", "MinutesId");

                    b.ToTable("MinutesItems", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MinutesTask", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MinutesId")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AssignedToEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedToName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CompletedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DueAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "MinutesId", "Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CompletedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.ToTable("MinutesTasks", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Motion", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.ToTable("Motion", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MotionOperativeClause", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MotionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "MotionId");

                    b.ToTable("MotionOperativeClauses", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("TenantId");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.OrganizationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationUsers", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.SpeakerRequest", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan?>("ActualSpeakingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("AllocatedSpeakingTime")
                        .HasColumnType("time");

                    b.Property<string>("AttendeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasExtendedSpeakingTime")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RequestedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpeakerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "SpeakerId");

                    b.ToTable("SpeakerRequests", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("TenantId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Vote", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Option")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("TimeCast")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VoterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VotingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "VotingId");

                    b.ToTable("Votes", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Voting", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgendaItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("HasPassed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotionOperativeClauseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId", "Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("OrganizationId", "AgendaItemId")
                        .IsUnique()
                        .HasFilter("[AgendaItemId] IS NOT NULL");

                    b.ToTable("Voting", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Infrastructure.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Infrastructure.Persistence.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Consumer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessageConsumers", (string)null);
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Agenda", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Meeting", null)
                        .WithOne("Agenda")
                        .HasForeignKey("YourBrand.Meetings.Domain.Entities.Agenda", "OrganizationId", "MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Minutes", null)
                        .WithOne("Agenda")
                        .HasForeignKey("YourBrand.Meetings.Domain.Entities.Agenda", "OrganizationId", "MinutesId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.AgendaItem", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AgendaItemType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Agenda", null)
                        .WithMany("Items")
                        .HasForeignKey("OrganizationId", "AgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AgendaItem", null)
                        .WithMany("SubItems")
                        .HasForeignKey("OrganizationId", "ParentId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.AgendaItemType", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.MeetingFunction", "HandledByFunction")
                        .WithMany()
                        .HasForeignKey("HandledByFunctionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("HandledByFunction");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Ballot", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Election", null)
                        .WithMany("Ballots")
                        .HasForeignKey("OrganizationId", "ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.ElectionCandidate", "SelectedCandidate")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "SelectedCandidateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("SelectedCandidate");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Discussion", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AgendaItem", null)
                        .WithOne("Discussion")
                        .HasForeignKey("YourBrand.Meetings.Domain.Entities.Discussion", "OrganizationId", "AgendaItemId");

                    b.HasOne("YourBrand.Meetings.Domain.Entities.SpeakerRequest", "CurrentSpeaker")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "CurrentSpeakerId");

                    b.Navigation("CreatedBy");

                    b.Navigation("CurrentSpeaker");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Election", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.MeetingFunction", "MeetingFunction")
                        .WithMany()
                        .HasForeignKey("MeetingFunctionId");

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AgendaItem", null)
                        .WithOne("Election")
                        .HasForeignKey("YourBrand.Meetings.Domain.Entities.Election", "OrganizationId", "AgendaItemId");

                    b.HasOne("YourBrand.Meetings.Domain.Entities.ElectionCandidate", "ElectedCandidate")
                        .WithMany()
                        .HasForeignKey("OrganizationId", "ElectedCandidateId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ElectedCandidate");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("MeetingFunction");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.ElectionCandidate", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Election", null)
                        .WithMany("Candidates")
                        .HasForeignKey("OrganizationId", "ElectionId");

                    b.OwnsOne("YourBrand.Meetings.Domain.Entities.IdGroup", "NominatedBy", b1 =>
                        {
                            b1.Property<string>("ElectionCandidateOrganizationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ElectionCandidateId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AttendeeId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("GroupMemberId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ElectionCandidateOrganizationId", "ElectionCandidateId");

                            b1.ToTable("ElectionCandidates");

                            b1.WithOwner()
                                .HasForeignKey("ElectionCandidateOrganizationId", "ElectionCandidateId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("NominatedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Meeting", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AttendeeRole", "JoinAs")
                        .WithMany()
                        .HasForeignKey("JoinAsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("YourBrand.Meetings.Domain.Entities.Quorum", "Quorum", b1 =>
                        {
                            b1.Property<string>("MeetingOrganizationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("MeetingId")
                                .HasColumnType("int");

                            b1.Property<int>("RequiredNumber")
                                .HasColumnType("int");

                            b1.HasKey("MeetingOrganizationId", "MeetingId");

                            b1.ToTable("Meetings");

                            b1.WithOwner()
                                .HasForeignKey("MeetingOrganizationId", "MeetingId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("JoinAs");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Quorum")
                        .IsRequired();
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingAttendee", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AttendeeRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Meeting", null)
                        .WithMany("Attendees")
                        .HasForeignKey("OrganizationId", "MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingAttendeeFunction", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.MeetingFunction", "Function")
                        .WithMany()
                        .HasForeignKey("MeetingFunctionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.MeetingAttendee", "MeetingAttendee")
                        .WithMany("Functions")
                        .HasForeignKey("OrganizationId", "MeetingId", "MeetingAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Function");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("MeetingAttendee");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingGroup", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("YourBrand.Meetings.Domain.Entities.Quorum", "Quorum", b1 =>
                        {
                            b1.Property<string>("MeetingGroupOrganizationId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("MeetingGroupId")
                                .HasColumnType("int");

                            b1.Property<int>("RequiredNumber")
                                .HasColumnType("int");

                            b1.HasKey("MeetingGroupOrganizationId", "MeetingGroupId");

                            b1.ToTable("MeetingGroups");

                            b1.WithOwner()
                                .HasForeignKey("MeetingGroupOrganizationId", "MeetingGroupId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Quorum")
                        .IsRequired();
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingGroupMember", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AttendeeRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.MeetingGroup", null)
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId", "MeetingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Minutes", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Meeting", null)
                        .WithOne("Minutes")
                        .HasForeignKey("YourBrand.Meetings.Domain.Entities.Minutes", "OrganizationId", "MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MinutesAttendee", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AttendeeRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Minutes", null)
                        .WithMany("Attendees")
                        .HasForeignKey("OrganizationId", "MinutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MinutesItem", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AgendaItemType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Minutes", null)
                        .WithMany("Items")
                        .HasForeignKey("OrganizationId", "MinutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MinutesTask", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Minutes", null)
                        .WithMany("Tasks")
                        .HasForeignKey("OrganizationId", "MinutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CompletedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Motion", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MotionOperativeClause", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Motion", null)
                        .WithMany("OperativeClauses")
                        .HasForeignKey("OrganizationId", "MotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Organization", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.OrganizationUser", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.SpeakerRequest", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Discussion", null)
                        .WithMany("SpeakerQueue")
                        .HasForeignKey("OrganizationId", "SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.User", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Vote", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.Voting", null)
                        .WithMany("Votes")
                        .HasForeignKey("OrganizationId", "VotingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Voting", b =>
                {
                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Meetings.Domain.Entities.AgendaItem", null)
                        .WithOne("Voting")
                        .HasForeignKey("YourBrand.Meetings.Domain.Entities.Voting", "OrganizationId", "AgendaItemId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.AgendaItem", b =>
                {
                    b.Navigation("Discussion");

                    b.Navigation("Election");

                    b.Navigation("SubItems");

                    b.Navigation("Voting");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Discussion", b =>
                {
                    b.Navigation("SpeakerQueue");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Election", b =>
                {
                    b.Navigation("Ballots");

                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("Agenda");

                    b.Navigation("Attendees");

                    b.Navigation("Minutes");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingAttendee", b =>
                {
                    b.Navigation("Functions");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.MeetingGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Minutes", b =>
                {
                    b.Navigation("Agenda");

                    b.Navigation("Attendees");

                    b.Navigation("Items");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Motion", b =>
                {
                    b.Navigation("OperativeClauses");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Organization", b =>
                {
                    b.Navigation("OrganizationUsers");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.User", b =>
                {
                    b.Navigation("OrganizationUsers");
                });

            modelBuilder.Entity("YourBrand.Meetings.Domain.Entities.Voting", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
