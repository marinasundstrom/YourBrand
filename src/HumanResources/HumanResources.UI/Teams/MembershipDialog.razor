@using System.ComponentModel.DataAnnotations
@inject ITeamsClient TeamsClient
@inject IPersonsClient PersonsClient

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            @*@if (MembershipId is null)
            {*@

                <MudAutocomplete T="Person" Label="Person" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Person" SearchFunc="@Search1"
                                 For="() => Person"
                                 ToStringFunc="u => u?.GetDisplayName()"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            @*}*@
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>

            @* @(MembershipId is null ? "Create" : "Save changes") *@
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    [CascadingParameter] IMudDialogInstance Modal { get; set; }

    [Parameter] public string? TeamId { get; set; }

    //[Parameter] public string? MembershipId { get; set; }

    [Required]
    public Person Person { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(TeamId);

        /*
        if (MembershipId is not null)
        {
            var result = await TeamsClient.GetMemberAsync(TeamId, PersonId);

            Person = result.Person;
        }
        */
    }

    async Task OnSubmit()
    {
        TeamMembership? result = null;

        /* if (MembershipId is null)
        { */

        await TeamsClient.AddMemberAsync(TeamId, new AddMember {
            PersonId = Person.Id
        });

        /* }
         else
         {
             result = await TeamsClient.UpdateProjectMembershipAsync(TeamId, PersonId, new UpdateProjectMembership());
         } */

        Modal.Close(DialogResult.Ok(result));
    }

    private async Task<IEnumerable<Person>> Search1(string value, CancellationToken cancellationToken)
    {
        var page = await PersonsClient.GetPersonsAsync(0, 10, value, null, null, cancellationToken);

        return page.Items;
    }
}