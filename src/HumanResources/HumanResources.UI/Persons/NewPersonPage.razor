@page "/hr/persons/new"
@using System.ComponentModel.DataAnnotations
@inject IPersonsClient PersonsClient
@inject IRolesClient RolesClient
@inject NavigationManager NavigationManager

@* <MudBreadcrumbs Items="_items"></MudBreadcrumbs> *@

<AppPageTitle>New person</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center" Class="mb-8">New person</MudText>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.ExtraSmall">
    <MudPaper Elevation="25" Class="pa-8">

        <EditForm Model="@this" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />

            <MudTextField Label="First Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="FirstName" For="() => FirstName" />

            <MudTextField Label="Last Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="LastName" For="() => LastName" />

            <MudTextField Label="Display Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="DisplayName" For="() => DisplayName" />

            <MudTextField Label="Title" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Title" For="() => Title" />

            <MudTextField Label="SSN" Class="mb-6" Variant="Variant.Outlined" @bind-Value="SSN" For="() => SSN" />

            <MudTextField Label="Email" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Email" For="() => Email" />

            <MudAutocomplete Label="Role" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Role" For="() => Role" SearchFunc="SearchRole" ToStringFunc="(x) => x.Name">
                <ItemTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemTemplate>

                <ItemSelectedTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>

            <MudAutocomplete Label="Reports to" Class="mb-6" Variant="Variant.Outlined" @bind-Value="ReportsTo" For="() => ReportsTo" SearchFunc="SearchPerson" ToStringFunc="(x) => x.GetDisplayName()">
                <ItemTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.GetDisplayName()</MudText>
                </ItemTemplate>

                <ItemSelectedTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.GetDisplayName()</MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>

            @*
            <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-8">Password</MudText>

            <MudTextField Class="mb-6" InputType="InputType.Password" Label="New password" @bind-Value="Password" Variant="Variant.Outlined" For="() => Password" />

            <MudTextField Class="mb-6" InputType="InputType.Password" Label="Repeat new password" @bind-Value="RepeatPassword" Variant="Variant.Outlined" For="() => RepeatPassword" />
            *@

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>

        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    [Required]
    public string FirstName { get; set; } = null!;

    [Required]
    public string LastName { get; set; } = null!;

    public string? DisplayName { get; set; }

    [Required]
    public string Title { get; set; } = null!;

    [Required]
    public string SSN { get; set; } = null!;

    [Required]
    public Role Role { get; set; } = null!;
    
    public Person? ReportsTo { get; set; } = null!;

    [Required]
    [EmailAddress]
    public string Email { get; set; } = null!;

    /*

    [Required]
    public string Password { get; set; } = null!;

    [Required]
    [Compare(nameof(Password))]
    public string RepeatPassword { get; set; } = null!;

    */

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Persons", href: "/Persons"),
        new BreadcrumbItem("Create persons", href: null, disabled: true)
    };

    async Task OnSubmit()
    {
        try
        {
            Person result = await PersonsClient.CreatePersonAsync(new CreatePerson
            {
                FirstName = FirstName,
                LastName = LastName,
                DisplayName = DisplayName,
                Title = Title,
                Ssn = SSN,
                Email = Email,
                Role = Role.Name,
                ReportsTo = ReportsTo?.Id,
                //Password = Password
            });

            NavigationManager.NavigateTo($"/hr/Persons/{result.Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task<IEnumerable<Role>> SearchRole(string text, CancellationToken cancellationToken)
    {
        try
        {
            var results = await RolesClient.GetRolesAsync(0, 10, text, null, null, cancellationToken);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    async Task<IEnumerable<Person>> SearchPerson(string text, CancellationToken cancellationToken)
    {
        try
        {
            var results = await PersonsClient.GetPersonsAsync(0, 10, text, null, null, cancellationToken);

            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }
}