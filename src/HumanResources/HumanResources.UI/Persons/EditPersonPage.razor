@page "/hr/persons/{PersonId}/edit"
@using System.ComponentModel.DataAnnotations
@inject IPersonsClient PersonsClient
@inject NavigationManager NavigationManager

@if (person is not null)
{
    <AppPageTitle>Edit @person?.GetDisplayName()</AppPageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center" Class="mb-8">Edit @person?.GetDisplayName()</MudText>

    <MudContainer Class="mt-16" MaxWidth="MaxWidth.ExtraSmall">

        <MudPaper Elevation="25" Class="pa-8">

            <EditForm Model="@this" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator />

                <MudTextField Label="First Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="FirstName" For="() => FirstName" />

                <MudTextField Label="Last Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="LastName" For="() => LastName" />

                <MudTextField Label="Display Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="DisplayName" For="() => DisplayName" />

                <MudTextField Label="SSN" Class="mb-6" Variant="Variant.Outlined" @bind-Value="SSN" For="() => SSN" />

                <MudTextField Label="Email" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Email" For="() => Email" />

                <MudField Label="Role" Class="mb-6" Variant="Variant.Outlined" Disabled="true">@Role</MudField>

                <MudAutocomplete Label="Reports to" Class="mb-6" Variant="Variant.Outlined" @bind-Value="ReportsTo" For="() => ReportsTo" SearchFunc="SearchPerson" ToStringFunc="(x) => x.GetDisplayName()">
                    <ItemTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.GetDisplayName()</MudText>
                    </ItemTemplate>

                    <ItemSelectedTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.GetDisplayName()</MudText>
                    </ItemSelectedTemplate>
                </MudAutocomplete>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Save changes</MudButton>

            </EditForm>
        </MudPaper>

    </MudContainer>
}

@code {
    [CascadingParameter] MudDialogInstance Modal { get; set; } = null!;

    [Parameter] public string? PersonId { get; set; }

    [Required]
    public string FirstName { get; set; } = null!;

    [Required]
    public string LastName { get; set; } = null!;

    public string? DisplayName { get; set; }

    [Required]
    public string Title { get; set; }

    [Required]
    public string SSN { get; set; } = null!;

    [Required]
    [EmailAddress]
    public string Email { get; set; } = null!;

    public string Role { get; set; } = null!;

    public Person2? ReportsTo { get; set; }

    Person? person;

    protected override async Task OnInitializedAsync()
    {
        var result = await PersonsClient.GetPersonAsync(PersonId);

        person = result;

        FirstName = result.FirstName;
        LastName = result.LastName;
        DisplayName = result.DisplayName;
        Title = result.Title;
        SSN = result.Ssn;
        Email = result.Email;
        Role = result.Role;
        ReportsTo = result.ReportsTo;
    }

    async Task OnSubmit()
    {
        try
        {
            Person result = await PersonsClient.UpdatePersonAsync(PersonId, new UpdatePersonDetails
            {
                FirstName = FirstName,
                LastName = LastName,
                DisplayName = DisplayName,
                Title = Title,
                Ssn = SSN,
                Email = Email,
                ReportsTo = ReportsTo?.Id,
            });

            NavigationManager.NavigateTo($"/hr/persons/{result.Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    async Task<IEnumerable<Person2>> SearchPerson(string text)
    {
        try
        {
            var results = await PersonsClient.GetPersonsAsync(0, 10, text, null, null);

            return results.Items.Where(x => x.Id != PersonId).Select(
                p => new Person2()  
                {
                    Id = p.Id,
                    FirstName = p.FirstName,
                    LastName = p.LastName,
                    DisplayName = p.DisplayName,
                    Title = p.Title
                }
            );
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }
}
