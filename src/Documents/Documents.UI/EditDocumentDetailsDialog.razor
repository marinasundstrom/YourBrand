@using System.ComponentModel.DataAnnotations
@inject IDocumentsClient DocumentsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<EditForm Model="@_model" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            @if (_documentDto is not null)
            {
                <div class="d-flex gap-4">
                    <MudTextField T="string" Label="Name" Value="_model.Name" ValueChanged="OnNameChanged" For="() => _model.Name" />
                    <div class="justify-end">.@_documentDto.Extension</div>
                </div>

                @if(!_model.NameOk) 
                {
                    <MudText Typo="Typo.body2" Class="mt-2" Color="Color.Error">Name is already taken.</MudText>
                }

                <MudTextField Label="Description" @bind-Value="_model.Description" For="() => _model.Description" Lines="5" Class="mt-2" />
            }
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
            <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" OnClick="Delete">Delete</MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    DocumentDto? _documentDto;
    DocumentModel _model = new DocumentModel();

    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Parameter] public string Id { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        _documentDto = await DocumentsClient.GetDocumentAsync(Id);

        _model = new DocumentModel()
        {
            Name  = _documentDto.Name,
            Description = _documentDto.Description
        };
    }

    async Task OnNameChanged(string name) 
    {
        _model.NameOk = await DocumentsClient.CanRenameDocumentAsync(Id, name);
        _model.Name = name;
    }

    async Task OnSubmit()
    {
        if(_documentDto?.Name != _model.Name)
        {
            await DocumentsClient.RenameDocumentAsync(_documentDto!.Id, _model.Name);

            Snackbar.Add($"Document was renamed", Severity.Info);
        }

        if(_documentDto?.Description != _model.Description)
        {
            await DocumentsClient.UpdateDescriptionAsync(_documentDto!.Id, _model.Description);

            Snackbar.Add($"Description was updated", Severity.Info);
        }

        Modal.Close();
    }

    async Task Delete()
    {
        var result = await DialogService.ShowMessageBox($"Delete {_documentDto.Name}", " Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault()) return;

        await DocumentsClient.DeleteDocumentAsync(_documentDto!.Id);
        Modal.Close();

        Snackbar.Add($"Document was deleted", Severity.Info);
    }

    class DocumentModel
    {
        [Required]
        public string Name { get; set; } = null!;

        public string? Description { get; set; } = null!;

        [Range(typeof(bool), "true", "true", ErrorMessage = "Name is already taken.")]
        public bool NameOk 
        {
            get;
            set;
        } = true;
    }
}