@page "/documents2"
@inject IDocumentsClient DocumentsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AppPageTitle>Documents</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Documents</MudText>

<MudButton Variant="Variant.Filled" OnClick="UploadDocument" Class="mb-2">Upload document</MudButton>

<MudTable T="DocumentDto" @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
    Loading="@loading" LoadingProgressColor="Color.Info">
    
     <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Content Type</MudTh>
        <MudTh></MudTh>
     </HeaderContent>
    <RowTemplate Context="document">
        <MudTd DataLabel="Name">@($"{document.Name}.{document.Extension}")</MudTd>
        <MudTd DataLabel="Date">@document.Created.ToString("g")</MudTd>
        <MudTd DataLabel="Content Type">@document.ContentType</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.FileDownload" Href="@document.Url" Target="_blank" @onclick:stopPropagation />
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await EditDocumentDetails(document)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteDocument(document)" />
        </MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<DocumentDto> table = null!;
    bool loading = false;

    private async Task<TableData<DocumentDto>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        loading = true;

        try
        {
            var result = await DocumentsClient.GetDocumentsAsync(state.Page, state.PageSize, cancellationToken);

            return new TableData<DocumentDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    public async Task UploadDocument()
    {
        var dialogRef = await DialogService.ShowAsync<UploadDocumentDialog>("Upload document");

        var result = await dialogRef.Result;

        //if (result.Canceled) return;

        await table.ReloadServerData();
    }

    public async Task EditDocumentDetails(DocumentDto document)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(EditDocumentDetailsDialog.Id), document.Id);

        var dialogRef = await DialogService.ShowAsync<EditDocumentDetailsDialog>($"Edit {document.Name}", parameters);

        var result = await dialogRef.Result;

        //if (result.Canceled) return;

        await table.ReloadServerData();
    }

    public async Task DeleteDocument(DocumentDto document)
    {
        var result = await DialogService.ShowMessageBox($"Delete {document.Name}", " Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault()) return;

        await DocumentsClient.DeleteDocumentAsync(document.Id);

        Snackbar.Add($"{document.Name} was deleted", Severity.Info);

        await table.ReloadServerData();
    }
}