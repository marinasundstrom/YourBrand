@page "/cases/{Id}"
@attribute [Authorize]
@using Humanizer
@using YourBrand.TimeReport.Client
@using YourBrand.Portal.Modules
@inject ICasesClient CasesClient
@inject IProjectsClient ProjectsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (@case is null)
{
    if (loadingFailed)
    {
        <MudText Typo="Typo.h3" Class="mb-4">Error when loading case.</MudText>
    }
    else
    {
        <LoadingIndicator />
    }
}
else
{
    <AppPageTitle>Case @Id</AppPageTitle>

    <MudText Typo="Typo.h3" Class="mb-4">Case @Id</MudText>

    <MudPaper Class="pa-4" Elevation="25">
        Test

        @(@case.Pricing?.Total?.FormatCurrency("SEK"))


        <ModuleBoundary ModuleId="@KnownsModulesIds.TimeReportModule">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CreateProject">Create project
            </MudButton>

        </ModuleBoundary>
    </MudPaper>
}

@code 
{
    private Case? @case;
    private bool loadingFailed = false;

    [Parameter]
    public string Id { get; set; } = null!;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        loadingFailed = false;

        try
        {
            this.@case = await CasesClient.GetCaseAsync(Id);
        }
        catch (Exception exc)
        {
            loadingFailed = true;
            //await JSHelpers.Alert(exc.Message);
        }
    }
    
    async System.Threading.Tasks.Task CreateProject() 
    {
        var profile = @case.CaseProfiles.First();

        var project = await ProjectsClient.CreateProjectAsync(profile.Profile.Organization.Id, new CreateProject
        {
            OrganizationId = profile.Profile.Organization.Id,
            Name = $"Case {@case.Description} - {profile.Profile.FirstName} {profile.Profile.LastName}",
            Description = "Assignment"
        });

        NavigationManager.NavigateTo($"/projects/{project.Id}");
    }
}
