@page "/skills"
@attribute [Authorize]
@using YourBrand.Showroom.Persons.Profile
@inject ISkillsClient SkillsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<AppPageTitle>Skills</AppPageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Skills</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnSkillClicked(null)" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    New skill
</MudButton>

<MudButton Variant="Variant.Filled" Href="/skills/areas" StartIcon="@Icons.Material.Filled.List" Color="Color.Default" Class="mb-2 me-2">
    Areas
</MudButton>

<MudPaper Class="pa-4" Elevation="25">
    <MudTable @ref="table" T="Skill" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
              Striped="true" OnRowClick="ItemOnClick">
        <ToolBarContent>
            <SkillAreaSelector Label="Area" Value="SkillArea" ValueChanged="OnSkillAreaChanged" For="() => SkillArea" />

            <MudSpacer />

            <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="Skill" SortLabel="Name">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Skill" SortLabel="Area">Area</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Skill" SortLabel="Area.Industry">Industry</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Name">@context.Area.Name</MudTd>
            <MudTd DataLabel="Name">@context.Area.Industry.Name</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    MudTable<Skill> table; 
    string? searchString;

    public SkillArea SkillArea { get; set; }

    private async Task<TableData<Skill>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var results = await SkillsClient.GetSkillsAsync(state.Page + 1, state.PageSize, SkillArea?.Id, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Showroom.Client.SortDirection.Asc : YourBrand.Showroom.Client.SortDirection.Desc), cancellationToken);
            return new TableData<Skill> { Items = results.Items, TotalItems = results.TotalCount };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<Skill> ev)
    {
        var item = ev.Item;

        await OnSkillClicked(item);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnSkillAreaChanged(SkillArea sa)
    {
        SkillArea = sa;
        table.ReloadServerData();
    }

    async Task OnSkillClicked(Skill? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(SkillDialog.SkillId), dto?.Id);

            var dialogReference = await DialogService.ShowAsync<SkillDialog>(dto is null ? "New Skill" : $"Update {dto.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}