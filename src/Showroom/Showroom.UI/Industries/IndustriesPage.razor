@page "/industries"
@attribute [Authorize]
@using YourBrand.Showroom.Persons.Profile
@inject IIndustriesClient IndustriesClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<AppPageTitle>Industries</AppPageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Industries</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnIndustryClicked(null)" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    New Industry
</MudButton>

<MudPaper Class="pa-4" Elevation="25">
    <MudTable @ref="table" T="Industry" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
              Striped="true" OnRowClick="ItemOnClick">
        <ToolBarContent>

            <MudSpacer />

            <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="Industry" SortLabel="Name">Name</MudTableSortLabel></MudTh>
            @*<MudTh><MudTableSortLabel T="Industry" SortLabel="Area">Area</MudTableSortLabel></MudTh>*@
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            @*<MudTd DataLabel="Name">@context.Area.Name</MudTd> *@
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    MudTable<Industry> table; 
    string? searchString;

    public Industry Industry { get; set; }

    private async Task<TableData<Industry>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var results = await IndustriesClient.GetIndustriesAsync(state.Page + 1, state.PageSize, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Showroom.Client.SortDirection.Asc : YourBrand.Showroom.Client.SortDirection.Desc), cancellationToken);
            return new TableData<Industry> { Items = results.Items, TotalItems = results.TotalCount };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<Industry> ev)
    {
        var item = ev.Item;

        await OnIndustryClicked(item);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnIndustryChanged(Industry sa)
    {
        Industry = sa;
        table.ReloadServerData();
    }

    async Task OnIndustryClicked(Industry? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(IndustryDialog.IndustryId), dto?.Id);

            var dialogReference = await DialogService.ShowAsync<IndustryDialog>(dto is null ? "New Industry" : $"Update {dto.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}