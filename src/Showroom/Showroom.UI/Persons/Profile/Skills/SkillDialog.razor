@using System.ComponentModel.DataAnnotations
@inject IPersonProfilesClient PersonProfilesClient
@inject ISnackbar Snackbar
@inject ISkillsClient SkillsClient

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Gutters="false">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                @if(PersonProfileSkillId is null) 
                {
                    <SkillSelector Variant="Variant.Outlined" @bind-Value="Skill" For="() => Skill" ShowAddButton="true" />
                }

                <SkillLevelSelector Label="Skill level" Variant="Variant.Outlined" @bind-Value="SkillLevel"
                           For="@(() => SkillLevel)" Class="mt-4" />

                <MudTextField Label="Comment" Lines="5" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Comment"
                              For="@(() => Comment)" />

                <MudText Typo="Typo.h6" Class="mt-4">Experience</MudText>

                @foreach (var experience in experiences)
                {
                    <MudCheckBox @bind-Value="experience.Checked">@experience.Title at @experience.Company.Name</MudCheckBox>
                }
            </MudContainer>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                @if(PersonProfileSkillId is null) 
                {
                    <text>Add</text>
                }
                else 
                {
                    <text>Update</text>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code
{
    EditContext context = null!;
    List<ExperienceVM> experiences = new List<ExperienceVM>();

    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public string PersonProfileId { get; set; } = null!;

    [Parameter]
    public string? PersonProfileSkillId { get; set; } = null!;

    [Required]
    public Skill? Skill { get; set; } = null!;

    public SkillLevel SkillLevel { get; set; } = SkillLevel.Novice;

    public string? Comment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        if (PersonProfileSkillId is null) 
        {
            var experiences2 = (await PersonProfilesClient.GetExperiencesAsync(PersonProfileId, 1, 120, null, null, null)).Items;

            foreach (var experience in experiences2)
            {
                experiences.Add(new ExperienceVM
                {
                    Id = experience.Id,
                    Company = experience.Company,
                    Title = experience.Title,
                    Checked = false
                });
            }
        }
        else 
        {
            var skill = await PersonProfilesClient.GetSkillAsync(PersonProfileId, PersonProfileSkillId);
            Skill = skill.Skill;
            SkillLevel = skill.Level.GetValueOrDefault();
            Comment = skill.Comment;
            var selectedExperiences = skill.Experiences;

            var experiences2 = (await PersonProfilesClient.GetExperiencesAsync(PersonProfileId, 1, 120, null, null, null)).Items;

            foreach (var experience in experiences2)
            {
                var v = selectedExperiences.Any(x => x.Id == experience.Id);

                experiences.Add(new ExperienceVM
                {
                    Id = experience.Id,
                    Company = experience.Company,
                    Title = experience.Title,
                    OriginalChecked = v,
                    Checked = v
                });
            }
        }
    }

    public async Task OnValidSubmit()
    {
        PersonProfileSkill? personProfileSkill = null;

        if(PersonProfileSkillId is null) 
        {
            personProfileSkill = await PersonProfilesClient.AddSkillAsync(PersonProfileId, new AddPersonProfileSkill
            {
                SkillId = Skill.Id,
                Level = SkillLevel,
                Comment = Comment
            });

            var dtos = experiences
                .Select(x => new UpdateSkillExperience()
                {
                    PersonProfileExperienceId = x.Id,
                    Checked = x.Checked
                });

            if(dtos.Any()) 
            {
                await PersonProfilesClient.UpdateSkillExperiencesAsync(PersonProfileId, personProfileSkill.Id, dtos);
            }
        }
        else 
        {
            if (context.IsModified())
            {
                personProfileSkill = await PersonProfilesClient.UpdateSkillAsync(PersonProfileId, PersonProfileSkillId, new UpdatePersonProfileSkill
                {
                    Level = SkillLevel,
                    Comment = Comment
                });
            }

            var dtos = experiences
                .Where(x => x.Checked != x.OriginalChecked)
                .Select(x => new UpdateSkillExperience()
                {
                    PersonProfileExperienceId = x.Id,
                    Checked = x.Checked
                });

            if(dtos.Any()) 
            {
                await PersonProfilesClient.UpdateSkillExperiencesAsync(PersonProfileId, PersonProfileSkillId, dtos);
            }
        }

        Dialog.Close(DialogResult.Ok(personProfileSkill));
    }

    public class ExperienceVM
    {
        public string Id { get; set; }

        public Company Company { get; set; }

        public string Title { get; set; }

        public bool OriginalChecked { get; set; }

        public bool Checked { get; set; }
    }
}