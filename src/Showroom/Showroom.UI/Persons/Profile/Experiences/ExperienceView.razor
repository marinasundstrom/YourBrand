@{
    var experience = Model.experience;
    var isSub = Model.isSub;

    var now = ExperienceExtensions.GetNowDate();

    var startDate = experience.GetStartDate();
    DateTime? endDate = experience.GetEndDate();
}

<div class="d-flex justify-space-between align-center">
    @if (isSub)
    {
        <MudText Typo="Typo.h5" Class="mb-2 mt-1">
            @experience.Roles.FirstOrDefault()?.Title
        </MudText>
    }
    else
    {
        <MudText Typo="Typo.h5" Class="mb-2">
            @experience.Roles.FirstOrDefault()?.Title
        </MudText>
    }

    <div>
        @if (AddOrEditExperience.HasDelegate)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
            Size="Size.Small"
            OnClick="async () => await AddOrEditExperience.InvokeAsync(experience)" />
        }
        @if (DeleteExperience.HasDelegate)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
            Size="Size.Small"
            OnClick="async () => await DeleteExperience.InvokeAsync(experience)" />
        }
    </div>
</div>

<MudText Typo="Typo.body2">
    @if (Model.isSub)
    {
        <p>@experience.EmploymentType @(experience.EmployerName != experience.Company.Name ? "• " + experience.EmployerName : null)</p>
    }
    else
    {
        <p>@experience.Company.Name • @experience.EmploymentType @(experience.EmployerName != experience.Company.Name ? "• " + experience.EmployerName : null)</p>
    }
    </MudText>

    <MudText Typo="Typo.body2">
        @experience.StartDate.ToString("MMMM yyyy") - @(experience.EndDate?.ToString("MMMM yyyy") ??
    "Now") · @(((experience.EndDate ?? DateTime.Now.Date) - experience.StartDate).Humanize(minUnit:
    Humanizer.Localisation.TimeUnit.Month, maxUnit: Humanizer.Localisation.TimeUnit.Year, precision: 2))
    </MudText>
    <MudText Typo="Typo.body2">@(experience.Roles.FirstOrDefault()?.Location ?? experience.Location)</MudText>

    <MudText Typo="Typo.body1" Class="mt-4 mb-2">
        @{
            string description = experience.Roles.FirstOrDefault()?.Description 
                ?? experience.Description;
        }
        @((MarkupString)description?.Replace("\n", "<br />"))
    </MudText>

    <MudChipSet T="string" Class="mt-4">
        @foreach (var skill in experience.Skills)
    {
        <MudTooltip>
            <ChildContent>
                <MudChip T="string"  Size="Size.Small">@skill.Skill.Name</MudChip>
            </ChildContent>
            <TooltipContent>
                <MudText Typo="Typo.h6">@skill.Skill.Name</MudText>
                <MudText Typo="Typo.body2">@skill.Skill.Area.Name</MudText>
                @if (skill.Level is not null)
                {
                    <MudText Typo="Typo.body2">@skill.Level</MudText>
                }
                @if (skill.Comment is not null)
                {
                    <MudText Typo="Typo.body2">@skill.Comment</MudText>
                }
                @*
                    @if(skill.Link is not null)
                    {
                    <MudButton StartIcon="@Icons.Material.Filled.Link" Href="@skill.Link.Href">@skill.Link.Title</MudButton>
                    }
                *@
            </TooltipContent>
        </MudTooltip>
    }
    </MudChipSet>

    @code {
    [Parameter]
    [EditorRequired]
    public Obj Model { get; set; }

    [Parameter]
    public EventCallback<Experience> AddOrEditExperience { get; set; }

    [Parameter]
    public EventCallback<Experience> DeleteExperience { get; set; }
}