@page "/profiles/find"
@attribute [Authorize]
@layout BaseLayout
@using System.ComponentModel.DataAnnotations
@using YourBrand.Showroom.Persons.Profile
@inject IPersonProfilesClient PersonProfilesClient
@inject NavigationManager NavigationManager

<AppPageTitle>Find People</AppPageTitle>

<MudContainer Class="mt-16 mb-16" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-4">Find People</MudText>

    <MudGrid>

        <MudItem sm="12" md="9">

    <MudPaper Class="pa-4" Elevation="25">
        <MudTable @ref="table" T="PersonProfile" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
                Striped="true" OnRowClick="ItemOnClick">
            <ToolBarContent>
                <OrganizationSelector Value="Organization" ValueChanged="OnOrganizationChanged" For="() => Organization" />

                <MudSpacer />

                <CompetenceAreaSelector Value="CompetenceArea" ValueChanged="OnCompetenceAreaChanged" For="() => CompetenceArea" />

                <MudSpacer />

                <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel T="PersonProfile" SortLabel="FirstName">First Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="PersonProfile" SortLabel="LastName">Last Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="PersonProfile" SortLabel="DisplayName">Display Name</MudTableSortLabel></MudTh>
                @*<MudTh><MudTableSortLabel T="PersonProfile" SortLabel="Headline">Headline</MudTableSortLabel></MudTh>*@
                <MudTh><MudTableSortLabel T="PersonProfile" SortLabel="Industry">Industry</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="PersonProfile" SortLabel="CompetenceArea">Competence Area</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="PersonProfile" SortLabel="Organization">Organization</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <ProfileImage PersonProfile="context" Height="50" Width="50" />
                </MudTd>
                <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                <MudTd DataLabel="Display Name">@context.DisplayName</MudTd>
                @*<MudTd DataLabel="Headline">@context.Headline</MudTd>*@
                <MudTd DataLabel="Industry">@context.Industry?.Name</MudTd>
                <MudTd DataLabel="Competence Area">@context.CompetenceArea?.Name</MudTd>
                <MudTd DataLabel="Organization">@context.Organization?.Name</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>

    </MudItem>
        
        <MudItem sm="12" md="3">
            <MudExpansionPanels Class="mb-10" Elevation="25" MultiExpansion="true">
                <MudExpansionPanel Text="Industry" Class="pa-2" @bind-Expanded="industryVisible">
                    <IndustrySelector Label="Industry" Variant="Variant.Outlined" Value="Industry" ValueChanged="async (i) => { Industry = i; await OnSelectorUpdate(); }"  />
                </MudExpansionPanel>
            
                <MudExpansionPanel Text="Skills" Class="pa-2" @bind-Expanded="skillsVisible">
                    <SkillsSelector Model="Model" OnUpdated="OnSelectorUpdate" />
                </MudExpansionPanel>

                <MudExpansionPanel Text="Experiences" Class="pa-2" @bind-Expanded="experiencesVisible">
                    <ExperienceSelector Model="Model2" OnUpdated="OnSelectorUpdate" />
                </MudExpansionPanel>
            
            </MudExpansionPanels>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    bool industryVisible = true;
    bool skillsVisible = true;
    bool experiencesVisible = true;

    MudTable<PersonProfile> table; 
    string? searchString;

    public Industry? Industry { get; set; }
    public Organization? Organization { get; set; }
    public CompetenceArea? CompetenceArea { get; set; }

    public SkillSelectorVm Model { get; set; } = new SkillSelectorVm();

    public ExperienceSelectorVm Model2 { get; set; } = new ExperienceSelectorVm();

    async Task OnSelectorUpdate() 
    {
        await table.ReloadServerData();
    }

    private async Task<TableData<PersonProfile>> LoadData(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var query = new PersonProfileQuery {
                OrganizationId = Organization?.Id,
                CompetenceAreaId = CompetenceArea?.Id,
                SearchString = searchString,
                IndustryId = Industry?.Id,
                Skills = Model.Skills.Where(x => x.Selected).Select(s => new QuerySkill {
                    SkillId = s.Skill.Id,
                    Level = s.Level
                }).ToList(),
                Experiences = Model2.Industries.Where(x => x.Selected).Select(s => new QueryExperience {
                    Condition = ConditionalOperator.And,
                    IndustryId = s.Industry.Id,
                    Years = s.Years.GetValueOrDefault()
                }).ToList()
            };

            var results = await PersonProfilesClient.FindPersonProfilesAsync(state.Page + 1, state.PageSize, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Showroom.Client.SortDirection.Asc : YourBrand.Showroom.Client.SortDirection.Desc), query, cancellationToken);
            return new TableData<PersonProfile> { Items = results.Items, TotalItems = results.TotalCount };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }

        return new TableData<PersonProfile> { Items = Enumerable.Empty<PersonProfile>(), TotalItems = 0 };
    }

    private async Task ItemOnClick(TableRowClickEventArgs<PersonProfile> ev)
    {
        var item = ev.Item;

        NavigationManager.NavigateTo($"/Profiles/{item.Id}");
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnOrganizationChanged(Organization o)
    {
        Organization = o;
        table.ReloadServerData();
    }

    private async Task OnCompetenceAreaChanged(CompetenceArea ca)
    {
        CompetenceArea = ca;
        table.ReloadServerData();
    }
}