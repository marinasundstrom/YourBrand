<EditForm Model="@Model" OnValidSubmit="AddSkill">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <SkillSelector Variant="Variant.Outlined" @bind-Value="Model.Skill" For="() => Model.Skill" />

                <SkillLevelSelector Label="Skill level" Variant="Variant.Outlined" @bind-Value="Model.SkillLevel"
                           For="@(() => Model.SkillLevel)" Class="mt-4" />

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-4 mt-4 me-2">
                    Add skill
                </MudButton>
            </EditForm>

            <MudList T="string">
                @foreach (var skill in Model.Skills)
                {
                    <MudListItem Class="pa-0">
                        <div class="d-flex flex-grow-1 gap-1">
                            <MudCheckBox Dense="true" T="bool" Value="skill.Selected" ValueChanged="async (e) => { skill.Selected = e; await OnUpdated.InvokeAsync(); } " class="flex-1 d-flex" Label="@($"{skill.Skill.Name} ({skill.Level})")" />
                            <MudIconButton Class="flex-none" Icon="@Icons.Material.Filled.Remove" OnClick="() => RemoveSkill(skill)"></MudIconButton>
                        </div>
                    </MudListItem>
                }      
            </MudList>

@code {
    [Parameter]
    [EditorRequired]
    public SkillSelectorVm Model { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    async Task AddSkill() 
    {
        Model.AddSkill();

        await OnUpdated.InvokeAsync();
    }

    async Task RemoveSkill(SkillVM skill) 
    {
        Model.RemoveSkill(skill);

        await OnUpdated.InvokeAsync();
    }
}