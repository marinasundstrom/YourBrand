@using System.Linq.Expressions
@inject ICompaniesClient CompaniesClient
@inject IDialogService DialogService

<div class="d-flex flex-grow-1">
    <div class="flex-1 d-flex">
        <MudAutocomplete T="Company" Label="@Label" Dense="true" Variant="Variant" Style="@Style" Class="@Class" Value="Value" ValueChanged="ValueChanged"
            For="For" SearchFunc="SearchCompanies" ToStringFunc="(x) => x.Name"
            ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false">
            <ItemTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
                <MudText Typo="Typo.body2">@context2.Industry.Name</MudText>
            </ItemTemplate>

            <ItemSelectedTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
    </div>
    
    @if(ShowAddButton) 
    {
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddCompany" />
    }
</div>

@code {
    [Parameter]
    public string Label { get; set; } = "Company";

    [Parameter]
    public Company Value { get; set; }

    [Parameter]
    public EventCallback<Company> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<Company>> For { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public Variant Variant { get; set; }

    [Parameter]
    public int? IndustryId { get; set; }

    [Parameter]
    public bool ShowAddButton { get; set; }

    async Task<IEnumerable<Company>> SearchCompanies(string text, CancellationToken cancellationToken)
    {
        try
        {
            var results = await CompaniesClient.GetCompaniesAsync(1, 10, IndustryId, text, null, null, cancellationToken);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    async Task AddCompany() 
    {
        try
        {
            var parameters = new DialogParameters();

            var type = System.Reflection.Assembly.Load("Showroom.UI")
                .GetType("YourBrand.Showroom.Companies.CompanyDialog");

            var dialogReference = DialogService.Show(type, "New Company", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });

            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            Value = (Company)result.Data;

            await ValueChanged.InvokeAsync(Value);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}