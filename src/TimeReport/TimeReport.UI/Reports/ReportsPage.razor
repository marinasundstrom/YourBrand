@page "/reports"
@attribute [Authorize]
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IProjectsClient ProjectsClient
@inject IUsersClient UsersClient
@inject IReportsClient ReportsClient
@inject IJSRuntime JS

<AppPageTitle>Reports</AppPageTitle>

@if (projects is null)
{
    <LoadingIndicator />
}
else
{
    <MudText Typo="Typo.h3" GutterBottom="true">Reports</MudText>
    
    <MudCard Elevation="25">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudDateRangePicker Label="Time span" HelperText="Select a date range" @bind-DateRange="selectedDateRange" />

                    <MudSelect Label="Grouping" Class="mt-8" HelperText="Select grouping mode" @bind-Value="mode" ToStringFunc="x => x.ToString()">
                        <MudSelectItem Value="@ReportMode.Project">Project</MudSelectItem>
                        <MudSelectItem Value="@ReportMode.User">User</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">
                    <UserSelector ServiceKey="@ServiceKeys.UserSearchProviderKey" Label="User" Variant="Variant.Outlined" Value="user" ValueChanged="OnUserChanged"
                        For="() => user" Class="mb-4" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelect T="Project" Label="Projects" HelperText="Select projects" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options" ToStringFunc="x => x.Name">
                        @foreach (var project in projects)
                        {
                            <MudSelectItem Value="@project">@project.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect T="TimeSheetStatus" Label="Statuses" Class="mt-8" HelperText="Select statuses of timesheets to include" MultiSelection="true" @bind-SelectedValues="selectedStatuses" ToStringFunc="x => x.ToString()">
                        @foreach (var status in statuses)
                        {
                            <MudSelectItem Value="@status">@status.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateReport">Create Report</MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
}

@code
{
    const string AllLabel = "All";

    private bool isLoading = false;

    DateRange selectedDateRange = new DateRange(DateTime.Now.Date.AddMonths(-1), DateTime.Now.Date);

    private Portal.User? user { get; set; }

    private Project? value { get; set; }

    private IEnumerable<Project> options { get; set; } = new HashSet<Project>();

    private IEnumerable<Project>? projects = null;

    private TimeSheetStatus status { get; set; }

    private IEnumerable<TimeSheetStatus>? statuses = null;

    private IEnumerable<TimeSheetStatus> selectedStatuses { get; set; } = new HashSet<TimeSheetStatus>();

    private ReportMode mode = ReportMode.Project;

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    protected async Task OnUserChanged(Portal.User user)
    {
        this.user = user;

        var page = await ProjectsClient.GetProjectsAsync(Organization.Id, 0, 10, user?.Id, null, null, null);
        projects = page.Items;
        options = new HashSet<Project>();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            var page2 = await ProjectsClient.GetProjectsAsync(Organization.Id, 0, 10, null, null, null, null);
            projects = page2.Items;

            statuses = Enum.GetValues<TimeSheetStatus>().Select(x => (TimeSheetStatus)x);
            ((HashSet<TimeSheetStatus?>)selectedStatuses).Add(TimeSheetStatus.Approved);
        }
        catch (Exception e)
        {

        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateReport()
    {
        var fileResponse = await ReportsClient.GetReportAsync(Organization.Id, options.Select(x => x.Id), user?.Id, selectedDateRange.Start, selectedDateRange.End, selectedStatuses.Select(x => (int)x), mode);

        using var streamRef = new DotNetStreamReference(stream: fileResponse.Stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", "TimeReport.xlsx", streamRef);
    }
}