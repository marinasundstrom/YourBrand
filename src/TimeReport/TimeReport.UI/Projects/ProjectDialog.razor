@using System.ComponentModel.DataAnnotations
@inject IProjectsClient ProjectsClient
@inject IOrganizationProvider OrganizationProvider

@using Task = System.Threading.Tasks.Task
@using ProjectTask = YourBrand.TimeReport.Client.Task

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudTextField Label="Name" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Name" For="() => Name" />

            <OrganizationSelector ServiceKey="@ServiceKeys.OrganizationSearchProviderKey" Variant="Variant.Outlined" Class="mb-4" @bind-Value="organization" For="() => organization" />

            <MudTextField Lines="3" Label="Description" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Description" For="() => Description" />

        </DialogContent>

        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@(ProjectId is null ? "Create" : "Save changes")</MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    Portal.Organization? organization;

    [CascadingParameter] IMudDialogInstance Modal { get; set; }

    [Parameter] public string? ProjectId { get; set; }

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    [Required]
    public string Name { get; set; }

    public string? Description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(ProjectId is not null)
        {
            var result = await ProjectsClient.GetProjectAsync(Organization.Id, ProjectId);

            Name = result.Name;
            Description = result.Description;
            organization = result.Organization.ToOrganization();
        }
    }

    async Task OnSubmit()
    {
        Project? result = null;

        var organization = await OrganizationProvider.GetCurrentOrganizationAsync();

        if (ProjectId is null)
        {
            result = await ProjectsClient.CreateProjectAsync(Organization.Id, new CreateProject
            {
                Name = Name,
                Description = Description,
                OrganizationId = organization.Id
            });
        }
        else
        {
            result = await ProjectsClient.UpdateProjectAsync(Organization.Id, ProjectId, new UpdateProject
            {
                Name = Name,
                Description = Description,
                OrganizationId = organization.Id
            });
        }

        Modal.Close(DialogResult.Ok(result));
    }
}