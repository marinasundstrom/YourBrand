@page "/projects"
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IProjectsClient ProjectsClient
@using Task = System.Threading.Tasks.Task
@using ProjectTask = YourBrand.TimeReport.Client.Task

<AppPageTitle>Projects</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Projects</MudText>

<MudButton OnClick="BillProject" Variant="Variant.Filled" Color="Color.Default">Bill a project</MudButton>

<div class="mb-8">
    @if (statisticsSummary is not null)
    {
        <StatisticsSummaryView Entries="statisticsSummary.Entries" />
    }
    else 
    {
        <LoadingIndicator />
    }
</div>

<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnNewProjectClicked">New project</MudButton>

<MudTable T="Project" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<Project>>>(ServerReload))"
          Hover="true" @ref="table" OnRowClick="(TableRowClickEventArgs<Project> project) => GotToProject(project.Item)" Class="mt-4 mb-4" Elevation="25">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" DebounceInterval="500"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="Project" SortLabel="Name">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Project" SortLabel="Description">Description</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="project">
        <MudTd DataLabel="Name">@project.Name</MudTd>
        <MudTd DataLabel="Description">@project.Description</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditProjectClicked(project)" />
            @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudPaper Class="pa-16" Elevation="25">
    @if (data is not null)
    {
        <MudText Typo="Typo.h6" GutterBottom="true">Project hours per month</MudText>

        <MudChart Class="mt-8" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
    }
    else 
    {
        <LoadingIndicator />
    }
</MudPaper>

@code {
    MudTable<Project> table;
    StatisticsSummary statisticsSummary;
    string searchString;

    Data? data;

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    private ChartOptions options = new ChartOptions()
    {
        YAxisFormat = "0 h",
        YAxisTicks = 10
    };
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = new string[0];

    protected override async Task OnInitializedAsync()
    {
        data = await ProjectsClient.GetStatisticsAsync(Organization.Id, null, null);

        XAxisLabels = data.Labels.ToArray();

        foreach (var d in data.Series)
        {
            Series.Add(new ChartSeries() { Name = d.Name, Data = d.Data.Select(x => (double)x).ToArray() });
        }

        statisticsSummary = await ProjectsClient.GetStatisticsSummaryAsync(Organization.Id);
    }

    private async Task<TableData<Project>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        var page = await ProjectsClient.GetProjectsAsync(Organization.Id, state.Page, state.PageSize, null, searchString,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc, cancellationToken);

        return new TableData<Project>() { TotalItems = page.TotalItems, Items = page.Items };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void GotToProject(Project project)
    {
        NavigationManager.NavigateTo($"/projects/{project.Id}");
    }

    private async Task OnNewProjectClicked()
    {
        DialogParameters parameters = new();
        //parameters.Add(nameof(ProjectDialog.Organization), Organization);

        var dialogRef = await DialogService.ShowAsync<ProjectDialog>("New project", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table.ReloadServerData();
    }

    private async Task OnEditProjectClicked(Project project)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ProjectDialog.ProjectId), project.Id);
        //parameters.Add(nameof(ProjectDialog.Organization), Organization);

        var dialogRef = await DialogService.ShowAsync<ProjectDialog>($"Edit {project.Name}", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        searchString = null;
        table.ReloadServerData();
    }

    private async Task BillProject() 
    {
        var dialogReference = await DialogService.ShowAsync<BillProjectDialog>("Bill project");
        var result = await dialogReference.Result;

        if (result.Canceled)
            return;
    }
}
