@page "/projects/{projectId}"
@attribute [Authorize]
@using TimeReport.Projects.Tasks
@using TimeReport.Projects.Expenses
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITasksClient TasksClient
@inject IProjectsClient ProjectsClient
@inject IExpensesClient ExpensesClient

@using Task = System.Threading.Tasks.Task
@using ProjectTask = YourBrand.TimeReport.Client.Task


@if (project is null)
{
    <LoadingIndicator />
}
else
{
    <AppPageTitle>@project.Name</AppPageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true">@project.Name</MudText>

    <div class="mb-8">
        @if (statisticsSummary is not null)
        {
            <StatisticsSummaryView Entries="statisticsSummary.Entries" />
        }
    </div>

    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-6">Tasks</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnNewTaskClicked">New task</MudButton>

    <MudTable T="ProjectTask" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ProjectTask>>>(ServerReload))"
              Hover="true" @ref="table" Class="mt-4" Elevation="25">
        <HeaderContent>
            <MudTh><MudTableSortLabel T="Task" SortLabel="Name">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Task" SortLabel="Description">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Task" SortLabel="TaskType">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Task" SortLabel="HourlyRate">Hourly Rate</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="task">
            <MudTd DataLabel="Name">@task.Name</MudTd>
            <MudTd DataLabel="Description">@task.Description</MudTd>
            <MudTd DataLabel="Type">@task.TaskType.Name</MudTd>
            <MudTd DataLabel="Hourly Rate">@task.HourlyRate?.FormatCurrency(currency)</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditTaskClicked(task)" />
                @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-6">Expenses</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnAddExpenseClicked">New expense</MudButton>

    <MudTable T="Expense" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<Expense>>>(ServerReload3))"
              Hover="true" @ref="table3" Class="mt-4 mb-2" OnRowClick="e => GotToExpense(e.Item)" Elevation="25">
        <HeaderContent>
            <MudTh><MudTableSortLabel T="Expense" SortLabel="Date">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Expense" SortLabel="Description">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="Expense" SortLabel="Amount">Amount</MudTableSortLabel></MudTh>
            <MudTh>Attachment</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="expense">
            <MudTd DataLabel="Name">@expense.Date.Date.ToShortDateString()</MudTd>
            <MudTd DataLabel="Description">@expense.Description</MudTd>
            <MudTd DataLabel="Amount">@expense.Amount.FormatCurrency(currency)</MudTd>
            <MudTd DataLabel="Attachment">
                @if (expense.Attachment is not null)
                {
                    <MudLink Href="@expense.Attachment">File</MudLink>
                }
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditExpenseClicked(expense)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteExpense(expense)" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-6">Members</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnAddMembershipClicked">New member</MudButton>

    <MudTable T="ProjectMembership" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ProjectMembership>>>(ServerReload2))"
              Hover="true" @ref="table2" Class="mt-4 mb-2" OnRowClick="e => GotToMember(e.Item)" Elevation="25">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="membership">
            <MudTd DataLabel="Name">@membership.User?.GetDisplayName()</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditMembershipClicked(membership)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteMembership(membership)" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <MudPaper Class="pa-16 ma-2 mt-4" Elevation="25">
        @if (Series is null) 
        {
            <LoadingIndicator />
        }
        else 
        {
            <MudText Typo="Typo.h6" GutterBottom="true">Task hours per month</MudText>

            <MudChart Class="mt-8" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
        }
    </MudPaper>
}

@code {
    string currency = "SEK";
    Project? project;
    Data? data;
    MudTable<ProjectTask> table;
    MudTable<ProjectMembership> table2;
    MudTable<Expense> table3;
    StatisticsSummary statisticsSummary;

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    private ChartOptions options = new ChartOptions()
    {
        YAxisFormat = "0 h",
        YAxisTicks = 10
    };
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = new string[0];

    [Parameter]
    public string ProjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        project = await ProjectsClient.GetProjectAsync(Organization.Id, ProjectId);
        data = await ProjectsClient.GetProjectStatisticsAsync(Organization.Id, ProjectId, null, null);

        XAxisLabels = data.Labels.ToArray();

        foreach (var d in data.Series)
        {
            Series.Add(new ChartSeries() { Name = d.Name, Data = d.Data.Select(x => (double)x).ToArray() });
        }

        statisticsSummary = await ProjectsClient.GetStatisticsSummary2Async(Organization.Id, ProjectId);
    }

    private async Task<TableData<ProjectTask>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        var result = await TasksClient.GetTasksAsync(Organization.Id, state.Page, state.PageSize, ProjectId, null, null,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc, cancellationToken);

        return new TableData<ProjectTask>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    private async Task<TableData<ProjectMembership>> ServerReload2(TableState state, CancellationToken cancellationToken)
    {
        var result = await ProjectsClient.GetProjectMembershipsAsync(Organization.Id, ProjectId, state.Page, state.PageSize,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc, cancellationToken);

        return new TableData<ProjectMembership>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    private async Task<TableData<Expense>> ServerReload3(TableState state, CancellationToken cancellationToken)
    {
        var result = await ExpensesClient.GetExpensesAsync(Organization.Id, state.Page, state.PageSize, ProjectId, null,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc, cancellationToken);

        return new TableData<Expense>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    private async Task OnNewTaskClicked()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(TaskDialog.ProjectId), project.Id);

        var dialogRef = await DialogService.ShowAsync<TaskDialog>("New task", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table.ReloadServerData();
    }

    private async Task OnEditTaskClicked(ProjectTask task)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(TaskDialog.TaskId), task.Id);

        var dialogRef = await DialogService.ShowAsync<TaskDialog>($"Edit {task.Name}", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table.ReloadServerData();
    }

    private async Task OnAddMembershipClicked()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(MembershipDialog.ProjectId), project.Id);

        var dialogRef = await DialogService.ShowAsync<MembershipDialog>("New membership", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table2.ReloadServerData();
    }

    private async Task OnEditMembershipClicked(ProjectMembership membership)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(MembershipDialog.ProjectId), membership.Project.Id);
        parameters.Add(nameof(MembershipDialog.MembershipId), membership.Id);

        var dialogRef = await DialogService.ShowAsync<MembershipDialog>($"Edit membership", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table2.ReloadServerData();
    }

    async System.Threading.Tasks.Task DeleteMembership(ProjectMembership membership)
    {
        var modalResult = await DialogService.ShowMessageBox($"Revoke the membership for {membership.User.FirstName}?", "If you regret it, you can just add the user back later.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProjectsClient.DeleteProjectMembershipAsync(Organization.Id, ProjectId, membership.Id);

        table2.ReloadServerData();
    }

    private void GotToMember(ProjectMembership membership)
    {
        NavigationManager.NavigateTo($"/users/{membership.User.Id}");
    }

    private async System.Threading.Tasks.Task OnAddExpenseClicked()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ExpenseDialog.ProjectId), project.Id);

        var dialogRef = await DialogService.ShowAsync<ExpenseDialog>("New expense", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table3.ReloadServerData();

        statisticsSummary = await ProjectsClient.GetStatisticsSummaryAsync(Organization.Id);
    }

    private async System.Threading.Tasks.Task OnEditExpenseClicked(Expense expense)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ExpenseDialog.ProjectId), expense.Project.Id);
        parameters.Add(nameof(ExpenseDialog.ExpenseId), expense.Id);

        var dialogRef = await DialogService.ShowAsync<ExpenseDialog>($"Edit expense", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        table3.ReloadServerData();

        statisticsSummary = await ProjectsClient.GetStatisticsSummaryAsync(Organization.Id);
    }

    async Task DeleteExpense(Expense expense)
    {
        var modalResult = await DialogService.ShowMessageBox($"Delete the expense?", "This cannot be undone.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ExpensesClient.DeleteExpenseAsync(Organization.Id, expense.Id);

        table3.ReloadServerData();

        statisticsSummary = await ProjectsClient.GetStatisticsSummaryAsync(Organization.Id);
    }

    private void GotToExpense(Expense expense)
    {
        //NavigationManager.NavigateTo($"/users/{membership.User.Id}");
    }
}
