@using System.ComponentModel.DataAnnotations
@inject ITeamsClient TeamsClient
@inject IUsersClient UsersClient

@using Task = System.Threading.Tasks.Task
@using ProjectTask = YourBrand.TimeReport.Client.Task

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            @*@if (MembershipId is null)
            {*@

            <UserSelector ServiceKey="@ServiceKeys.UserSearchProviderKey" Label="User" Variant="Variant.Outlined"
                @bind-Value="User"                        For="() => User" Class="mb-4" />
            @*}*@
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>

            @* @(MembershipId is null ? "Create" : "Save changes") *@
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    [CascadingParameter] IMudDialogInstance Modal { get; set; }

    [Parameter] public string? TeamId { get; set; }

    //[Parameter] public string? MembershipId { get; set; }

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    [Required]
    public Portal.User User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(TeamId);

        /*
        if (MembershipId is not null)
        {
            var result = await TeamsClient.GetMemberAsync(TeamId, UserId);

            User = result.User;
        }
        */
    }

    async Task OnSubmit()
    {
        ProjectMembership? result = null;

        /* if (MembershipId is null)
        { */

        await TeamsClient.AddMemberAsync(Organization.Id, TeamId, new AddMember {
            UserId = User.Id
        });

        /* }
         else
         {
             result = await TeamsClient.UpdateProjectMembershipAsync(TeamId, UserId, new UpdateProjectMembership());
         } */

        Modal.Close(DialogResult.Ok(result));
    }
}