@* @page "/teams" *@

@* @attribute [Authorize(Roles = "Administrator,Manager")] *@
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITeamsClient TeamsClient
@inject IUsersClient UsersClient

@using Task = System.Threading.Tasks.Task
@using ProjectTask = YourBrand.TimeReport.Client.Task

<AppPageTitle>Teams</AppPageTitle>

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

<MudText Typo="Typo.h3" GutterBottom="true">Teams</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnNewTeamClicked">New Team</MudButton>

<MudTable T="Team" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<Team>>>(ServerReload))"
          Hover="true" @ref="table" Class="mt-4" OnRowClick="(e) => GotToTeam(e.Item)" Elevation="25">
    <ToolBarContent>
        <UserSelector ServiceKey="@ServiceKeys.UserSearchProviderKey" Label="User" Variant="Variant.Outlined"
            Value="User" ValueChanged="OnUserChanged"                        For="() => User" Class="mb-4" />
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" DebounceInterval="500"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="Team" SortLabel="Name">Name</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate Context="team">
        <MudTd DataLabel="Name">@team.Name</MudTd>
        <MudTd>
            @* <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditTeamClicked(timeSheet)" /> *@
            @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    MudTable<Team> table;
    string searchString;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();

    Portal.User? User { get; set; }

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _items.AddRange(new[] {
            new BreadcrumbItem("Teams", href: "/teams", disabled: true),
        });
    }

    private async Task<TableData<Team>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        var page = await TeamsClient.GetTeamsAsync(Organization.Id, state.Page, state.PageSize, /* null,  User?.Id, */ searchString,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc, cancellationToken);

        return new TableData<Team>() { TotalItems = page.TotalItems, Items = page.Items };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    void OnUserChanged(Portal.User user)
    {
        User = user;

        table.ReloadServerData();
    }

    private void GotToTeam(Team team)
    {
        NavigationManager.NavigateTo($"/teams/{team.Id}");
    }

    private async Task OnNewTeamClicked()
    {
        var dialogRef = await DialogService.ShowAsync<TeamDialog>("New Team");

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        searchString = null;
        table.ReloadServerData();
    }

    private async Task OnEditTeamClicked(Team timeSheet)
    {
        /*
    DialogParameters parameters = new();
    parameters.Add(nameof(TimeSheetDialog.TimeSheetId), timeSheet.Id);

    var dialogRef = await DialogService.ShowAsync<TimeSheetDialog>($"Edit {timeSheet.FirstName}", parameters);

    var dialogResult = await dialogRef.Result;

    if (dialogResult.Canceled)
        return;

    table.ReloadServerData();
        */
    }
}
