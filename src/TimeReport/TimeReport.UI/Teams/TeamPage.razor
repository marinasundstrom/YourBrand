@* @page "/teams/{Id}" *@

@* @attribute [Authorize(Roles = "Administrator,Manager")] *@
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITeamsClient TeamsClient
@inject IUsersClient UsersClient

<AppPageTitle>Teams</AppPageTitle>

@if (Team is not null)
{
    <AppPageTitle>@Team.Name</AppPageTitle>

    <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>

    <MudText Typo="Typo.h3" GutterBottom="true">@Team.Name</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnAddMemberClicked">Add member</MudButton>

    <MudTable T="TeamMembership" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<TeamMembership>>>(ServerReload))"
              Hover="true" @ref="table" Class="mt-4" OnRowClick="(e) => GotToMember(e.Item)" Elevation="25">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" DebounceInterval="500"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="TeamMembership" SortLabel="Name">Name</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate Context="membership">
            <MudTd DataLabel="Name">@membership.User.FirstName @membership.User.LastName</MudTd>
            <MudTd>
                @* <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditTeamClicked(timeSheet)" /> *@
                @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    MudTable<TeamMembership> table;
    string searchString;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization? Organization { get; set; }

    [Parameter] public string Id { get; set; } = null!;

    Team? Team { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Team = await TeamsClient.GetTeamAsync(Organization.Id, Id);

        _items.AddRange(new[] {
            new BreadcrumbItem("Teams", href: "/teams"),
            new BreadcrumbItem(Team.Name, href: "", disabled: true)
        });
    }

    private async Task<TableData<TeamMembership>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        var page = await TeamsClient.GetMembershipsAsync(Organization.Id, Id, state.Page, state.PageSize, /* null,  User?.Id, */ searchString,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc, cancellationToken);

        return new TableData<TeamMembership>() { TotalItems = page.TotalItems, Items = page.Items };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnAddMemberClicked()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(MembershipDialog.TeamId), Id);

        var dialogRef = DialogService.Show<MembershipDialog>("New membership", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        await table.ReloadServerData();
    }

    private async Task OnEditMembershipClicked(ProjectMembership membership)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(MembershipDialog.TeamId), Id);
        //parameters.Add(nameof(MembershipDialog.MembershipId), membership.Id);

        var dialogRef = DialogService.Show<MembershipDialog>($"Edit membership", parameters);

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Canceled)
            return;

        await table.ReloadServerData();
    }

    async Task DeleteMembership(ProjectMembership membership)
    {
        var modalResult = await DialogService.ShowMessageBox($"Remove the membership for {membership.User.FirstName}?", "If you regret it, you can just add the user back later.", yesText: "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await TeamsClient.RemoveMemberAsync(Organization.Id, Id, membership.Id);

        await table.ReloadServerData();
    }

    private void GotToMember(TeamMembership membership)
    {
        NavigationManager.NavigateTo($"/teams/{membership.Id}/{membership.User.Id}");
    }
}
