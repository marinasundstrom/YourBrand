@attribute [Route(PageRoutes.Register)]
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@using BlazorApp.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

<AppPageTitle>Register</AppPageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Model" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" @bind-Value="Model.Username" class="form-control" />
                <ValidationMessage For="() => Model.Username" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText type="password" id="genre" @bind-Value="Model.Password" class="form-control" />
                <ValidationMessage For="() => Model.Password" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@if(errors.Count == 1) 
{
    <ul class="text-danger mt-4">
        @foreach (var error in errors)
        {
            <li>
                @error
            </li>
        }
    </ul>
}

@code {

    [SupplyParameterFromForm]
    public RegisterModel Model { get; set; } = new();

    private List<string> errors = new ();

    public async Task RegisterUser()
    {
        var user = new IdentityUser { UserName = Model.Username, Email = Model.Username };
        var result = await UserManager.CreateAsync(user, Model.Password!);
        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");

            await SignInManager.SignInAsync(user, isPersistent: true);

            Logger.LogInformation("User signed in.");

            NavigationManager.NavigateTo(@PageRoutes.Profile);
            return;
        }
        foreach (var error in result.Errors)
        {
            errors.Clear();
            errors.Add(error.Description);
        }
    }

    public class RegisterModel 
    {
        [Required]
        public string? Username { get; set; }

        [Required]
        public string? Password { get; set; }
    }
}