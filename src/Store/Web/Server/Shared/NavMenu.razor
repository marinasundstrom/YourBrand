@using BlazorApp.Authentication
@using BlazorApp.Cart
@using Client.Cart
@using BlazorApp.ProductCategories
@implements IDisposable
@inject IProductCategoryService ProductCategoryService
@inject NavigationManager NavigationManager
@inject PersistentComponentState ApplicationState

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  <symbol id="check2" viewBox="0 0 16 16">
    <path
      d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
  </symbol>
  <symbol id="circle-half" viewBox="0 0 16 16">
    <path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z" />
  </symbol>
  <symbol id="moon-stars-fill" viewBox="0 0 16 16">
    <path
      d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z" />
    <path
      d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z" />
  </symbol>
  <symbol id="sun-fill" viewBox="0 0 16 16">
    <path
      d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z" />
  </symbol>
</svg>

<nav class="navbar navbar-expand-lg fixed-top navbar-light bg-white shadow-sm">
  <div class="container flex-wrap flex-md-nowrap" aria-label="Main navigation">
    <div>
      <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar"
        aria-controls="offcanvasNavbar">
        <span class="navbar-toggler-icon"></span>
      </button>
      <a class="navbar-brand ms-2" href="@PageRoutes.Home">
        <h5 style="display: inline">
          <img src="/logo.svg" class="me-1" alt="Your Brand" />
        </h5>
      </a>
    </div>

    <div class="offcanvas offcanvas-start navbar-light bg-white" id="offcanvasNavbar"
      aria-labelledby="offcanvasNavbarLabel">
      <div class="offcanvas-header text-light">
        <h5 class="offcanvas-title" id="offcanvasNavbarLabel">
          <img src="/logo.svg" class="me-1 mb-1" alt="YourBrand" /> YourBrand
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body">
        <ul class="navbar-nav justify-content-start flex-grow-1 gap-md-2 pe-3">
          <li class="nav-item">
            <NavLink class="nav-link" href="@PageRoutes.Home" Match="NavLinkMatch.All">
              Home
            </NavLink>
          </li>

          @foreach (var category in categoryTree?.Categories ?? Array.Empty<ProductCategoryTreeNodeDto>())
          {
            if (category.SubCategories.Any())
            {
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"
                  href="@PageRoutes.Category.Replace("{*path}", category.Path)">
                  @category.Name
                </a>
                <ul class="dropdown-menu bg-white">
                  @foreach (var subCategory in category.SubCategories)
                  {
                    <li><a class="dropdown-item"
                        href="@PageRoutes.Category.Replace("{*path}", subCategory.Path)">@subCategory.Name</a></li>
                  }
                </ul>
              </li>
            }
            else
            {
              <li class="nav-item">
                <NavLink class="nav-link" href="@PageRoutes.Category.Replace("{*path}", category.Path)">
                  @category.Name
                </NavLink>
              </li>
            }
          }
        </ul>
        <hr class="d-md-none text-white-50">
        <ul class="navbar-nav gap-md-2 flex-row flex-wrap ms-md-auto">
          <LoginDisplay />
          <li id="fullNav" class="nav-item col-6 col-md-auto d-none d-lg-flex">
            <div id="cartDisplay">
              <CartDisplay data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight" />
            </div>
          </li>
          <ColorModeDisplay />
        </ul>
      </div>
    </div>

    <ul class="navbar-nav list-inline mb-0 d-inline-block d-lg-none">
      <li class="list-inline-item"> <a class="nav-link menu-link me-3 text-decoration-none text-uppercase"
          href="search">
          <i class="bi bi-search"></i>
        </a></li>

      <li class="list-inline-item"> <a class="nav-link menu-link me-3 text-decoration-none text-uppercase"
          href="user/profile">
          <i class="bi bi-person"></i>
        </a></li>

      <li class="list-inline-item">
        <div id="mobileNav" class="menu-link me-3 text-decoration-none text-uppercase">
        </div>
      </li>
    </ul>
  </div>
</nav>

<CartOffCanvas />

@code
{
  PersistingComponentStateSubscription persistingSubscription;
  ProductCategoryTreeRootDto? categoryTree;

  protected override async Task OnInitializedAsync()
  {

    persistingSubscription =
    ApplicationState.RegisterOnPersisting(PersistData);

    if (!ApplicationState.TryTakeFromJson<BlazorApp.ProductCategories.ProductCategoryTreeRootDto>(
    "categoryTree", out var restored))
    {
      categoryTree = await ProductCategoryService.GetProductCategoryTree();
    }
    else
    {
      categoryTree = restored!;
    }
  }

  private Task PersistData()
  {
    ApplicationState.PersistAsJson("categoryTree", categoryTree);

    return Task.CompletedTask;
  }

  void IDisposable.Dispose()
  {
    persistingSubscription.Dispose();
  }
}