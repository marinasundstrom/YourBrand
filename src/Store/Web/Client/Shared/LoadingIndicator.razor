@implements IDisposable

@if(_visible)
{
    <Spinner />
}

@code 
{
    CancellationTokenSource cts = new ();

    bool _visible = false;
    bool _error = false;

    [Parameter]
    public int Timeout { get; set; } = 600;

    protected override async Task OnInitializedAsync() 
    {
        try 
        {
            if(Timeout > 0) 
            {
                await Task.Delay(Timeout).ContinueWith(async (task) => {
                        _visible = true;
                        await InvokeAsync(StateHasChanged);
                    }, cts.Token);
            }
            else
            {
                _visible = true;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch(TaskCanceledException)
        {

        }
        catch
        {
            _error = true;
        }
    }

    public void Dispose() 
    {
        cts.Cancel();
        _visible = false;
    }
}