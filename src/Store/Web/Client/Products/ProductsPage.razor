@attribute [Route(PageRoutes.Category)]
@attribute [StreamRendering(false)]
@using YourBrand.StoreFront
@using BlazorApp.Products
@using BlazorApp.ProductCategories
@using BlazorApp.Brands
@using Product = BlazorApp.Products.Product
@using Brand = BlazorApp.Brands.Brand
@using Client.Analytics
@rendermode RenderMode.InteractiveAuto
@implements IDisposable
@inject IProductsService ProductsService
@inject IProductCategoryService ProductCategoryService
@inject IBrandsService BrandsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject RenderingContext RenderingContext
@inject AnalyticsService AnalyticsService


<AppPageTitle>@categoryName</AppPageTitle>


<div class="row gx-5 pt-md-4">

    <div class="col-md-3 d-none d-lg-block">

    </div>

    <div class="col-md-9 col-sm-md-12">
        <h1>@categoryName</h1>

        <p class="d-none d-lg-block mb-5">@categoryDescription</p>
    </div>

    <div class="mb-4 d-xs-block d-sm-block d-sm-md-block d-md-none">
        <div class="d-flex">
            <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Search..."
                @bind:event="oninput" @bind:get="SearchTerm" @bind:set="OnSearchTermChanged"></input>

            <button class="btn btn-primary">Filter</button>
        </div>
    </div>

    <div class="col-md-3 d-none d-lg-block">
        <div class="card mb-4">
            <div class="card-body">
                <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Search..."
                    @bind:event="oninput" @bind:get="SearchTerm" @bind:set="OnSearchTermChanged"></input>
            </div>
        </div>

        <div class="d-none d-lg-block">
            <div class="accordion mb-4" id="accordionExample">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingTwo">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                            Categories
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse show" aria-labelledby="headingTwo">
                        <div class="accordion-body">
                            <Client.ProductCategories.CategoriesView OnClick="OnItemClicked" />
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingThree">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseThree" aria-expanded="true" aria-controls="collapseThree">
                            Brands
                        </button>
                    </h2>
                    <div id="collapseThree" class="accordion-collapse collapse show" aria-labelledby="headingThree">
                        <div class="accordion-body">
                            @foreach (var brand in (brands ?? Array.Empty<Brand>()))
                            {
                                <div>
                                    <span href="#" class="text-decoration-none text-reset" style="cursor: pointer;"
                                        @onclick:preventDefault
                                        @onclick="async () => await OnBrandChanged(brand)">@brand.Name</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            Filters
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne">
                        <div class="accordion-body">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value=""
                                    id="flexCheckIndeterminateDisabled" disabled>
                                <label class="form-check-label" for="flexCheckIndeterminateDisabled">
                                    Disabled indeterminate checkbox
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckDisabled"
                                    disabled>
                                <label class="form-check-label" for="flexCheckDisabled">
                                    Disabled checkbox
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckCheckedDisabled"
                                    checked disabled>
                                <label class="form-check-label" for="flexCheckCheckedDisabled">
                                    Disabled checked checkbox
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div>
                <button class="btn btn-secondary float-end">Apply</button>
            </div>
        </div>
    </div>

    <div class="col-md-9 col-sm-md-12">

        <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3 gx-4 gy-4 gx-md-5 gy-md-5 ">

            @if(products is not null) 
            {
                foreach (var product in products)
                {
                    <ProductView @key="product.Id" Product="product" />
                }
            }

        </div>

        <Pagination Page="Page.GetValueOrDefault()" PageCount="pageCount.GetValueOrDefault()" Href="/categories" PageChanged="OnPageChanged"
            class="mt-5" />
    </div>
</div>

@code
{
    bool loading = false;
    bool error = false;
    long? categoryId = null;
    string? categoryName = null;
    string? categoryDescription = null;


    [Parameter]
    public int? Page { get; set; } = 1;

    [Parameter]
    public int? PageSize { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; }

    [Parameter]
    public string? Path { get; set; }

    [Parameter]
    public string? BrandId { get; set; }

    [SupplyParameterFromPersistentComponentState]
    public ICollection<BlazorApp.Products.Product> products { get; set; }

    [SupplyParameterFromPersistentComponentState]
    public IEnumerable<BlazorApp.Brands.Brand> brands { get; set; }

    [SupplyParameterFromPersistentComponentState]
    public BlazorApp.ProductCategories.ProductCategoryDto? category { get; set; }

    [SupplyParameterFromPersistentComponentState]
    public int? pageCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        if (!string.IsNullOrEmpty(Path))
        {
            category ??= await ProductCategoryService.GetProductCategoryById(Path);

            categoryId = category.Id;
            categoryName = category.Name;
            categoryDescription = category.Description;
        }

            brands ??= (await BrandsService.GetBrands(Path, null, null, null)).Items;

        //await FetchItems(Page.GetValueOrDefault());

         await FetchItems(Page.GetValueOrDefault());

        if (!RenderingContext.IsPrerendering)
        {
            _ = ProductGroupViewed(category!);
        }
    }

    private async Task ProductGroupViewed(ProductCategoryDto category)
    {
        await AnalyticsService.RegisterEvent(new YourBrand.StoreFront.EventData
        {
            EventType = YourBrand.StoreFront.EventType.ProductGroupViewed,
            Data = new Dictionary<string, object>
{
{ "productCategoryId", category!.Id },
{ "name", /* GetGroupName() ?? */ category.Name }
}
        });
    }

    /*
    private string? GetGroupName()
    {
    return subGroups.FirstOrDefault(x => x.Path == Path)?.Name;
    }
    */

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs eventArgs)
    {
        // TODO: Wait for fix

        //Console.WriteLine("Foo: " + Path);

        //Page = 1;

        //await FetchItems(Page.GetValueOrDefault());

        //_ = ProductGroupViewed(category!);
    }

    private async Task OnPageChanged(int page)
    {
        Page = page;

        await FetchItems(page);

        NavigationManager.NavigateTo($"/categories?page={Page}", replace: true);

        await ScrollToTop();
    }

    async Task ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    CancellationTokenSource cts = new();
    Task? task;

    private void OnSearchTermChanged(string value)
    {
        Path = null; // Temp;

        SearchTerm = value;
        Page = 1;

        if (task is not null)
        {
            cts.Cancel();
            cts = new();
        }

        task = Task.Delay(400).ContinueWith(async t =>
        {
            if (cts.IsCancellationRequested)
            {
                return;
            }

            await FetchItems(Page.GetValueOrDefault(), cts.Token);
            NavigationManager.NavigateTo($"/categories?page={Page}&searchTerm={SearchTerm}", replace: true);

            categoryName = null;
            categoryDescription = null;

            StateHasChanged();

            task = null;
        }, cts.Token);
    }

    private async Task FetchItems(int page, CancellationToken cancellationToken = default)
    {
        error = false;
        loading = true;

        //await InvokeAsync(StateHasChanged);

        try
        {
            var pageSize = PageSize ?? 10;

            var pagedResult = await ProductsService.GetProducts(BrandId, page, pageSize, SearchTerm, Path,
            cancellationToken);

            products = pagedResult.Items.ToList();
            pageCount = (int)Math.Ceiling((float)pagedResult.Total / (float)pageSize);
        }
        catch
        {
            error = true;
        }
        finally
        {
            loading = false;
        }

        //await InvokeAsync(StateHasChanged);
    }

    private async Task OnItemClicked(ProductCategoryTreeNodeDto node)
    {
        categoryName = node.Name;
        categoryDescription = node.Description;

        Path = node.Path;
        await FetchItems(1);
        NavigationManager.NavigateTo($"/categories/{node.Path}", replace: true);

        // TODO: Set title to node.Name using JS
    }

    private async Task OnBrandChanged(Brand brand)
    {
        BrandId = brand.Id.ToString();
        await FetchItems(1);
        NavigationManager.NavigateTo($"/categories/{Path}?brand={BrandId}", replace: true);

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}