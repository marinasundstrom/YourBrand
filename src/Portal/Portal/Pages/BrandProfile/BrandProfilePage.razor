@page "/brandprofile"
@using YourBrand.AppService.Client
@using YourBrand.Portal.Theming
@attribute [Authorize]
@inject IStringLocalizer<BrandProfilePage> T
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IBrandProfileClient BrandProfileClient
@inject IDialogService DialogService
@inject IThemeManager ThemeManager

<AppPageTitle>@T["BrandProfile"]</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@T["BrandProfile"]</MudText>

@if (brandProfile is not null) 
{
    <MudTabs Elevation="25" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Light">
        <EditForm Model="brandProfile.Theme.Colors.Light">
                <BrandColorPaletteView ColorPalette="brandProfile.Theme.Colors.Light" />
            </EditForm>
        </MudTabPanel>

        <MudTabPanel Text="Dark">
            <EditForm Model="brandProfile.Theme.Colors.Dark">
                <BrandColorPaletteView ColorPalette="brandProfile.Theme.Colors.Dark" />
            </EditForm>
        </MudTabPanel>
    </MudTabs>

    <MudButton OnClick="Save" Variant="Variant.Filled" Class="mt-4">Save</MudButton>
}

@code {
    BrandProfile? brandProfile;

    protected override async Task OnInitializedAsync() 
    {
        brandProfile = await BrandProfileClient.GetBrandProfileAsync();
    }

    async Task Save() 
    {
        var brandProfile2 = await BrandProfileClient.UpdateBrandProfileAsync(
            new UpdateBrandProfileRequest {
                Name = brandProfile.Name, 
                Description = brandProfile.Description,
                Theme = brandProfile.Theme 
            });

        var theme = BrandProfileToThemeConverter.Convert(brandProfile2);

        ThemeManager.SetTheme(theme);
    }
}