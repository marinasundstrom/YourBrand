@page "/brandprofile"
@using YourBrand.AppService
@using YourBrand.AppService.Client
@using YourBrand.Portal.Theming
@attribute [Authorize]
@inject IStringLocalizer<BrandProfilePage> T
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IBrandProfileClient BrandProfileClient
@inject IDialogService DialogService
@inject IThemeManager ThemeManager
@inject IThemesClient ThemesClient
@inject IJSRuntime JS


<AppPageTitle>@T["BrandProfile"]</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@T["BrandProfile"]</MudText>

<ThemeSelector Label="Active theme" Class="mb-16" Value="brandProfile?.Theme" ValueChanged="ThemeChanged" ShowCopyButton="true" />

<div class="d-flex mt-4 mb-4">
    <MudButton OnClick="ExportTheme" Variant="Variant.Filled" Class="me-4">Export theme</MudButton>

    <MudFileUpload T="IBrowserFile" FilesChanged="ImportTheme">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                Import theme
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
</div>

@if (brandProfile is not null) 
{
    <MudTabs Elevation="25" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Light">
            <EditForm Model="brandProfile.Theme.ColorSchemes.Light">
                <BrandColorPaletteView ColorScheme="brandProfile.Theme.ColorSchemes.Light" />
            </EditForm>
        </MudTabPanel>

        <MudTabPanel Text="Dark">
            <EditForm Model="brandProfile.Theme.ColorSchemes.Dark">
                <BrandColorPaletteView ColorScheme="brandProfile.Theme.ColorSchemes.Dark" />
            </EditForm>
        </MudTabPanel>
    </MudTabs>

    <MudExpansionPanels Class="mt-8 mb-8">
        <MudExpansionPanel>
            <TitleContent>
                <MudText Typo="Typo.h4">Custom CSS</MudText>
            </TitleContent>

            <ChildContent>
                <MudTextField Lines="10" Variant="Variant.Outlined" @bind-Value="brandProfile.Theme.CustomCss"></MudTextField>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudButton OnClick="Save" Variant="Variant.Filled" Class="mt-4">Save</MudButton>
}

@code {
    BrandProfile? brandProfile;

    protected override async Task OnInitializedAsync() 
    {
        brandProfile = await BrandProfileClient.GetBrandProfileAsync();
    }

    async Task Save() 
    {
        var newBrandProfile = await BrandProfileClient.UpdateBrandProfileAsync(
            new UpdateBrandProfileRequest {
                Name = brandProfile.Name, 
                Description = brandProfile.Description,
                Theme = brandProfile.Theme 
            });

        ThemeManager.SetTheme(newBrandProfile.Theme!);

        brandProfile = newBrandProfile;
    }

    async Task ThemeChanged(Theme? theme) 
    {
        if(theme is null)
            return;

        await BrandProfileClient.SetThemeAsync(new SetBrandProfileThemeRequest { ThemeId = theme.Id });
        brandProfile.Theme = theme;
        ThemeManager.SetTheme(brandProfile.Theme!);
    }

    async Task ExportTheme() 
    {
        var str = await ThemesClient.ExportThemeAsync(brandProfile.Theme.Id);

        string content = str;
        string fileName = $"{brandProfile.Theme.Name}.json";
        string contentType = "application/json";

        await JS.InvokeVoidAsync("downloadFileFromString", fileName, contentType, content);
    }

    async Task ImportTheme(IBrowserFile file)
    {
        await ThemesClient.ImportThemeAsync(brandProfile.Theme.Id,
            new FileParameter(file.OpenReadStream(3 * 1000000), file.Name));
    }
}