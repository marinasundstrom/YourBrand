@page "/notifications"
@using YourBrand.AppService.Client
@attribute [Authorize]
@inject IStringLocalizer<NotificationsPage> T
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject INotificationsClient NotificationsClient

<AppPageTitle>@T["Notifications"]</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@T["Notifications"]</MudText>

<MudTable T="Notification" Dense="true" @ref="table" SortLabel="Sort By" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<Notification>>>(ServerReload))" OnRowClick="RowClickEvent" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Elevation="25">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel T="Notification" SortLabel="Text">@T["Header_Text"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="Notification" SortLabel="Published">@T["Header_Published"]</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (!context.IsRead)
            {
                <MudIcon Icon="@Icons.Material.Filled.Circle" />
            }
        </MudTd>
        <MudTd DataLabel="@T["Header_Text"]">@context.Content</MudTd>
        <MudTd DataLabel="@T["Header_Published"]">@(context.Published.Date == DateTime.Now.Date ? context.Published.ToString("HH:mm") : context.Published.ToString("yyyy-MM-dd HH:mm"))</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>@T["NoRecordsFound"]</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@T["Loading"]</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@T["RowsPerPage"]" />
    </PagerContent>
</MudTable>

@code {
    MudTable<Notification> table;

    private async Task<TableData<Notification>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var results = await NotificationsClient.GetNotificationsAsync(false, state.Page + 1, state.PageSize, state.SortLabel,
                state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.AppService.Client.SortDirection.Asc : YourBrand.AppService.Client.SortDirection.Desc, cancellationToken);

            return new TableData<Notification>() { TotalItems = results.TotalCount, Items = results.Items };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    private void RowClickEvent(TableRowClickEventArgs<Notification> args)
    {
        //NavigationManager.NavigateTo($"/notifications/{args.Item.Id}");
    }
}

