@page "/something"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.SignalR.Client
@using YourBrand.AppService.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDoSomethingClient DoSomethingClient

<MudText Typo="Typo.h3" GutterBottom="true">Worker</MudText>

<EditForm Model="@this" OnValidSubmit="OnSubmit">

    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudNumericField Label="LHS" @bind-Value="Lhs" For="() => Lhs"></MudNumericField>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudNumericField Label="RHS" @bind-Value="Rhs" For="() => Rhs"></MudNumericField>
        </MudItem>
    </MudGrid>

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary" Class="mb-2 mt-2">Send</MudButton>

</EditForm>

@code {
    HubConnection hubConnection = null!;

    [Required]
    public double? Lhs { get; set; }

    [Required]
    public double? Rhs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{NavigationManager.BaseUri}api/hubs/something")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("ResponseReceived", OnResponseReceived);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");

                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");

                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    async Task OnSubmit()
    {
        await DoSomethingClient.DoSomethingAsync(Lhs, Rhs);
    }

    Task OnResponseReceived(string message)
    {
        Snackbar.Add(message, Severity.Info);

        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}

