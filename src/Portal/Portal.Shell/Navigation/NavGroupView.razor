@implements IDisposable

<MudNavGroup Title="@Group.Name" Icon="@Group.Icon" Expanded="Group.Expanded" ExpandedChanged="(v) =>  {  SaveCallback?.Invoke(v, Group); }">
    @if (Group.Component is not null)
    {
        <DynamicComponent Type="@Group.Component" />
    }
    else 
    {
        <NavItemListView Items="@Group.Items" SaveCallback="SaveCallback" />
    }
</MudNavGroup>

@code 
{
    protected override void OnInitialized() 
    {
        Group.Updated += OnUpdated;
    }

    async void OnUpdated()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Group.Updated -= OnUpdated;
    }

    [Parameter]
    public NavGroup Group { get; set; }

    [Parameter] 
    public Func<bool, NavGroup, bool>? SaveCallback { get; set; }
}