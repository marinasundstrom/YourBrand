@using YourBrand.Portal.Theming
@using YourBrand.Portal.Search
@using YourBrand.Portal.Authentication
@implements IDisposable
@inject IThemeManager ThemeManager
@inject IStringLocalizer<AppBar> T

<MudAppBar Elevation="25" Dense="@dense">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
        OnClick="@(async (e) => await DrawerToggleCallback.InvokeAsync())" />
    <a href="/">
        <img src="@logo" class="ms-2 mt-1" style="
    height: @(dense ? "26px;" : "30px;")">
    </a>
    @if (!string.IsNullOrEmpty(appBarTitle)) 
    {
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudText Typo="Typo.h5" Class="ms-2"><b>@appBarTitle</b></MudText>
    </MudHidden>
    }
    <MudSpacer />
    <AuthorizeView>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <SearchBox />
        </MudHidden>
        <MudSpacer />
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Filled.Search" Class="mx-2" Color="Color.Inherit" Edge="Edge.End"
                OnClick="@(() => OpenSearchDialog())" />
        </MudHidden>
    </AuthorizeView>
    <AppBarTray />
</MudAppBar>

<MudDialog @bind-Visible="_searchDialogOpen" Options="_dialogOptions" Class="docs-gray-bg"
    ClassContent="docs-mobile-dialog-search">
    <DialogContent>
        <SearchBox />
    </DialogContent>
</MudDialog>

@code {
    ColorScheme? _currentColorScheme;
    string? logo = null;
    string? appBarTitle = null;
    bool dense = false;
    private bool _searchDialogOpen;
    private void OpenSearchDialog() => _searchDialogOpen = true;
    private DialogOptions _dialogOptions = new()
    {
        Position = DialogPosition.TopCenter,
        MaxWidth = MaxWidth.Medium,
        NoHeader
    = true
    };

    [Parameter]
    public EventCallback DrawerToggleCallback { get; set; }

    protected override void OnInitialized()
    {
        ThemeManager.ThemeChanged += OnThemeChanged;
        ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;

        UpdateTheme();
    }

    void OnThemeChanged(object? sender, EventArgs ea)
    {
        UpdateTheme();

        StateHasChanged();
    }

    private void OnColorSchemeChanged(object? sender, ColorSchemeChangedEventArgs e)
    {
        UpdateTheme();

        StateHasChanged();
    }

    void UpdateTheme()
    {
        _currentColorScheme = ThemeManager.CurrentColorScheme;
        logo = (_currentColorScheme == ColorScheme.Light
        ? ThemeManager.Theme.ColorSchemes?.Light?.Logo :
        ThemeManager.Theme.ColorSchemes?.Dark?.Logo) ?? ThemeManager.Theme.Logo;
        appBarTitle = ThemeManager.Theme.Title;
        dense = ThemeManager.Theme.Dense;
    }

    public void Dispose()
    {
        ThemeManager.ThemeChanged -= OnThemeChanged;
        ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;
    }
}