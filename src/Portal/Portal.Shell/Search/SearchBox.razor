@using YourBrand.AppService.Client
@implements IDisposable
@inject IStringLocalizer<SearchBox> T
@inject NavigationManager NavigationManager
@inject ISearchClient SearchClient
@inject Theming.IThemeManager ThemeManager

<MudAutocomplete T="SearchResultItem" Dense="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" DebounceInterval="300" Placeholder="@T["Placeholder"]" Variant="Variant.Outlined" Class="@(isDark ? "search-box dark" : "search-box light")" Style="border-radius: 5px; margin-bottom: 5px;" Value="value1" ValueChanged="OnSearchItemChanged" SearchFunc="@Search1" ToStringFunc="@(e=> e is null ? null : e.Title)">
    <ItemTemplate Context="e">
        @if (e.ResultType == SearchResultItemType.Item)
        {
            <MudText><MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Class="mb-n1 mr-3" />@e.Title</MudText>
        }
    </ItemTemplate>
    <ItemSelectedTemplate Context="e">
        @if (e.ResultType == SearchResultItemType.Item)
        {
            <MudText><MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Class="mb-n1 mr-3" />@e.Title</MudText>
        }
    </ItemSelectedTemplate>
</MudAutocomplete>

@code {
    private bool isDark;

    private SearchResultItem value1;

    protected override void OnInitialized()
    {
        ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;

        isDark = ThemeManager.CurrentColorScheme == Theming.ColorScheme.Dark;
    }

    void OnColorSchemeChanged(object? sender, Theming.ColorSchemeChangedEventArgs e)
    {
        isDark = ThemeManager.CurrentColorScheme == Theming.ColorScheme.Dark;

        StateHasChanged();
    }

    private async Task<IEnumerable<SearchResultItem>> Search1(string searchText, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(searchText))
            return Array.Empty<SearchResultItem>();

#if !DEBUG

        if (searchText.Length < 3)
            return Array.Empty<SearchResultItem>();

#endif

        try
        {
            var results = await SearchClient.SearchAsync(searchText, 1, 10, null, null, cancellationToken);
            return results.Items;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task OnSearchItemChanged(SearchResultItem searchResultItem)
    {
        if (searchResultItem is null) return;

        NavigationManager.NavigateTo($"/items/{searchResultItem.ItemId}");

        value1 = null;

        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeManager.ColorSchemeChanged -= OnColorSchemeChanged;
    }
}

