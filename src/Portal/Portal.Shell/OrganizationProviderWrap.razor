@using YourBrand.Portal.Services
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

@if (organization is not null) 
{
    <CascadingValue Name="Organization" Value="organization">

        @ChildContent
        
    </CascadingValue>
}

@code 
{
    Organization? organization;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (!user?.Identity?.IsAuthenticated ?? false)
                return;


            organization = await OrganizationProvider.GetCurrentOrganizationAsync();

            OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;
        }
    }

    async void OnCurrentOrganizationChanged(object? sender, EventArgs eventArgs)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync();

        StateHasChanged();
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public void Dispose()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}