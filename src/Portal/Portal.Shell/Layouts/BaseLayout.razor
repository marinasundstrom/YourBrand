@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using YourBrand.Portal.AppBar
@using YourBrand.Portal.Navigation
@using YourBrand.Portal.Services
@using YourBrand.Portal.Theming
@implements IDisposable
@inject IThemeManager ThemeManager
@inject ILocalStorageService LocalStorage

<OrganizationProviderWrap>

    <MudThemeProvider IsDarkMode="@(ThemeManager.CurrentColorScheme == ColorScheme.Dark)" Theme="ThemeManager.Theme" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <AppBar DrawerToggleCallback="DrawerToggle" />
        <MudDrawer Open="_drawerOpen" OpenChanged="OpenChanged" ClipMode="DrawerClipMode.Always"
            Overlay="@(!_disableOverlay)" Elevation="25" Variant="DrawerVariant.Responsive">
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            @Body

            <MudScrollToTop>
                <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
            </MudScrollToTop>
        </MudMainContent>
    </MudLayout>
    
</OrganizationProviderWrap>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    bool _drawerOpen = false;
    bool _disableOverlay = true;
    Organization? organization;

    protected override async Task OnInitializedAsync()
    {
        //ThemeManager.SetTheme(Themes.AppTheme);

        _drawerOpen = await LocalStorage.GetItemAsync<bool?>("drawerOpen") ?? true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ThemeManager.Initialize();

            ThemeManager.ThemeChanged += OnThemeChanged;
            ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;

            StateHasChanged();
        }
    }

    async Task OpenChanged(bool isOpen)
    {
        _drawerOpen = isOpen;
        await LocalStorage.SetItemAsync("drawerOpen", _drawerOpen);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OnThemeChanged(object? sender, EventArgs ea)
    {
        Console.WriteLine(ThemeManager.Theme.PaletteLight.AppbarBackground);

        StateHasChanged();
    }

    void OnColorSchemeChanged(object? sender, ColorSchemeChangedEventArgs ea)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeManager.ThemeChanged -= OnThemeChanged;
        ThemeManager.ColorSchemeChanged -= OnColorSchemeChanged;
    }
}