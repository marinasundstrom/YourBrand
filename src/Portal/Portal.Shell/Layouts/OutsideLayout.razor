@layout EmptyLayout
@inherits LayoutComponentBase
@using Blazored.LocalStorage
@using YourBrand.Portal.AppBar
@using YourBrand.Portal.Navigation
@using YourBrand.Portal.Services
@using YourBrand.Portal.Theming
@implements IDisposable
@inject IThemeManager ThemeManager
@inject ILocalStorageService LocalStorage

<MudThemeProvider IsDarkMode="@(ThemeManager.CurrentColorScheme == ColorScheme.Dark)"
    Theme="@ThemeToMudThemeConverter.Convert(ThemeManager.Theme)" />

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@Body


@if (!string.IsNullOrEmpty(theme?.CustomCss))
{
    <style>
        @theme?.CustomCss
    </style>
}

@code {
    bool _drawerOpen = false;
    bool _disableOverlay = true;
    Organization? organization;
    AppService.Client.Theme? theme;

    protected override async Task OnInitializedAsync()
    {
        //ThemeManager.SetTheme(Themes.AppTheme);

        _drawerOpen = await LocalStorage.GetItemAsync<bool?>("drawerOpen") ?? true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            ThemeManager.Initialize();

            ThemeManager.ThemeChanged += OnThemeChanged;
            ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;

            theme = ThemeManager.Theme;

            StateHasChanged();
        }
    }

    async Task OpenChanged(bool isOpen)
    {
        _drawerOpen = isOpen;
        await LocalStorage.SetItemAsync("drawerOpen", _drawerOpen);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OnThemeChanged(object? sender, EventArgs ea)
    {
        theme = ThemeManager.Theme;
        StateHasChanged();
    }

    void OnColorSchemeChanged(object? sender, ColorSchemeChangedEventArgs ea)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeManager.ThemeChanged -= OnThemeChanged;
    }
}
