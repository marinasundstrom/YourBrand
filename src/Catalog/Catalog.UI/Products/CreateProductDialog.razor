@using YourBrand.Catalog
@using YourBrand.Portal.Services
@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IProductCategoriesClient ProductCategoriesClient
@inject IVatRatesClient VatRatesClient
@inject ISnackbar Snackbar
@inject IStoreProvider StoreProvider

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            <div class="d-flex flex-column py-1">
                <MudTextField Label="Name" @bind-Value="Name" Variant="Variant.Outlined" For="() => Name"
                    Class="mb-4" />

                <MudTextField Label="Description" Lines="5" @bind-Value="Description" Variant="Variant.Outlined"
                    For="() => Description" Class="mb-4"></MudTextField>

                <MudAutocomplete Label="Category" SearchFunc="Search" @bind-Value="Category" ToStringFunc="x => x.Name"
                    Variant="Variant.Outlined" For="() => Category" Class="mb-4" Strict="false" />

                <MudCheckBox Label="Is grouped product" Lines="5" @bind-Value="IsGroupedProduct"
                    Variant="Variant.Outlined" For="() => IsGroupedProduct" Class="mb-4"></MudCheckBox>

                <MudNumericField Label="Price" @bind-Value="Price" Variant="Variant.Outlined" For="() => Price"
                    Class="mb-4" Adornment="Adornment.End" AdornmentText="sek"></MudNumericField>

                <MudSelect Label="VAT Rate" @bind-Value="VatRate" Variant="Variant.Outlined" For="() => VatRate"
                    ToStringFunc="@((x) => x?.Name ?? "None")" Class="mb-4">
                    <MudSelectItem Value="@((YourBrand.Catalog.VatRate?)null)">None</MudSelectItem>
                    @foreach (var vatRate in (VatRates ?? Array.Empty<YourBrand.Catalog.VatRate>()))
                    {
                        <MudSelectItem Value="@vatRate">@vatRate.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Label="Handle" @bind-Value="Handle" Placeholder="red-tshirt-medium"
                    HelperText="Unique identifier used in URLs etc" HelperTextOnFocus="true" Variant="Variant.Outlined"
                    For="() => Handle" Class="mb-4"></MudTextField>

            </div>
        </DialogContent>
        <DialogActions>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
            <MudButton Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization Organization { get; set; }

    [Required]
    public string Name { get; set; }

    [Required]
    public string Description { get; set; }

    [Required]
    public YourBrand.Catalog.ParentProductCategory Category { get; set; }

    public bool IsGroupedProduct { get; set; }

    [Required]
    public decimal Price { get; set; } = 0;

    public VatRate? VatRate { get; set; }

    public IEnumerable<VatRate> VatRates { get; set; }

    [Required]
    public string Handle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await VatRatesClient.GetVatRatesAsync(null, null, null, null, null);
        VatRates = result.Items;
    }

    async Task OnSubmit()
    {
        var store = StoreProvider.CurrentStore;

        var product = await ProductsClient.CreateProductAsync(Organization.Id, new CreateProductRequest()
            {
                Name = Name,
                StoreId = store.Id,
                Description = Description,
                CategoryId = Category.Id,
                IsGroupedProduct = IsGroupedProduct,
                Price = Price,
                VatRateId = VatRate.Id,
                Handle = Handle
            });

        MudDialog.Close(DialogResult.Ok(product));
    }

    void Cancel() => MudDialog.Close(DialogResult.Cancel());

    private async Task<IEnumerable<ParentProductCategory>> Search(string value, CancellationToken cancellationToken)
    {
        var store = StoreProvider.CurrentStore;

        var result = await ProductCategoriesClient.GetProductCategoriesAsync(Organization.Id, store.Id, null, true, true, 1, 20, value, null,
        null, cancellationToken);
        return result.Items
        .Where(x => x.CanAddProducts)
        .Select(x => new ParentProductCategory
            {
                Id = x.Id,
                Name = x.Name
            });
    }
}
