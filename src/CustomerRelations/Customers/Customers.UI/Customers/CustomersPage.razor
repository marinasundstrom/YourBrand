@page "/customers"
@attribute [Authorize]
@inject ICustomersClient CustomersClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AppPageTitle>Customers</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Customers</MudText>

<MudButton Href="/customers/create" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2">
    New customer
</MudButton>

<MudTable T="Customer" @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
    Loading="@loading" LoadingProgressColor="Color.Info" Striped="true" OnRowClick="ItemOnClick">
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Inherit" Edge="Edge.End" Class="me-2" Href="/customers/import">Import Customers</MudButton>
        <MudSpacer />

        <MudTextField T="string" Dense="true" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search (Customer No, Name, SSN, Org No)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
    </ToolBarContent>
    
    <HeaderContent>
        <MudTh>Customer No</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>SSN</MudTh>
        <MudTh>Organization No</MudTh>
        <MudTh>Address</MudTh>
    </HeaderContent>
     <RowTemplate Context="customer">
         <MudTd DataLabel="Customer No">@customer.Id</MudTd>
         <MudTd DataLabel="Name">@customer.Name</MudTd>
         <MudTd DataLabel="SSN">@customer.Ssn</MudTd>
         <MudTd DataLabel="Organization No">@customer.OrgNo</MudTd>
         <MudTd DataLabel="Address">@customer.Address.ToAddressString()</MudTd>
     </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<Customer> table = null!;
    bool loading = false;
    string? searchString;

    private async Task<TableData<Customer>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        loading = true;

        try
        {
            var result = await CustomersClient.GetCustomersAsync(state.Page, state.PageSize, searchString, cancellationToken);

            return new TableData<Customer>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    private TableData<Customer>? GetTableData()
    {
        return (TableData<Customer>?)table?.GetType()?
            .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
                         System.Reflection.BindingFlags.Instance)?
            .GetValue(table);
    }


    private async Task ItemOnClick(TableRowClickEventArgs<Customer> ev)
    {
        var item = ev.Item;

        if(item.CustomerType == CustomerType.Individual) 
        {
            NavigationManager.NavigateTo($"/Customers/{item.Id}");
        }
        else if(item.CustomerType == CustomerType.Organization) 
        {
            NavigationManager.NavigateTo($"/Customers/{item.Id}");
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}