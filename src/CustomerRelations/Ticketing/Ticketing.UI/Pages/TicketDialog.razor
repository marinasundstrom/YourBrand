@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITicketsClient TicketsClient
@inject ITicketStatusesClient TicketStatusesClient
@inject IDialogService DialogService
@inject Portal.Services.IAccessTokenProvider AccessTokenProvider
@inject IStringLocalizer<TicketDialog> T

@if (notFound)
{
    <AppPageTitle>Not found</AppPageTitle>

    <MudText Typo="Typo.h4" GutterBottom="true">Not found</MudText>
}
else if (error)
{
    <AppPageTitle>Error</AppPageTitle>

    <MudText Typo="Typo.h4" GutterBottom="true">Error</MudText>
}
else
{
    @if (Id is null || ticket is not null)
    {
        @if (ticket is null)
        {
            <AppPageTitle>@T["NewTicket"]</AppPageTitle>
        }
        else
        {
            <AppPageTitle>@ticket?.Id - @ticket?.Subject</AppPageTitle>
        }

            <MudDialog DisableSidePadding="true">
                <TitleContent>
                     <EditForm EditContext="editContext" OnValidSubmit="Submit">
                        <DataAnnotationsValidator />
                        <div class="d-flex">
                            @if(Id is not null) 
                            {
                                <MudText Typo="@Typo.body1" Class="mt-6 me-4">#@Id</MudText>
                            }
                            <MudTextField T="string" Label="@T["Title"]" Variant="Variant.Text" Value="@Title" ValueChanged="(x) => { Title = x; editContext.NotifyFieldChanged(FieldIdentifier.Create<string>(() => Title)); }" For="() => Title"
                                Immediate="true" Class="pe-8" />
                        </div>
                    </EditForm>
                </TitleContent>
                    
                <DialogContent>
<MudTabs Elevation="0" Rounded="false" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Genereal">
         <EditForm EditContext="editContext" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
                    <MudContainer Style="max-height: 600px; overflow-y: scroll">


                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="@T["Description"]" Lines="5" Variant="Variant.Outlined" @bind-Value="Description"
                                              For="() => Description" Immediate="true" Class="mb-4" />
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudSelect Label="@T["Status"]" @bind-Value="Status" For="() => Status" Immediate="true" Variant="Variant.Outlined" Class="mb-4" ToStringFunc="(s) => s.Name">
                                    @foreach (var status in ticketStatuses)
                                    {
                                        <MudSelectItem Value="@status">@T[status.Name]</MudSelectItem>
                                    }
                                </MudSelect>

                                <MudGrid>
                                    <MudItem xs="12" md="6">
                                        <MudNumericField Label="@T["EstimatedTime"]" Variant="Variant.Outlined" @bind-Value="EstimatedHours"
                                                         For="() => EstimatedHours" Immediate="true" Class="mb-4" />
                                    </MudItem>

                                    <MudItem xs="12" md="6">
                                        <MudNumericField Label="@T["RemainingTime"]" Variant="Variant.Outlined" @bind-Value="RemainingHours"
                                                         For="() => RemainingHours" Immediate="true" Class="mb-4" />
                                    </MudItem>
                                </MudGrid>
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <UserSelector ServiceKey="@ServiceKeys.UserSearchProviderKey" Label="@T["Assignee"]" Variant="Variant.Outlined" @bind-Value="Assignee"
                                              For="() => Assignee" Class="mb-4" />
                            </MudItem>
                        </MudGrid>

                    </MudContainer>

        </EditForm>
                        </MudTabPanel>

                        @if(Id is not null) 
                        {

                        <MudTabPanel Text="History">
                            <MudText>
                                <MudTable T="TicketEvent" Context="c" ServerData="@(new Func<TableState, Task<TableData<TicketEvent>>>(ServerReload))" Elevation="205"
                                    Dense="false" Hover="true" SortLabel="@T["SortBy"]">
                                  <HeaderContent>
                                        <MudTh>
                                            <MudTableSortLabel SortLabel="OccurredAt" T="TicketEvent">@T["OccurredAt"]</MudTableSortLabel>
                                        </MudTh>
                                        <MudTh>
                                            @T["Type"]
                                        </MudTh>
                                    </HeaderContent>

                                    <RowTemplate>
                                        <MudTd DataLabel="@T["OccurredAt"]">@c.OccurredAt.ToString("g")</MudTd>
                                        <MudTd DataLabel="@T["Type"]">
                                            @if(c is TicketCreated ev0) 
                                            {
                                                <text>Ticket was created, by @ev0.Participant.Name.</text>
                                            }
                                            else if(c is TicketSubjectUpdated ev) 
                                            {
                                                <text>Subject was changed to "@ev.NewSubject" from "@ev.OldSubject", by @ev.Participant.Name.</text>
                                            }
                                            else if(c is TicketDescriptionUpdated ev1) 
                                            {
                                                <text>Description was updated, by @ev1.Participant.Name.</text>
                                            }
                                            else if(c is TicketStatusUpdated ev2) 
                                            {
                                                <text>Status changed to "@ev2.NewStatus.Name" from "@ev2.OldStatus.Name", by @ev2.Participant.Name.</text>
                                            }
                                             else if(c is TicketAssigneeUpdated ev5) 
                                            {
                                                <text>User "@ev5.AssignedParticipant.Name" was assigned, by @ev5.Participant.Name.</text>
                                            }
                                            else if(c is TicketRemainingHoursUpdated ev3) 
                                            {
                                                if(ev3.OldHours is null) 
                                                {
                                                    <text>Remaining hours was set to @ev3.NewHours, by @ev3.Participant.Name.</text>
                                                }
                                                else if(ev3.NewHours is null) 
                                                {
                                                    <text>Remaining hours was cleared, by @ev3.Participant.Name.</text>
                                                }
                                                else 
                                                {
                                                    <text>Remaining hours changed to @ev3.NewHours from @ev3.OldHours, by @ev3.Participant.Name.</text>
                                                }
                                            }
                                            else if(c is TicketEstimatedHoursUpdated ev4) 
                                            {
                                                if(ev4.OldHours is null) 
                                                {
                                                    <text>Estimated hours was set to @ev4.NewHours, by @ev4.Participant.Name</text>
                                                }
                                                else if(ev4.NewHours is null) 
                                                {
                                                    <text>Estimated hours was cleared, by @ev4.Participant.Name.</text>
                                                }
                                                else 
                                                {
                                                    <text>Estimated hours changed to @ev4.NewHours from @ev4.OldHours, by @ev4.Participant.Name.</text>
                                                }
                                            }
                                        </MudTd>
                                    </RowTemplate>

                                    <NoRecordsContent>
                                        <MudText>@T["NoMatchesFound"]</MudText>
                                    </NoRecordsContent>

                                    <LoadingContent>
                                        <MudText>@T["Loading"]</MudText>
                                    </LoadingContent>

                                    <PagerContent>
                                        <MudTablePager RowsPerPageString="@T["RowsPerPage"]" />
                                    </PagerContent>                     
                                </MudTable>
                            </MudText>
                        </MudTabPanel>

                        }
                    </MudTabs>

                </DialogContent>
                <DialogActions>
                     <EditForm EditContext="editContext" OnValidSubmit="Submit">
                        <DataAnnotationsValidator />
                    @if (editContext.IsModified())
                    {
                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">
                            @if (ticket is null)
                            {
                                @T["Create"]
                            }
                            else
                            {
                                @T["SaveChanges"]
                            }
                        </MudButton>
                    }
                    </EditForm>
                </DialogActions>
            </MudDialog>
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items:center; height:100%; width:100%;">
            <MudProgressCircular Color="Color.Default" Size="Size.Large" Indeterminate="true" />
        </div>
    }
}


@code {
    CancellationTokenSource cts = new ();
    EditContext editContext = null!;
    Ticket? ticket;
    List<TicketStatus> ticketStatuses = new();
    bool notFound = false;
    bool error = false;

    [CascadingParameter] public MudDialogInstance Instance { get; set; } = null!;

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization Organization { get; set; }

    [Parameter] public int? Id { get; set; }

    [Required]
    [MaxLength(60)]
    public string Title { get; set; } = null!;

    [MaxLength(340)]
    public string? Description { get; set; }

    public Portal.User? Assignee { get; set; }

    public TicketStatus Status { get; set; }

    public double? EstimatedHours { get; set; }

    public double? RemainingHours { get; set; }

    async Task Submit()
    {
        try
        {
            if (Id is null)
            {
                await CreateTicket();

                editContext.MarkAsUnmodified();

                Instance.Close();

                return;
            }

            if (editContext.IsModified(() => Title))
            {
                await TicketsClient.UpdateTitleAsync(Organization.Id, Id.GetValueOrDefault(), Title, cts.Token);
            }

            if (editContext.IsModified(() => Description!))
            {
                await TicketsClient.UpdateTextAsync(Organization.Id, Id.GetValueOrDefault(), Description ?? string.Empty, cts.Token);
            }

            if (editContext.IsModified(() => Status))
            {
                await TicketsClient.UpdateStatusAsync(Organization.Id, Id.GetValueOrDefault(), Status.Id, cts.Token);
            }

            if (editContext.IsModified(() => Assignee!))
            {
                await TicketsClient.UpdateAssigneeAsync(Organization.Id, Id.GetValueOrDefault(), Assignee?.Id, cts.Token);
            }

            if (editContext.IsModified(() => EstimatedHours!))
            {
                await TicketsClient.UpdateEstimatedHoursAsync(Organization.Id, Id.GetValueOrDefault(), EstimatedHours, cts.Token);
            }

            if (editContext.IsModified(() => RemainingHours!))
            {
                await TicketsClient.UpdateRemainingHoursAsync(Organization.Id, Id.GetValueOrDefault(), RemainingHours, cts.Token);
            }

            editContext.MarkAsUnmodified();

            ticketStatuses.AddRange((await TicketStatusesClient.GetStatusesAsync(null, 1, 100, null, null, cts.Token)).Items);

            ticket = await TicketsClient.GetTicketByIdAsync(Organization.Id, Id.GetValueOrDefault(), cts.Token);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(this);

        notFound = false;
        error = false;

        ticketStatuses.AddRange((await TicketStatusesClient.GetStatusesAsync(null, 1, 100, null, null, cts.Token)).Items);

        Status = ticketStatuses.First();

        if (Id is not null)
        {
            try
            {
                await LoadTicket(Id.GetValueOrDefault());
            }
            catch (ApiException<ProblemDetails> exc)
            {
                if (exc.StatusCode == (int)System.Net.HttpStatusCode.NotFound)
                {
                    notFound = true;
                }
                else
                {
                    error = true;
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine(exc);
                error = true;
            }
        }
        else
        {
            Instance.SetTitle(T["NewTicket"]);
        }
    }

    async Task CreateTicket()
    {
        ticket = await TicketsClient.CreateTicketAsync(Organization.Id, new CreateTicketRequest
        {
            Title = Title,
            Text = Description,
            Status = Status.Id,
            AssigneeId = Assignee?.Id,
            EstimatedHours = EstimatedHours,
            RemainingHours = RemainingHours
        }, cts.Token);

        Instance.SetTitle($"{ticket.Id} - {ticket.Subject}");
    }

    async Task FetchTicket()
    {
        await LoadTicket(ticket!.Id);
    }

    async Task LoadTicket(int id)
    {
        try
        {
            this.ticket = await TicketsClient.GetTicketByIdAsync(Organization.Id, id, cts.Token);

            Instance.SetTitle($"{ticket.Id} - {ticket.Subject}");

            Title = ticket.Subject;
            Description = ticket.Description;
            Status = ticket.Status;
            Assignee = ticket.Assignee?.ToUser();
            EstimatedHours = ticket.EstimatedHours;
            RemainingHours = ticket.RemainingHours;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public void Dispose()
    {
        cts.Cancel();
    }

    private async Task<TableData<TicketEvent>> ServerReload(TableState state)
    {      
        try
        {
            var result = await TicketsClient.GetTicketEventsAsync(Organization.Id, Id.GetValueOrDefault(), state.Page + 1, state.PageSize,
            state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel,
                state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? Ticketing.SortDirection.Ascending : Ticketing.SortDirection.Descending), cts.Token);

            return new TableData<TicketEvent>() { TotalItems = result.Total, Items = result.Items };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        /*catch (Exception)
        {
            Snackbar.Add(T["FailedToGetTickets"], Severity.Error);
        }*/

        return new TableData<TicketEvent>() { Items = Enumerable.Empty<TicketEvent>(), TotalItems = 0 };
    }
}
