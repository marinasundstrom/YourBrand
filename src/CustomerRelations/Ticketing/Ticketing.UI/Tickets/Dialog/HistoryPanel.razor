@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITicketsClient TicketsClient
@inject ITicketStatusesClient TicketStatusesClient
@inject IDialogService DialogService
@inject Portal.Services.IAccessTokenProvider AccessTokenProvider
@inject IStringLocalizer<TicketDialog> T

<MudTable T="TicketEvent" Context="c" ServerData="@(new Func<TableState, CancellationToken, Task<TableData<TicketEvent>>>(ServerReload))"
    Elevation="205" Dense="false" Hover="true" SortLabel="@T["SortBy"]">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="OccurredAt" T="TicketEvent">@T["OccurredAt"]</MudTableSortLabel>
        </MudTh>
        <MudTh>
            @T["Type"]
        </MudTh>
        <MudTh>
            @T["By"]
        </MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="@T["OccurredAt"]">@c.OccurredAt.ToString("g")</MudTd>
        <MudTd DataLabel="@T["Type"]">
            @if (c is TicketCreated ev0)
            {
                <text>Ticket was created</text>
            }
            else if (c is TicketProjectUpdated ev10)
            {
                <text>Moved to project "@ev10.Project.Name" from "@ev10.OldProject.Name"</text>
            }
            else if (c is TicketSubjectUpdated ev)
            {
                <text>Subject was changed to "@ev.NewSubject" from "@ev.OldSubject"</text>
            }
            else if (c is TicketDescriptionUpdated ev1)
            {
                <text>Description was updated</text>
            }
            else if (c is TicketStatusUpdated ev2)
            {
                <text>Status changed to "@ev2.NewStatus.Name" from "@ev2.OldStatus.Name"</text>
            }
            else if (c is TicketAssigneeUpdated ev5)
            {
                <text>User "@ev5.AssignedParticipant.Name" was assigned</text>
            }
            else if (c is TicketRemainingHoursUpdated ev3)
            {
                if (ev3.OldHours is null)
                {
                    <text>Remaining hours was set to @ev3.NewHours</text>
                }
                else if (ev3.NewHours is null)
                {
                    <text>Remaining hours was cleared</text>
                }
                else
                {
                    <text>Remaining hours changed to @ev3.NewHours from @ev3.OldHours</text>
                }
            }
            else if (c is TicketEstimatedHoursUpdated ev4)
            {
                if (ev4.OldHours is null)
                {
                    <text>Estimated hours was set to @ev4.NewHours</text>
                }
                else if (ev4.NewHours is null)
                {
                    <text>Estimated hours was cleared</text>
                }
                else
                {
                    <text>Estimated hours changed to @ev4.NewHours from @ev4.OldHours</text>
                }
            }
            else if (c is TicketPriorityUpdated ev6)
            {
                <text>Priority changed to @ev6.NewPriority from @ev6.OldPriority</text>
            }
            else if (c is TicketImpactUpdated ev7)
            {
                <text>Impact changed to @ev7.NewImpact from @ev7.OldImpact</text>
            }
            else if (c is TicketUrgencyUpdated ev8)
            {
                <text>Urgency changed to @ev8.NewUrgency from @ev8.OldUrgency</text>
            }
            else if (c is TicketCommentAdded ev9)
            {
                <text>Comment added</text>
            }
        </MudTd>
        <MudTd DataLabel="@T["By"]">
            @c.Participant.Name
        </MudTd>
    </RowTemplate>

    <NoRecordsContent>
        <MudText>@T["NoMatchesFound"]</MudText>
    </NoRecordsContent>

    <LoadingContent>
        <MudText>@T["Loading"]</MudText>
    </LoadingContent>

    <PagerContent>
        <MudTablePager RowsPerPageString="@T["RowsPerPage"]" />
    </PagerContent>
</MudTable>

@code {
    CancellationTokenSource cts = new();

    [CascadingParameter] public IMudDialogInstance Instance { get; set; } = null!;

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization Organization { get; set; }

    [Parameter] public int? Id { get; set; }

    private async Task<TableData<TicketEvent>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            var result = await TicketsClient.GetTicketEventsAsync(Organization.Id, Id.GetValueOrDefault(), state.Page + 1,
            state.PageSize,
            state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel,
            state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ?
            Ticketing.SortDirection.Ascending : Ticketing.SortDirection.Descending), cts.Token);

            return new TableData<TicketEvent>() { TotalItems = result.Total, Items = result.Items };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        /*catch (Exception)
        {
        Snackbar.Add(T["FailedToGetTickets"], Severity.Error);
        }*/

        return new TableData<TicketEvent>() { Items = Enumerable.Empty<TicketEvent>(), TotalItems = 0 };
    }

    public void Dispose()
    {
        cts.Cancel();
    }
}
