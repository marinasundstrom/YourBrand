@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable
@inject ITicketsClient TicketsClient
@inject ITicketStatusesClient TicketStatusesClient
@inject IDialogService DialogService
@inject Portal.Services.IAccessTokenProvider AccessTokenProvider
@inject IStringLocalizer<TicketDialog> T

@if (notFound)
{
    <AppPageTitle>Not found</AppPageTitle>

    <MudText Typo="Typo.h4" GutterBottom="true">Not found</MudText>
}
else if (error)
{
    <AppPageTitle>Error</AppPageTitle>

    <MudText Typo="Typo.h4" GutterBottom="true">Error</MudText>
}
else
{
    @if (Id is null || ticket is not null)
    {
        @if (ticket is null)
        {
            <AppPageTitle>@T["NewTicket"]</AppPageTitle>
        }
        else
        {
            <AppPageTitle>@ticket?.Id - @ticket?.Subject</AppPageTitle>
        }

            <MudDialog DisableSidePadding="true">
                <TitleContent>
                     <EditForm EditContext="editContext" OnValidSubmit="Submit">
                        <DataAnnotationsValidator />
                        <div class="d-flex">
                            @if(Id is not null) 
                            {
                                <MudText Typo="@Typo.body1" Class="mt-6 me-4">#@Id</MudText>
                            }
                            <MudTextField T="string" Label="@T["Title"]" Variant="Variant.Text" Value="@Form.Title" ValueChanged="(x) => { Form.Title = x; editContext.NotifyFieldChanged(FieldIdentifier.Create<string>(() => Form.Title)); }" For="() => Form.Title"
                                Immediate="true" Class="pe-8" />
                        </div>
                    </EditForm>
                </TitleContent>
                    
                <DialogContent>
                    <MudTabs Elevation="0" Rounded="false" ApplyEffectsToContainer="true" PanelClass="pa-6">
                        <MudTabPanel Text="Details">
                            <DetailsPanel Id="@Id" Form="Form" EditContext="editContext" />
                        </MudTabPanel>

                        @if(Id is not null) 
                        {
                            <MudTabPanel Text="Comments">
                                <CommentsPanel Id="@Id" />
                            </MudTabPanel>

                            <MudTabPanel Text="History">
                                <HistoryPanel Id="@Id" />
                            </MudTabPanel>
                        }
                    </MudTabs>

                </DialogContent>
                <DialogActions>
                     <EditForm EditContext="editContext" OnValidSubmit="Submit">
                        <DataAnnotationsValidator />
                    @if (saveButtonVisible)
                    {
                        <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">
                            @if (ticket is null)
                            {
                                @T["Create"]
                            }
                            else
                            {
                                @T["SaveChanges"]
                            }
                        </MudButton>
                    }
                    </EditForm>
                </DialogActions>
            </MudDialog>
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items:center; height:100%; width:100%;">
            <MudProgressCircular Color="Color.Default" Size="Size.Large" Indeterminate="true" />
        </div>
    }
}


@code {
    CancellationTokenSource cts = new ();
    EditContext editContext = null!;
    Ticket? ticket;
    bool notFound = false;
    bool error = false;
    bool saveButtonVisible = false;

    [CascadingParameter] public MudDialogInstance Instance { get; set; } = null!;

    [CascadingParameter(Name = "Organization")]
    public YourBrand.Portal.Services.Organization Organization { get; set; }

    [Parameter] public int? Id { get; set; }

    public TicketDetailsForm Form { get; set; } = new TicketDetailsForm();

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Form);

        editContext.OnFieldChanged += OnFieldChanged;

        notFound = false;
        error = false;

        if (Id is not null)
        {
            try
            {
                await LoadTicket(Id.GetValueOrDefault());
            }
            catch (ApiException<ProblemDetails> exc)
            {
                if (exc.StatusCode == (int)System.Net.HttpStatusCode.NotFound)
                {
                    notFound = true;
                }
                else
                {
                    error = true;
                }
            }
            catch (Exception exc)
            {
                Console.WriteLine(exc);
                error = true;
            }
        }
        else
        {
            Instance.SetTitle(T["NewTicket"]);
        }
    }

    void OnFieldChanged(object? sender, FieldChangedEventArgs e) 
    {
        saveButtonVisible = editContext.IsModified();

        StateHasChanged();
    }

     async Task FetchTicket()
    {
        await LoadTicket(ticket!.Id);
    }

    async Task LoadTicket(int id)
    {
        try
        {
            this.ticket = await TicketsClient.GetTicketByIdAsync(Organization.Id, id, cts.Token);

            Form.Populate(ticket);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task Submit()
    {
        try
        {
            if (Id is null)
            {
                await CreateTicket();

                editContext.MarkAsUnmodified();

                Instance.Close();

                return;
            }

            if (editContext.IsModified(() => Form.Title))
            {
                await TicketsClient.UpdateTitleAsync(Organization.Id, Id.GetValueOrDefault(), Form.Title, cts.Token);
            }

            if (editContext.IsModified(() => Form.Description!))
            {
                await TicketsClient.UpdateTextAsync(Organization.Id, Id.GetValueOrDefault(), Form.Description ?? string.Empty, cts.Token);
            }

            if (editContext.IsModified(() => Form.Status))
            {
                await TicketsClient.UpdateStatusAsync(Organization.Id, Id.GetValueOrDefault(), Form.Status.Id, cts.Token);
            }

            if (editContext.IsModified(() => Form.Assignee!))
            {
                await TicketsClient.UpdateAssigneeAsync(Organization.Id, Id.GetValueOrDefault(), Form.Assignee?.Id, cts.Token);
            }

            if (editContext.IsModified(() => Form.EstimatedHours!))
            {
                await TicketsClient.UpdateEstimatedHoursAsync(Organization.Id, Id.GetValueOrDefault(), Form.EstimatedHours, cts.Token);
            }

            if (editContext.IsModified(() => Form.RemainingHours!))
            {
                await TicketsClient.UpdateRemainingHoursAsync(Organization.Id, Id.GetValueOrDefault(), Form.RemainingHours, cts.Token);
            }

             if (editContext.IsModified(() => Form.Priority!))
            {
                await TicketsClient.UpdatePriorityAsync(Organization.Id, Id.GetValueOrDefault(), new UpdatePriorityRequest() {  Priority = Form.Priority.GetValueOrDefault() }, cts.Token);
            }

             if (editContext.IsModified(() => Form.Urgency!))
            {
                await TicketsClient.UpdateUrgencyAsync(Organization.Id, Id.GetValueOrDefault(), new UpdateUrgencyRequest() {  Urgency = Form.Urgency.GetValueOrDefault() }, cts.Token);
            }

             if (editContext.IsModified(() => Form.Impact!))
            {
                await TicketsClient.UpdateImpactAsync(Organization.Id, Id.GetValueOrDefault(), new UpdateImpactRequest() {  Impact = Form.Impact.GetValueOrDefault() }, cts.Token);
            }

            editContext.MarkAsUnmodified();

            //ticketStatuses.AddRange((await TicketStatusesClient.GetStatusesAsync(null, 1, 100, null, null, cts.Token)).Items);

            LoadTicket(Id.GetValueOrDefault());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task CreateTicket()
    {
        ticket = await TicketsClient.CreateTicketAsync(Organization.Id, new CreateTicketData
        {
            Title = Form.Title,
            Description = Form.Description,
            Status = Form.Status.Id,
            AssigneeId = Form.Assignee?.Id,
            EstimatedHours = Form.EstimatedHours,
            RemainingHours = Form.RemainingHours,
            Priority = Form.Priority,
            Impact = Form.Impact,
            Urgency = Form.Urgency
        }, cts.Token);

        Instance.SetTitle($"{ticket.Id} - {ticket.Subject}");
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= OnFieldChanged;
        cts.Cancel();
    }
}
