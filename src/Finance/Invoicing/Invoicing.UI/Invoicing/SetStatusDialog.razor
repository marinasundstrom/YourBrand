@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@inject IInvoicesClient InvoicesClient
@inject IInvoiceStatusesClient InvoiceStatusesClient
@inject IOrganizationProvider OrganizationProvider

<EditForm Model="@this" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudSelect Label="Status" @bind-Value="Status" For="() => Status">
                @foreach (var status in invoiceStatuses)
                {
                    <MudSelectItem Value="@status">@status.Name</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Required]
    [Parameter] public string InvoiceId { get; set; }

    [Required]
    [Parameter] public InvoiceStatus Status { get; set; }

    InvoiceStatus currentStatus;
    IEnumerable<InvoiceStatus> invoiceStatuses = Array.Empty<InvoiceStatus>();

    protected override async Task OnInitializedAsync() 
    {
        var organizationId = (await OrganizationProvider.GetCurrentOrganizationAsync()).Id;

        invoiceStatuses = (await InvoiceStatusesClient.GetInvoiceStatusesAsync(organizationId, 1, 100, null, null,
        null)).Items.ToList();
        Status = invoiceStatuses.FirstOrDefault(x => x.Id == Status?.Id);

    }

    async Task Submit()
    {
        var organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        await InvoicesClient.SetInvoiceStatusAsync(organization.Id, InvoiceId.ToString(), (int)Status.Id);

        MudDialog.Close(DialogResult.Ok(Status));
    }

    void Cancel() => MudDialog.Cancel();
}