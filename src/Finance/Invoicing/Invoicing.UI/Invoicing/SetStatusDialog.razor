@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@inject IInvoicesClient InvoicesClient
@inject IOrganizationProvider OrganizationProvider

<EditForm Model="@this" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudSelect Label="Status" @bind-Value="Status" For="() => Status">
                @foreach(var status in statuses)
                {
                    <MudSelectItem Value="@status">@Enum.GetName(typeof(InvoiceStatus2), status)</MudSelectItem>
                }    
            </MudSelect>
            
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Required]
    [Parameter] public string InvoiceId { get; set; }

    [Required]
    [Parameter] public InvoiceStatus2 Status { get; set; }

    InvoiceStatus2 currentStatus;
    IEnumerable<InvoiceStatus2> statuses = Array.Empty<InvoiceStatus2>();

    protected override void OnInitialized() 
    {
        statuses = Enum.GetValues<InvoiceStatus2>().Skip(1);
        currentStatus = Status;

        if((int)currentStatus >= 2) 
        {
            statuses = statuses.Skip(1);
        }
    }

    async Task Submit()
    {
        var organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        await InvoicesClient.SetInvoiceStatusAsync(organization.Id, InvoiceId.ToString(), (int)Status);

        MudDialog.Close(DialogResult.Ok(Status));
    }

    void Cancel() => MudDialog.Cancel();
}