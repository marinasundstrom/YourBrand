@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@inject IInvoicesClient InvoicesClient
@inject IOrganizationProvider OrganizationProvider

<EditForm Model="@this" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudRadioGroup @bind-SelectedOption="Kind" Class="mt-4">
                <MudRadio Option="DomesticServiceKind.HomeRepairAndMaintenanceServiceType" Dense="true">ROT</MudRadio>
                <MudRadio Option="DomesticServiceKind.HouseholdService" Dense="false">RUT</MudRadio>
            </MudRadioGroup>

            <MudTextField Label="Description" @bind-Value="Description" For="() => Description" Lines="5"></MudTextField>

            <MudTextField Label="Buyer" @bind-Value="Buyer" For="() => Buyer"></MudTextField>

            <MudNumericField Label="Requested Amount" @bind-Value="RequestedAmount" For="() => RequestedAmount"></MudNumericField>

            <MudField Label="Max amount to be requested">@MaxAmount</MudField>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public YourBrand.Invoicing.Invoicing.InvoiceViewModel Invoice { get; set; }

    public DomesticServiceKind Kind { get; set; }

    [Required]
    public string Description { get; set; } = null!;

    [Required]
    public string Buyer { get; set; } = null!;

    [Required]
    [Range(int.MinValue, int.MaxValue)]
    public decimal RequestedAmount { get; set; }

    public decimal TotalServiceAmount => Invoice
                 .Items
                 .Where(x => x.ProductType == ProductType.Service && x.DomesticService is not null)
                 .Sum(x => x.LineTotal.AddVat(x.VatRate));

    public decimal MaxAmount 
    {
        get
        {
            return Kind == DomesticServiceKind.HomeRepairAndMaintenanceServiceType
                ? TotalServiceAmount.ApplyRot()
                : TotalServiceAmount.ApplyRut();         
        }        
    }

    [Parameter] public InvoiceDomesticService? InvoiceDomesticService { get; set; }

    protected override void OnInitialized()
    {
        if(InvoiceDomesticService is not null)
        {
            Kind = InvoiceDomesticService.Kind;
            Description = InvoiceDomesticService.Description;
        }
    }

    async Task Submit()
    {
        var dto = new InvoiceDomesticService {
            Kind = Kind,
            Description = Description,
            Buyer = Buyer,
            RequestedAmount = RequestedAmount
        };

        var organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        await InvoicesClient.ActivateRotAndRutAsync(organization.Id, Invoice.Id, dto);

        dto.RequestedAmount = -dto.RequestedAmount; // TODO: Fix

        MudDialog.Close(DialogResult.Ok(
            new InvoiceDomesticServiceViewModel {
                Kind = dto.Kind,
                Description = dto.Description,
                Buyer = dto.Buyer,
                RequestedAmount = dto.RequestedAmount
            }));
    }

    void Cancel() => MudDialog.Cancel();
}