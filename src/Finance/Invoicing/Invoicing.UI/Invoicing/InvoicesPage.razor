@inject IInvoicesClient InvoicesClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider
@implements IDisposable

@page "/invoices"
@using YourBrand.Portal.Services

<AppPageTitle>Invoices</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Invoices</MudText>

<MudButton Variant="Variant.Filled" Link="/invoices/new" Class="mb-2">New invoice</MudButton>

<MudTable T="Invoice" @ref="table" ServerData="ServerReload" Dense="true" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
    Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await GoTo(e.Item)">
    <ToolBarContent>
        <MudSelect T="InvoiceType?" Label="Type" MultiSelection="true" @bind-Value="Type" SelectedValues="selectedTypes" SelectedValuesChanged="OnSelectedTypesChanged" Class="mt-0">
            @foreach (var type in Enum.GetValues<InvoiceType>())
            {
                <MudSelectItem T="InvoiceType?" Value="@type">@Enum.GetName(typeof(InvoiceType), type)</MudSelectItem>
            }
        </MudSelect>
        <MudSpacer />
        <MudSelect T="InvoiceStatus2?" Label="Status" MultiSelection="true" @bind-Value="Status" SelectedValues="selectedStatuses" SelectedValuesChanged="OnSelectedValuesChanged" Class="mt-0">
            @foreach (var status in Enum.GetValues<InvoiceStatus2>())
            {
                <MudSelectItem T="InvoiceStatus2?" Value="@status">@Enum.GetName(typeof(InvoiceStatus2), status)</MudSelectItem>
            }
        </MudSelect>
    </ToolBarContent>
    
    <HeaderContent>
        <MudTh>No</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Sub Total</MudTh>
        <MudTh>VAT</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Paid</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="invoice">
        <MudTd DataLabel="No">@invoice.InvoiceNo</MudTd>
        <MudTd DataLabel="Type">@invoice.Type</MudTd>
        <MudTd DataLabel="Date">@invoice.IssueDate.GetValueOrDefault().ToString("yyyy-MM-dd")</MudTd>
        <MudTd DataLabel="Status">@invoice.Status.Name</MudTd>
        <MudTd DataLabel="Sub Total">@invoice.SubTotal.FormatCurrency(invoice.Currency)</MudTd>
        <MudTd DataLabel="VAT">@invoice.Vat.FormatCurrency(invoice.Currency)</MudTd>
        <MudTd DataLabel="Total">@invoice.Total.FormatCurrency(invoice.Currency)</MudTd>
        <MudTd DataLabel="Paid">@invoice.Paid?.FormatCurrency(invoice.Currency)</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/invoices/{invoice.Id}/file")" @onclick:stopPropagation />
            @if(invoice.Status.Id == 1) 
            {
                <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Small" OnClick="async (e) => await DeleteInvoice(invoice)" />
            }
        </MudTd>
    </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<Invoice> table;
    bool loading = false;
    InvoiceType? Type;
    IEnumerable<InvoiceType?> selectedTypes = new List<InvoiceType?>();
    InvoiceStatus2? Status;
    IEnumerable<InvoiceStatus2?> selectedStatuses = new List<InvoiceStatus2?>();

    protected override async Task OnInitializedAsync()
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;
    }

    Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev)
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;
    }

    private async Task<TableData<Invoice>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await InvoicesClient.GetInvoicesAsync(organization.Id, state.Page, state.PageSize, selectedTypes.Select(s =>
            (InvoiceType)s!), selectedStatuses.Select(s => (InvoiceStatus2)s), null);

            return new TableData<Invoice>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    public async Task NewInvoice()
    {
        var dialogRef = DialogService.Show<NewInvoiceDialog>("New invoice");

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        await table.ReloadServerData();
    }

    public async Task GoTo(Invoice invoice)
    {
        NavigationManager.NavigateTo($"/invoices/{invoice.InvoiceNo}");
    }

    private async Task OnSelectedTypesChanged(IEnumerable<InvoiceType?> selectedTypes)
    {
        this.selectedTypes = selectedTypes;
        await table.ReloadServerData();
    }

    private async Task OnSelectedValuesChanged(IEnumerable<InvoiceStatus2?> selectedValues)
    {
        selectedStatuses = selectedValues;
        await table.ReloadServerData();
    }

    private async Task DeleteInvoice(Invoice invoice)
    {
        var result = await DialogService.ShowMessageBox("Delete draft invoice", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await InvoicesClient.DeleteInvoiceAsync(organization.Id, invoice.Id);
        await table.ReloadServerData();
    }

    public void Dispose() 
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}