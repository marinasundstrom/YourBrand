@page "/invoices/new"
@page "/invoices/{Id}"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations
@using YourBrand.Invoicing.Invoicing
@using YourBrand.Payments.Client
@using YourBrand.Portal.Services
@using YourBrand.Transactions.Client
@using YourBrand.Customers
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IInvoicesClient InvoicesClient
@inject ITransactionsClient TransactionsClient
@inject IPaymentsClient PaymentsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IOrganizationProvider OrganizationProvider
@using YourBrand.Invoicing.Client

@if (invoice is not null)
{
    <AppPageTitle>        
        @if(InvoiceNo is null) 
        {
            <text>Draft invoice</text>
        }
        else 
        {
            <text>Invoice #@InvoiceNo</text>
        }
    </AppPageTitle>
    
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">
            @if(InvoiceNo is null) 
            {
                <text>Draft invoice</text>
            }
            else 
            {
                <text>Invoice #@InvoiceNo</text>
            }
        </MudText>

        <div class="mb-4">
            <MudButton StartIcon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/v1/invoices/{invoice.Id}/file")">
                Download
            </MudButton>

        @if (invoice.Status.Id == 1)
        {
                    <MudButton StartIcon="@Icons.Filled.Delete" OnClick="async (e) => await DeleteInvoice(invoice)">
                        Delete
                    </MudButton>
        }
        </div>

        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="12" md="6" lg="6">
        <MudPaper Elevation="25" Class="pa-4">

            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="12" md="6" lg="6">
                @if (Model.Status.Id >= 2)
                {
                            <MudField Label="Date">@Model.Date?.ToString("yyyy-MM-dd")</MudField>
                            <MudField Label="Date">@Model.Date?.ToString("yyyy-MM-dd")</MudField>
                }
                else
                {
                            <MudDatePicker Label="Date" Date="Model.Date" DateChanged="OnDateChanged" For="() => Model.Date"></MudDatePicker>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="6" lg="6">
                    <div class="d-flex">
                        <MudField Label="Status">@Model.Status.Name</MudField>
                        <MudIconButton Icon="@Icons.Filled.Edit" Class="justify-end"
                                   OnClick="async () => await UpdateInvoiceStatus()"></MudIconButton>
                    </div>
                </MudItem>

                <MudItem xs="12" sm="12" md="6" lg="6">
                @if (Model.Status.Id >= 2)
                {
                            <MudField Label="Due Date">@Model.DueDate?.ToString("yyyy-MM-dd")</MudField>
                }
                else
                {
                            <MudDatePicker Label="Due Date" Date="@Model.DueDate" DateChanged="OnDueDateChanged" For="() => Model.DueDate">
                            </MudDatePicker>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="6" lg="6">
                    <CustomerSelector Value="customer" ValueChanged="OnCustomerChanged" />
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                @if (Model.Status.Id >= 2)
                {
                            <MudField Label="Reference">@Model.Reference</MudField>
                }
                else
                {
                            <MudTextField Label="Reference" Text="@Model.Reference" TextChanged="OnReferenceChanged" For="() =>Model.Reference">
                            </MudTextField>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                @if (Model.Status.Id >= 2)
                {
                            <MudField Label="Note">@Model.Note</MudField>
                }
                else
                {
                            <MudTextField Label="Note" Text="@Model.Note" TextChanged="OnNoteChanged" For="() => Model.Note"></MudTextField>
                }
                </MudItem>

            </MudGrid>
        </MudPaper>
            </MudItem>

              <MudItem xs="12" sm="12" md="6" lg="6">
                            <MudPaper Elevation="25" Class="pa-4">
                @if(Model.VatAmounts.Count() <= 1)
                {
                    <MudGrid>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="Sub Total">@Model.SubTotal.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField  Label="@($"VAT ({(Model.VatRate.GetValueOrDefault() * 100)}%)")">@Model.Vat.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="Total">@Model.Total.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="Discount">@Model.Discount.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem> 

                    </MudGrid>
                } 
                else 
                {
                    <MudTable T="InvoiceVatAmountViewModel" Elevation="0" Items="Model.VatAmounts">
                        <HeaderContent>
                            <MudTh>VAT %</MudTh>
                            <MudTh>Sub Total</MudTh>
                            <MudTh>VAT</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="vatAmount">
                            <MudTd DataLabel="Rate">@vatAmount.Name</MudTd>
                            <MudTd DataLabel="SubTotal">@vatAmount.SubTotal.FormatCurrency(invoice.Currency)</MudTd>
                            <MudTd DataLabel="Vat">@vatAmount.Vat?.FormatCurrency(invoice.Currency)</MudTd>
                            <MudTd DataLabel="Total">@vatAmount.Total.FormatCurrency(invoice.Currency)</MudTd>
                        </RowTemplate>
                    </MudTable>

                    <MudField Label="Discount" Class="mt-4">@Model.Discount.FormatCurrency(invoice.Currency)</MudField>
                }
            </MudPaper>

    @if (payment is not null)
            {
            <MudPaper Elevation="25" Class="mt-8 pa-4">

                <MudGrid>

            @if (payment is not null)
            {
                        <MudItem xs="6" sm="6" md="6" lg="12">
                            <MudField Label="Payment Status">@payment.Status</MudField>
                            <MudField Label="Reference" Class="mt-4">@payment.Reference</MudField>
                        </MudItem>
            }

            @if (Model.Paid is not null)
            {
                        <MudItem xs="6" sm="6" md="6" lg="12">
                            <MudField Label="Paid">@invoice.Paid?.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem>

                if (payment?.AmountCaptured.GetValueOrDefault() != invoice.Total)
                {
                                <MudItem xs="6" sm="6" md="6" lg="12">
                        @{
                            bool remaining = false;
                            var diff = (invoice.Total - payment?.AmountCaptured ?? 0);
                            if (diff < 0)
                            {
                                diff = diff * -1;
                            }
                            else
                            {
                                remaining = true;
                            }
                        }
                                    <MudField Label="@(remaining ? "Remaining" : "Repaid")">@(diff.FormatCurrency(invoice.Currency))</MudField>
                                    </MudItem>
                }
            }
            </MudGrid>
            </MudPaper>
            }

            @if (Model.DomesticService?.RequestedAmount is not null)
            {
                        <MudPaper Elevation="25" Class="mt-8 pa-4">
                            <MudGrid>

                            <MudItem xs="6" sm="6" md="6" lg="12">
                                <MudField Label="@(Model.DomesticService.Kind == DomesticServiceKind.HomeRepairAndMaintenanceServiceType ? "Rot" : "Rut")">-@invoice.DomesticService?.RequestedAmount.FormatCurrency(invoice.Currency)</MudField>
                            </MudItem>

                            </MudGrid>
                        </MudPaper>
            }
            </MudItem>
        </MudGrid>

<MudGrid Class="mb-4">
<MudItem xs="12" sm="12" md="6" lg="6">
    <MudExpansionPanels MultiExpansion="true" Elevation="25">
        <MudExpansionPanel Text="Billing detail">
            <TitleContent>
                  <div class="d-flex flex-grow-1 gap-1">
                    <MudText Typo="Typo.h5" Class="mb-1">Billing details</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="UpdateBillingDetails" Size="Size.Small" Class="ms-4" />
                </div>
            </TitleContent>

            <ChildContent>
                @if (invoice?.BillingDetails is not null)
                {
                    var address = invoice.BillingDetails.Address;

                    <MudText>@invoice.BillingDetails.FirstName @invoice.BillingDetails.LastName</MudText>
                    <MudText>@invoice.BillingDetails.Ssn</MudText>

                    <MudText Class="mt-2">@address.Thoroughfare @address.Premises @address.SubPremises</MudText>
                    <MudText>@address.PostalCode @address.Locality</MudText>
                    <MudText>@address.Country</MudText>

                    <MudText Class="mt-2">@invoice.BillingDetails.PhoneNumber</MudText>
                    <MudText>@invoice.BillingDetails.Email</MudText>
                }
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
      </MudItem>

<MudItem xs="12" sm="12" md="6" lg="6">
    <MudExpansionPanels MultiExpansion="true" Elevation="25">
        <MudExpansionPanel Text="Shipping details">
            <TitleContent>
                  <div class="d-flex flex-grow-1 gap-1">
                    <MudText Typo="Typo.h5" Class="mb-1">Shipping details</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="UpdateShippingDetails" Size="Size.Small" Class="ms-4" />
                </div>
            </TitleContent>

            <ChildContent>
                @if (invoice.ShippingDetails is not null)
                {
                    var address = invoice.ShippingDetails.Address;

                    <MudText>@invoice.ShippingDetails.FirstName @invoice.ShippingDetails.LastName</MudText>
                    <MudText class="mt-2">@address.Thoroughfare @address.Premises @address.SubPremises</MudText>
                    <MudText>@address.PostalCode @address.Locality</MudText>
                    <MudText>@address.Country</MudText>
                }
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
      </MudItem>
</MudGrid>

 <MudExpansionPanels MultiExpansion="true" Class="mt-4" Elevation="25">
        <MudExpansionPanel @bind-IsExpanded="isExpanded">
            <TitleContent>
                  <div class="d-flex flex-grow-1 gap-1">
                    <MudText Typo="Typo.h5" Class="mb-1">Items</MudText>
                </div>
            </TitleContent>

            <ChildContent>
                    @if (Model.Status.Id == 1)
        {
            <MudButton StartIcon="@Icons.Filled.Add" Variant="Variant.Text" OnClick="AddItem" Class="mb-2">Add item</MudButton>
        }

        <MudTable T="InvoiceItemViewModel" @ref="table" Dense="true" Items="Model.Items" Hover="true" Elevation="0"
              Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await UpdateInvoiceItem(e.Item)">
            <HeaderContent>
                <MudTh>Description</MudTh>
                <MudTh>Product Id</MudTh>
                <MudTh>SKU</MudTh>
                @* <MudTh>Product Type</MudTh> *@
                <MudTh>Unit price</MudTh>
                <MudTh>Unit</MudTh>
                @*<MudTh>Regular price</MudTh>*@
                <MudTh>Discount</MudTh>
                <MudTh>Quantity</MudTh>
                @* <MudTh>Sub total</MudTh> *@
                <MudTh>VAT %</MudTh>
                <MudTh>VAT</MudTh>
                <MudTh>Total</MudTh>
            @if (Model.Status.Id == 1)
            {
                        <MudTh></MudTh>
            }
            </HeaderContent>
            <RowTemplate Context="invoiceItem">
                <MudTd DataLabel="Description">@invoiceItem.Description</MudTd>
                <MudTd DataLabel="Product Id"><a href="/products/@invoiceItem.ItemId">@invoiceItem.ItemId</a></MudTd>
                <MudTd DataLabel="SKU">@invoiceItem.Sku</MudTd>              
                @* <MudTd DataLabel="Product type">@invoiceItem.ProductType</MudTd> *@            
                <MudTd DataLabel="Unit price">@invoiceItem.UnitPrice.FormatCurrency(invoice.Currency)</MudTd>
                <MudTd DataLabel="Unit">@invoiceItem.Unit</MudTd>
                @* <MudTd DataLabel="Regular price">@invoiceItem.RegularPrice?.FormatCurrency(invoice.Currency)</MudTd> *@
                <MudTd DataLabel="Discount">@invoiceItem.Discount?.FormatCurrency(invoice.Currency)</MudTd>
                <MudTd DataLabel="Quantity">
                    <MudNumericField T="double" Value="invoiceItem.Quantity"
                       ValueChanged="async (v) => await UpdateInvoiceItemQuantity(invoiceItem, v)"
                      Immediate="true" DebounceInterval="400" />
                </MudTd>
                @* <MudTd DataLabel="Sub total">@invoiceItem.SubTotal.FormatCurrency(invoice.Currency)</MudTd> *@
                <MudTd DataLabel="VAT %">@(invoiceItem.VatRate * 100)%</MudTd>
                <MudTd DataLabel="VAT">@invoiceItem.Vat.FormatCurrency(invoice.Currency)</MudTd>
                <MudTd DataLabel="Total">@invoiceItem.LineTotal.FormatCurrency(invoice.Currency)</MudTd>
            @if (Model.Status.Id == 1)
            {
                        <MudTd>
                            <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Small" OnClick="async () => await DeleteItem(invoiceItem)" />
                        </MudTd>
            }
            </RowTemplate>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>
          </ChildContent>
        </MudExpansionPanel>
 </MudExpansionPanels>


    @if (invoice.DomesticService is null)
    {
        @if (Model.Status.Id == 1)
        {
                        <MudButton Variant="Variant.Filled" OnClick="ActivateRotRut" Class="mt-4">Activate Rot & Rut</MudButton>
        }
    }
    else
    {
                <MudPaper Elevation="25" Class="pa-4 mt-4">
                    <MudText Typo="Typo.h6" GutterBottom="true" Class="mb-4">Rot & Rut</MudText>

                    <MudField Label="Kind">@invoice.DomesticService.Kind</MudField>
                    <MudField Label="Kind">@invoice.DomesticService.Kind</MudField>
                    <MudField Label="Description" Class="mt-4">@invoice.DomesticService.Description</MudField>
                    <MudField Label="Buyer" Class="mt-4">@invoice.DomesticService.Buyer</MudField>
                    <MudField Label="Requested Amount" Class="mt-4">@invoice.DomesticService.RequestedAmount.FormatCurrency(invoice.Currency)</MudField>
                </MudPaper>
    }
}

@code
{
    bool isExpanded = true;
    Invoice? invoice;
    MudTable<InvoiceItemViewModel> table;
    bool loading = false;
    TransactionStatus? Status2;
    IEnumerable<TransactionStatus?> selectedStatuses = new List<TransactionStatus?>();
    HubConnection hubConnection = null!;

    [Parameter]
    public int? InvoiceNo { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Required]
    public InvoiceViewModel Model { get; set;  }

    protected override async Task OnInitializedAsync()
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;

        OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;

        NavigationManager.LocationChanged += OnLocationChanged;

        if(int.TryParse(Id, out var invoiceNo)) 
        {
            InvoiceNo = invoiceNo;
            invoiceNoParsed = true;
        }

        if (InvoiceNo is not null || Id is not null)
        {
            await Load();
        }
        else
        {
            invoice = await InvoicesClient.CreateInvoiceDraftAsync(
                new CreateInvoiceDraft()
                {
                    OrganizationId = organization.Id
                }
            );

            Model = invoice.ToModel();

            NavigationManager.NavigateTo($"/invoices/{Model.Id}", replace: true);

            Snackbar.Add("Created invoice draft", Severity.Info);
        }

        await Foo();
    }

    Organization organization = default!;

    private async void OnCurrentOrganizationChanged(object? sender, EventArgs ev) 
    {
        organization = await OrganizationProvider.GetCurrentOrganizationAsync()!;   
    }


    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) 
    {
        if(invoiceNoParsed && replacedUri) 
        {
            return;
        }

        await Load();

        StateHasChanged();

        replacedUri = false;
    }

    bool invoiceNoParsed = false;
    bool replacedUri = false;

    async Task Load() 
    {
        invoice = InvoiceNo is not null ?
                await InvoicesClient.GetInvoiceByNoAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, InvoiceNo.GetValueOrDefault())
                : await InvoicesClient.GetInvoiceAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, Id);

        if(invoice.Customer is not null) 
        {
            customer = new YourBrand.Customers.Client.Customer {
                    Id = int.Parse(invoice.Customer.Id),
                    Name = invoice.Customer.Name
             };
        }

        Model = invoice.ToModel();

        if(invoice.InvoiceNo is not null) 
        {
            replacedUri = true;
            NavigationManager.NavigateTo($"/invoices/{invoice.InvoiceNo}", replace: true);
        }
    }

    Payment? payment;

    public async Task Foo()
    {
        try 
        {
            var paymentsResults = await PaymentsClient.GetPaymentsAsync(organization.Id, 0, 10, null, invoice.Id);
            payment = paymentsResults.Items.FirstOrDefault();

            if (payment is null)
            {
                return;
            }

            StateHasChanged();

            await InitPaymentHub(payment.Id);
        }
        catch 
        {
            Snackbar.Add("Payment service unavailable", Severity.Error);
        }
    }

    async Task ActivateRotRut()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ActivateRotOrRutDialog.Invoice), Model);
        parameters.Add(nameof(ActivateRotOrRutDialog.InvoiceDomesticService), invoice.DomesticService);

        var dialogRef = DialogService.Show<ActivateRotOrRutDialog>("Activate deduction for domestic services", parameters);
        var result = await dialogRef.Result;

        if (result.Cancelled)
        {
            return;
        }

        Model.DomesticService = (InvoiceDomesticServiceViewModel)result.Data;

        StateHasChanged();
    }

    async Task InitPaymentHub(string paymentId)
    {
        if (hubConnection is not null)
        {
            return;
        }

        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{NavigationManager.BaseUri}api/payments/hubs/payments?paymentId={paymentId}")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, PaymentStatus>("PaymentStatusUpdated", PaymentStatusUpdated);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    async Task PaymentStatusUpdated(string id, PaymentStatus status)
    {
        Console.WriteLine($"Payment status updated: {status}");

        await Foo();
    }

    private async Task Submit()
    {
        await Task.CompletedTask;
    }

      YourBrand.Customers.Client.Customer? customer;

    async Task OnCustomerChanged(YourBrand.Customers.Client.Customer customer) 
    {
        if(customer is null)
            return;

        await InvoicesClient.SetCustomerAsync(organization.Id, invoice.Id, new SetCustomer {
            Id = customer.Id.ToString(),
            Name = customer.Name
        });

        this.customer = customer;
    }

    private async Task AddItem()
    {
        var model = new InvoiceItemViewModel();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(InvoiceItemDialog.InvoiceId), invoice.Id);

        var dialogRef = DialogService.Show<InvoiceItemDialog>("New Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        var vm = (InvoiceItemViewModel)result.Data;

        Model.AddItem(vm);
    }

    private async Task UpdateInvoiceItem(InvoiceItemViewModel model)
    {
        if(Model.Status.Id != 1) 
        {
            return;
        }

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(InvoiceItemDialog.InvoiceId), invoice.Id);
        dialogParameters.Add(nameof(InvoiceItemDialog.Model), model);

        var dialogRef = DialogService.Show<InvoiceItemDialog>("Update Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        Model.Update();

        StateHasChanged();
    }

    public async Task UpdateInvoiceStatus()
    {
        string invoiceId = invoice.Id;

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SetStatusDialog.InvoiceId), invoiceId);
        dialogParameters.Add(nameof(SetStatusDialog.Status), Model.Status);

        var dialogRef = DialogService.Show<SetStatusDialog>("Update status", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        Model.Status = (InvoiceStatus)result.Data;

        await Foo();
    }

    private void OnSelectedValuesChanged(IEnumerable<TransactionStatus?> selectedValues)
    {
        selectedStatuses = selectedValues;

        StateHasChanged();
    }

    public async Task OnDateChanged(DateTime? date)
    {
        try
        {
            if (date != Model.Date)
            {
                date = TimeZoneInfo.ConvertTimeToUtc(date.GetValueOrDefault(), TimeZoneInfo.Local);

                await InvoicesClient.SetDateAsync(organization.Id, invoice.Id,
                date.GetValueOrDefault().ToUniversalTime());

                Model.Date = date;
            }
        }
        catch (Exception)
        {
            Model.Date = date;
        }
    }

    public async Task OnDueDateChanged(DateTime? date)
    {
        try
        {
            if (date !=Model. DueDate)
            {
                date = TimeZoneInfo.ConvertTimeToUtc(date.GetValueOrDefault(), TimeZoneInfo.Local);

                await InvoicesClient.SetDueDateAsync(organization.Id, invoice.Id,
                date.GetValueOrDefault().ToUniversalTime());

                Model.DueDate = date;
            }
        }
        catch (Exception)
        {

        }
    }

    public async Task OnReferenceChanged(string? reference)
    {
        if (reference != Model.Reference)
        {
            await InvoicesClient.SetReferenceAsync(organization.Id, invoice.Id, reference);
            Model.Reference = reference;
        }
    }

    public async Task OnNoteChanged(string? note)
    {
        if (note != Model.Note)
        {
            await InvoicesClient.SetNoteAsync(organization.Id, invoice.Id, note);
            Model.Note = note;
        }
    }

    private async Task DeleteInvoice(Invoice invoice)
    {
        var result = await DialogService.ShowMessageBox("Delete draft invoice", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await InvoicesClient.DeleteInvoiceAsync(organization.Id, invoice.Id);

        NavigationManager.NavigateTo("/invoices");
    }

    async Task DeleteItem(InvoiceItemViewModel invoiceItem)
    {
        var result = await DialogService.ShowMessageBox("Delete item", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await InvoicesClient.DeleteInvoiceItemAsync(organization.Id, invoice.Id, invoiceItem.Id);

        Model.RemoveItem(invoiceItem);
    }

    public async ValueTask DisposeAsync()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;

        if (hubConnection is null)
            return;

        await hubConnection.DisposeAsync();
    }

    async Task UpdateBillingDetails()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(UpdateBillingDetailsDialog.InvoiceId), invoice.Id);
        dialogParameters.Add(nameof(UpdateBillingDetailsDialog.Model), invoice.BillingDetails);

        var dialogRef = DialogService.Show<UpdateBillingDetailsDialog>("Update billing details", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        invoice.BillingDetails = (BillingDetails)result.Data;
    }

    async Task UpdateShippingDetails()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(UpdateShippingDetailsDialog.InvoiceId), invoice.Id);
        dialogParameters.Add(nameof(UpdateShippingDetailsDialog.Model), invoice.ShippingDetails);

        var dialogRef = DialogService.Show<UpdateShippingDetailsDialog>("Update shipping details", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        invoice.ShippingDetails = (ShippingDetails)result.Data;
    }

    async Task UpdateInvoiceItemQuantity(InvoiceItemViewModel invoiceItem, double quantity) 
    {
        double oldValue = invoiceItem.Quantity;

        try 
        {
            invoiceItem.Quantity = quantity;
            await InvoicesClient.UpdateItemQuantityAsync(organization.Id, invoice.Id, invoiceItem.Id, new UpdateInvoiceItemQuantity() { Quantity = quantity });
            Model.Update();
        } 
        catch 
        {
            invoiceItem.Quantity = oldValue;
        }
    }

}