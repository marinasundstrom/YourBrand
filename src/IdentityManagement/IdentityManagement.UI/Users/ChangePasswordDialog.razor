@using System.ComponentModel.DataAnnotations
@inject IUsersClient UsersClient

    <EditForm Model="@this" OnValidSubmit="Submit">
        <MudDialog>
            <DialogContent>
                <DataAnnotationsValidator />

                <MudTextField InputType="InputType.Password" Label="Current password" @bind-Value="CurrentPassword" Variant="Variant.Outlined" For="() => CurrentPassword" />
                <MudTextField InputType="InputType.Password" Label="New password" @bind-Value="NewPassword" Variant="Variant.Outlined" For="() => NewPassword" />
                <MudTextField InputType="InputType.Password" Label="Repeat new password" @bind-Value="RepeatNewPassword" Variant="Variant.Outlined" For="() => RepeatNewPassword" />
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Text" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">Confirm</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>


    @code {
        [CascadingParameter] public IMudDialogInstance Dialog { get; set; } = null!;

        [Parameter] public string UserId { get; set; } = null!;

        public string CurrentPassword { get; set; } = null!;

        [Required] public string NewPassword { get; set; } = null!;

        [Required]
        [Compare(nameof(NewPassword))]
        public string RepeatNewPassword { get; set; } = null!;

        public async Task Submit()
        {
            try
            { 
                await UsersClient.ChangePasswordAsync(UserId, new ChangePassword()
                {
                    CurrentPassword = CurrentPassword,
                    NewPassword = NewPassword
                });

                Dialog.Close(DialogResult.Ok(true));
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }