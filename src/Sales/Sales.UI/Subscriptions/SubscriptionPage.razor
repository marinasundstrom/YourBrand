@using System.Globalization
@using YourBrand.Portal.Services
@using YourBrand.Sales
@inject ISubscriptionsClient SubscriptionsClient
@inject IOrdersClient OrdersClient
@inject IOrderStatusesClient OrderStatusesClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IOrganizationProvider OrganizationProvider

@page "/subscriptions/{SubscriptionNo:int}"

@if (subscription is null) 
{

}
else 
{
    <AppPageTitle>Subscription @SubscriptionNo</AppPageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true" Class="mt-4 mb-8">Subscription @SubscriptionNo</MudText>

    <MudPaper Class="pa-8 mb-8">
        <MudGrid Class="mb-4">

            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudField Label="Type" Class="mb-2">@subscription.Type?.Name</MudField>
            </MudItem>

            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudField Label="Status" Class="mb-2">@subscription.Status?.Name</MudField>
            </MudItem>

            <MudItem xs="12" sm="12" md="12" lg="12">
                <MudField Label="Plan" Class="mb-2">
                    <a href="@($"/subscriptions/plans/{subscription.Plan.Id}")">
                        @subscription.Plan.Name (@subscription.Plan.Id)
                    </a>
                </MudField>
            </MudItem>

            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudField Label="Start date" Class="mb-2">@subscription.StartDate.ToString("o", CultureInfo.InvariantCulture)</MudField>
            </MudItem>

            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudField Label="End date" Class="mb-2">@subscription.EndDate?.ToString("o", CultureInfo.InvariantCulture)</MudField>
            </MudItem>

            @if (subscription.Order is not null)
            {
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudField Label="Order" Class="mb-2">                    
                        <a href="@($"/orders/{subscription.Order.OrderNo}")">Order @subscription.Order.OrderNo</a>
                    </MudField>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>

    @if(subscription.Status.Id == 1) 
    {
        <MudButton Variant="Variant.Filled" OnClick="ActivateSubscription">Activate</MudButton>
    } 
    else 
    {
        <MudTable T="Order" @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
            Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await GoTo(e.Item)">
            <ToolBarContent>
                <MudText Typo="Typo.h5" Class="mb-1">Orders</MudText>
                @* <MudSelect T="OrderType?" Label="Type" MultiSelection="true" @bind-Value="Type"
                SelectedValues="selectedTypes" SelectedValuesChanged="OnSelectedTypesChanged" Class="mt-0">
                @foreach (var type in Enum.GetValues<OrderType>())
                {
                <MudSelectItem T="OrderType?" Value="@type">@Enum.GetName(typeof(OrderType), type)</MudSelectItem>
                }
                </MudSelect> *@
                <MudSpacer />
                <MudSelect T="OrderStatus?" Label="Status" MultiSelection="true" @bind-Value="Status"
                    SelectedValues="selectedStatuses" SelectedValuesChanged="OnSelectedValuesChanged"
                    ToStringFunc="(o) => o.Name" Class="mt-0">
                    @foreach (var status in orderStatuses)
                    {
                        <MudSelectItem T="OrderStatus?" Value="@status">@status.Name</MudSelectItem>
                    }
                </MudSelect>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel T="Order" SortLabel="OrderNo">#</MudTableSortLabel>
                </MudTh>
                @*<MudTh>Type</MudTh>*@
                <MudTh>
                    <MudTableSortLabel T="Order" SortLabel="Status">Status</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="Order" SortLabel="PlannedStartDate"
                        InitialDirection="MudBlazor.SortDirection.Ascending">Planned
                        start</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="Order" SortLabel="ActualStartDate">Actual start</MudTableSortLabel>
                </MudTh>
                <MudTh>Sub Total</MudTh>
                <MudTh>VAT</MudTh>
                <MudTh>Discount</MudTh>
                <MudTh>
                    <MudTableSortLabel T="Order" SortLabel="Total">Total</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="Order" SortLabel="Created">Created</MudTableSortLabel>
                </MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate Context="order">
                <MudTd DataLabel="Id">@order.OrderNo</MudTd>
                @*<MudTd DataLabel="Type">@order.Type</MudTd>*@
                @*<MudTd DataLabel="Date">@order.Date.ToString("yyyy-MM-dd")</MudTd> *@

                <MudTd DataLabel="Status">@order.Status.Name</MudTd>

                <MudTd DataLabel="PlannedStartDate">@order.Schedule.PlannedStartDate?.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="ActualStartDate">@order.Schedule.ActualStartDate?.ToString("yyyy-MM-dd")</MudTd>

                <MudTd DataLabel="Sub Total">@order.SubTotal.FormatCurrency(order.Currency)</MudTd>
                <MudTd DataLabel="VAT">@order.Vat.FormatCurrency(order.Currency)</MudTd>
                <MudTd DataLabel="Discount">@order.Discount?.FormatCurrency(order.Currency)</MudTd>
                <MudTd DataLabel="Total">@order.Total.FormatCurrency(order.Currency)</MudTd>
                <MudTd DataLabel="Created">@order.Created.ToString("yyyy-MM-dd")</MudTd>
                <MudTd>
                    @*
                    <MudIconButton Icon="@Icons.Filled.FileDownload" Size="Size.Small"
                    Link="@($"/api/invoicing/orders/{order.OrderNo}/file")" @onclick:stopPropagation /> *@
                    @if (order.Status.Id == 1)
                    {
                        <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Small"
                            OnClick="async (e) => await DeleteOrder(order)" />
                    }
                </MudTd>
            </RowTemplate>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
}

@code
{
    Subscription? subscription;

    [Parameter]
    public int SubscriptionNo { get; set; }

    CancellationTokenSource cts = new();
    MudTable<YourBrand.Sales.Order> table;
    bool loading = false;
    OrderStatus? Status;
    IEnumerable<OrderStatus> orderStatuses = new List<OrderStatus>();
    IEnumerable<OrderStatus?> selectedStatuses = new List<OrderStatus?>();

    string organizationId;

    protected override async Task OnInitializedAsync()
    {
        organizationId = (await OrganizationProvider.GetCurrentOrganizationAsync()).Id;

        subscription = await SubscriptionsClient.GetSubscriptionByNoAsync(organizationId, SubscriptionNo);

        orderStatuses = (await OrderStatusesClient.GetOrderStatusesAsync(organizationId, 1, 100, null, null, null)).Items.ToList();
    }

    private async Task<TableData<Order>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await OrdersClient.GetOrdersAsync(organizationId, [], selectedStatuses?.Select(x => x.Id), null, null, null, subscription.Id, state.Page +
            1,
            state.PageSize,
            state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel,
            state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ?
            YourBrand.Sales.SortDirection.Asc : YourBrand.Sales.SortDirection.Desc), cts.Token);

            return new TableData<Order>() { TotalItems = result.Total, Items = result.Items };
        }
        catch
        {
            return new TableData<Order>();
        }
        finally
        {
            loading = false;
        }
    }

    public async Task GoTo(Order order)
    {
        NavigationManager.NavigateTo($"/orders/{order.OrderNo}");
    }

    private async Task OnSelectedValuesChanged(IEnumerable<OrderStatus?> selectedValues)
    {
        selectedStatuses = selectedValues;
        await table.ReloadServerData();
    }

    private async Task DeleteOrder(Order order)
    {
        var result = await DialogService.ShowMessageBox("Delete draft order", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await OrdersClient.DeleteOrderAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, order.Id);
        await table.ReloadServerData();
    }

    async Task ActivateSubscription() 
    {
        await OrdersClient.ActivateSubscriptionOrderAsync(organizationId, subscription.Order.Id);

        subscription = await SubscriptionsClient.GetSubscriptionByIdAsync(subscription.Id);
    }
}