@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@using YourBrand.Sales
@using YourBrand.Catalog
@inject IOrdersClient OrdersClient
@inject ISubscriptionsClient SubscriptionsClient
@inject IOrganizationProvider OrganizationProvider

<EditForm Model="@Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MudDialog Gutters="false">
        <DialogContent>
            <MudContainer Style="max-height: 600px; overflow-y: scroll">

                <ProductSelector Variant="Variant.Outlined" @bind-Value="Model.Product" For="() => Model.Product"
                    Class="mb-4" />

                <SubscriptionPlanSelector Variant="Variant.Outlined" Class="mb-4" @bind-Value="Model.SubscriptionPlan"
                    For="() => Model.SubscriptionPlan" />

                <MudGrid>
                    <MudItem md="6">
                        <MudDatePicker Variant="Variant.Outlined" Class="mb-4" Label="Start Date" 
                            @bind-Date="Model.StartDate" For="() => Model.StartDate" />
                    </MudItem>

                    <MudItem md="6">
                        <MudTimePicker Variant="Variant.Outlined" Class="mb-4" Label="Start Time"
                            @bind-Time="Model.StartTime" For="() => Model.StartTime" />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem md="6">
                        <MudDatePicker Variant="Variant.Outlined" Class="mb-4" Label="End Date"
                            @bind-Date="Model.EndDate" For="() => Model.EndDate" />
                    </MudItem>

                    <MudItem md="6">
                        <MudTimePicker Variant="Variant.Outlined" Class="mb-4" Label="End Time"
                            @bind-Time="Model.EndTime" For="() => Model.EndTime" />
                    </MudItem>
                </MudGrid>

            @* <MudNumericField Label="Price" @bind-Value="Model.Price" For="() => Model.Price" Class="mb-4">
            </MudNumericField> *@

                <YourBrand.Customers.CustomerSelector Variant="Variant.Outlined" Class="mb-4"
                    @bind-Value="Model.Customer" For="() => Model.Customer" />

                <MudTextField Variant="Variant.Outlined" Label="Notes" Lines="5" @bind-Value="Model.Notes"
                    For="() => Model.Notes" Class="mb-4">
            </MudTextField>

            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public SubscriptionViewModel? Model { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (Model is null)
        {
            Model = new SubscriptionViewModel();
        }
    }

    async Task Submit()
    {
        var organizationsId = (await OrganizationProvider.GetCurrentOrganizationAsync()).Id;
        
        var order = await SubscriptionsClient.CreateSubscriptionOrderAsync(organizationsId, new CreateSubscriptionRequest {
            ProductId = Model.Product.Id.ToString(),
            ProductName = Model.Product.Name,
            Price = Model.Product.Price,
            RegularPrice = Model.Product.RegularPrice,
            SubscriptionPlanId = Model.SubscriptionPlan.Id,
            StartDate = DateOnly.FromDateTime(Model.StartDate.GetValueOrDefault()),
            StartTime = Model.StartTime is null ? null : TimeOnly.FromTimeSpan(Model.StartTime.GetValueOrDefault()),
            EndDate = DateOnly.FromDateTime(Model.EndDate.GetValueOrDefault()),
            EndTime = Model.EndTime is null ? null : TimeOnly.FromTimeSpan(Model.EndTime.GetValueOrDefault()),
            Customer = new SetCustomer
            {
                Id = Model.Customer.Id.ToString(),
                Name = Model.Customer.Name
            },
            BillingDetails = null!,
            ShippingDetails = null!,
            Notes = Model.Notes!
        });

        MudDialog.Close(order);
    }

    void Cancel() => MudDialog.Cancel();
}