@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@inject IOrderTypesClient OrderTypesClient
@inject ISnackbar Snackbar
@inject IOrganizationProvider OrganizationProvider

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog Gutters="false">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                <MudTextField Label="Name" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Name"
                    For="@(() => Name)" />

                <MudTextField Label="Handle" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Handle"
                    For="@(() => Handle)" />
            </MudContainer>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                @if (OrderTypeId is null)
                {
                    <text>Add</text>
                }
                else
                {
                    <text>Update</text>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code
{
    EditContext context;

    [CascadingParameter]
    public IMudDialogInstance Dialog { get; set; } = default!;

    [Parameter]
    public int? OrderTypeId { get; set; } = default!;

    [Required]
    public string Name { get; set; }

    [Required]
    public string Handle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);
        
        if(OrderTypeId is null)
            return;

        var organizationId = (await OrganizationProvider.GetCurrentOrganizationAsync()).Id;

        var orderType = await OrderTypesClient.GetOrderTypeByIdAsync(organizationId, OrderTypeId.GetValueOrDefault());
        Name = orderType.Name;
        Handle = orderType.Handle;
    }

    public async Task OnValidSubmit()
    {
        var organizationId = (await OrganizationProvider.GetCurrentOrganizationAsync()).Id;

        if (OrderTypeId is null)
        {

            var orderType = await OrderTypesClient.CreateOrderAsync(organizationId, new CreateOrderType
                {
                    Name = Name,
                    Handle = Handle
                });

            Dialog.Close(orderType);
        }
        else
        {
            if (context.IsModified())
            {
                await OrderTypesClient.UpdateOrderTypeAsync(organizationId, OrderTypeId.GetValueOrDefault(), new UpdateOrderType
                    {
                        Name = Name,
                        Handle = Handle,
                    });
            }

            Dialog.Close();
        }
    }
}