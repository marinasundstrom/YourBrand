@page "/orders/new"
@page "/orders/{Id}"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations
@using YourBrand.Portal.Services
@using YourBrand.Sales
@using YourBrand.Customers
@using YourBrand.Portal
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IOrdersClient OrdersClient
@inject IOrderStatusesClient OrderStatusesClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IOrganizationProvider OrganizationProvider

@if (order is not null)
{
    <AppPageTitle>        
        @if(OrderNo is null) 
        {
            <text>Draft order</text>
        }
        else 
        {
            <text>Order #@OrderNo</text>
        }
    </AppPageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true" Class="mt-4 mb-8">
        @if(OrderNo is null) 
        {
            <text>Draft order</text>
        }
        else 
        {
            <text>Order #@OrderNo</text>
        }
    </MudText>

    <div class="mb-4">
        <MudButton StartIcon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/orders/{Id}/file")">
            Download
        </MudButton>

        @if (order.Status.Id == 1)
        {
            <MudButton StartIcon="@Icons.Filled.Delete" OnClick="async (e) => await DeleteOrder(order)">
                Delete
            </MudButton>
        }
    </div>

    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="12" md="6" lg="6">
            <MudPaper Elevation="25" Class="pa-4">
                <MudGrid Class="mb-4">

                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <MudField Label="Date">@Model.Date?.ToString("yyyy-MM-dd")</MudField>
                    </MudItem>

                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <div class="d-flex">
                            <MudField Label="Type">@Model.Type.Name</MudField>
                        </div>
                    </MudItem>

                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <div class="d-flex">
                            <MudField Label="Status">@Model.Status.Name</MudField>
                            <MudIconButton Icon="@Icons.Filled.Edit" Class="justify-end"
                                OnClick="async () => await UpdateOrderStatus()"></MudIconButton>
                        </div>
                    </MudItem>

                    <MudItem xs="12" sm="12" md="6" lg="6">
                        <CustomerSelector Value="customer" ValueChanged="OnCustomerChanged" />
                    </MudItem>

                    @if(order.Parent is not null) 
                    {
                        <MudItem xs="12" sm="12" md="6" lg="6">
                             <MudField Label="Parent order" Class="mb-2">
                                <a href="@($"/orders/{order.Parent.OrderNo}")">@order.Parent.OrderNo</a>
                            </MudField>
                        </MudItem>
                    }

                    @if(order.Subscription is not null) 
                    {
                        <MudItem xs="12" sm="12" md="12" lg="12">
                            <MudField Label="Subscription" Class="mb-2">
                                <a href="@($"/subscriptions/{order.Subscription.SubscriptionNo}")">
                                    #@order.Subscription.SubscriptionNo (@order.Subscription.Plan.Name)
                                </a>
                            </MudField>
                        </MudItem>
                    }

                    @*

                <MudItem xs="12" sm="12" md="6" lg="3">
                @if (Model.Status >= OrderStatus.Placed)
                {
                <MudField Label="Due Date">@Model.DueDate?.ToString("yyyy-MM-dd")</MudField>
                }
                else
                {
                <MudDatePicker Label="Due Date" Date="@Model.DueDate" DateChanged="OnDueDateChanged" For="() =>
                Model.DueDate">
                </MudDatePicker>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                @if (Model.Status >= OrderStatus.Placed)
                {
                <MudField Label="Reference">@Model.Reference</MudField>
                }
                else
                {
                <MudTextField Label="Reference" Text="@Model.Reference" TextChanged="OnReferenceChanged" For="()
                =>Model.Reference">
                </MudTextField>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                @if (Model.Status >= OrderStatus.Placed)
                {
                <MudField Label="Note">@Model.Note</MudField>
                }
                else
                {
                <MudTextField Label="Note" Text="@Model.Note" TextChanged="OnNoteChanged" For="() =>
                Model.Note"></MudTextField>
                }
                </MudItem>
                *@

                </MudGrid>
            </MudPaper>


        <MudExpansionPanels MultiExpansion="true" Elevation="25" Class="mt-8">
            <MudExpansionPanel Text="Billing detail">
                <TitleContent>
                    <div class="d-flex flex-grow-1 gap-1">
                        <MudText Typo="Typo.h5" Class="mb-1">Planning</MudText>
                    </div>
                </TitleContent>

                <ChildContent>
                    <MudGrid Class="mb-4">

                        <MudItem xs="12" sm="12" md="6" lg="6">
                            <MudDatePicker Label="Planned Start" Date="@order.PlannedStartDate?.DateTime" Class="mb-2">

                            </MudDatePicker>
                        </MudItem>

                        <MudItem xs="12" sm="12" md="6" lg="6">
                            <MudDatePicker Label="Planned End" Date="@order.PlannedEndDate?.DateTime" Class="mb-2">

                            </MudDatePicker>
                        </MudItem>

                        <MudItem xs="12" sm="12" md="6" lg="6">
                            <MudDatePicker Label="Actual Start" Date="@order.ActualStartDate?.DateTime" Class="mb-2">

                            </MudDatePicker>
                        </MudItem>

                        <MudItem xs="12" sm="12" md="6" lg="6">
                            <MudDatePicker Label="Actual End" Date="@order.ActualEndDate?.DateTime" Class="mb-2">

                            </MudDatePicker>
                                   </MudItem>
                        </MudGrid>
                    </ChildContent>
                        </MudExpansionPanel>
                </MudExpansionPanels>
        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6" Elevation="25">
            <MudPaper Elevation="25" Class="pa-4">
                @if(Model.VatAmounts.Count() <= 1)
                {
                    <MudGrid>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="Sub Total">@Model.SubTotal.FormatCurrency(order.Currency)</MudField>
                        </MudItem>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="@($"VAT ({(Model.VatRate.GetValueOrDefault() * 100)}%)")">@Model.Vat.FormatCurrency(order.Currency)</MudField>
                        </MudItem>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="Total">@Model.Total.FormatCurrency(order.Currency)</MudField>
                        </MudItem>

                        <MudItem xs="6" sm="6" md="6" lg="4">
                            <MudField Label="Discount">@Model.Discount.FormatCurrency(order.Currency)</MudField>
                        </MudItem>

                    </MudGrid>
                } 
                else 
                {
                    <MudTable T="OrderVatAmountViewModel" Elevation="0" Items="Model.VatAmounts">
                        <HeaderContent>
                            <MudTh>VAT %</MudTh>
                            <MudTh>Sub Total</MudTh>
                            <MudTh>VAT</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="vatAmount">
                            <MudTd DataLabel="Rate">@vatAmount.Name</MudTd>
                            <MudTd DataLabel="SubTotal">@vatAmount.SubTotal.FormatCurrency(order.Currency)</MudTd>
                            <MudTd DataLabel="Vat">@vatAmount.Vat?.FormatCurrency(order.Currency)</MudTd>
                            <MudTd DataLabel="Total">@vatAmount.Total.FormatCurrency(order.Currency)</MudTd>
                        </RowTemplate>
                    </MudTable>

                    <MudField Label="Discount" Class="mt-4">@Model.Discount.FormatCurrency(order.Currency)</MudField>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

<MudGrid Class="mb-4">
    <MudItem xs="12" sm="12" md="6" lg="6">

        <MudExpansionPanels MultiExpansion="true" Elevation="25">
            <MudExpansionPanel Text="Billing detail">
                <TitleContent>
                    <div class="d-flex flex-grow-1 gap-1">
                        <MudText Typo="Typo.h5" Class="mb-1">Billing details</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="UpdateBillingDetails" Size="Size.Small" Class="ms-4" />
                    </div>
                </TitleContent>

                <ChildContent>
                    @if (order?.BillingDetails is not null)
                    {
                        var address = order.BillingDetails.Address;

                        <MudText>@order.BillingDetails.FirstName @order.BillingDetails.LastName</MudText>
                        <MudText>@order.BillingDetails.Ssn</MudText>

                        <MudText Class="mt-2">@address.Thoroughfare @address.Premises @address.SubPremises</MudText>
                        <MudText>@address.PostalCode @address.Locality</MudText>
                        <MudText>@address.Country</MudText>

                        <MudText Class="mt-2">@order.BillingDetails.PhoneNumber</MudText>
                        <MudText>@order.BillingDetails.Email</MudText>
                    }
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>

        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6">
            <MudExpansionPanels MultiExpansion="true" Elevation="25">

                <MudExpansionPanel Text="Shipping details">
                    <TitleContent>
                        <div class="d-flex flex-grow-1 gap-1">
                            <MudText Typo="Typo.h5" Class="mb-1">Shipping details</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="UpdateShippingDetails" Size="Size.Small" Class="ms-4" />
                        </div>
                    </TitleContent>

                    <ChildContent>
                        @if (order.ShippingDetails is not null)
                        {
                            var address = order.ShippingDetails.Address;

                            <MudText>@order.ShippingDetails.FirstName @order.ShippingDetails.LastName</MudText>
                            <MudText class="mt-2">@address.Thoroughfare @address.Premises @address.SubPremises</MudText>
                            <MudText>@address.PostalCode @address.Locality</MudText>
                            <MudText>@address.Country</MudText>
                        }
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>

    </MudGrid>
    @*

<MudPaper Elevation="25" Class="pa-4">

<div class="mb-4">
@* <MudButton StartIcon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/orders/{Id}/file")">
Download
</MudButton>

@if (order.Status.Id == 1)
{
<MudButton StartIcon="@Icons.Filled.Delete" OnClick="async (e) => await DeleteOrder(order)">
Delete
</MudButton>
}
</div>

<MudGrid Class="mb-4">
<MudItem xs="12" sm="12" md="6" lg="6">


</MudItem>

<MudItem xs="12" sm="12" md="6" lg="6">

<MudGrid Class="mb-4">
<MudItem xs="12" sm="6" md="6" lg="6">

</MudItem>

<MudItem xs="12" sm="6" md="6" lg="6">

</MudItem>

<MudItem xs="12" sm="12" md="12" lg="12">
<MudField Label="Notes">@Model.Notes</MudField>
</MudItem>

</MudGrid>

</MudItem>
</MudGrid>

</MudPaper>

*@

    <MudExpansionPanels MultiExpansion="true" Class="mt-4" Elevation="25">
        <MudExpansionPanel @bind-IsExpanded="isExpanded">
            <TitleContent>
                  <div class="d-flex flex-grow-1 gap-1">
                    <MudText Typo="Typo.h5" Class="mb-1">Items</MudText>
                </div>
            </TitleContent>

            <ChildContent>

                @if (Model.Status.Id == 1)
                {
                    <MudButton StartIcon="@Icons.Filled.Add" Variant="Variant.Text" OnClick="AddItem" Class="mb-2">Add item</MudButton>
                }

                <MudTable T="OrderItemViewModel" @ref="table" Items="Model.Items" Dense="true" Hover="true" Elevation="0" Breakpoint="Breakpoint.Sm"
                    Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await UpdateOrderItem(e.Item)">
                    <HeaderContent>
                        <MudTh>Description</MudTh>
                        <MudTh>Product Id</MudTh>
                        <MudTh>SKU</MudTh>
                        @* <MudTh>Product type</MudTh> *@
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.Price)">Price</MudTableSortLabel>
                        </MudTh>
                        <MudTh>Unit</MudTh>
                        @* <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.RegularPrice)">Regular Price</MudTableSortLabel>
                        </MudTh> *@
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.Discount)">Discount</MudTableSortLabel>
                        </MudTh>
                        <MudTh>Quantity</MudTh>
                        @* <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.SubTotal)">Sub Total</MudTableSortLabel>
                        </MudTh> *@
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.VatRate)">VAT Rate</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.Vat)">VAT</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<OrderItemViewModel, object>(x=>x.Total)">Total</MudTableSortLabel>
                        </MudTh>
                        @if (Model.Status.Id == 1)
                        {
                            <MudTh></MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate Context="orderItem">
                        <MudTd DataLabel="Description">@orderItem.Description</MudTd>
                        <MudTd DataLabel="Product Id"><a href="/products/@orderItem.ItemId">@orderItem.ItemId</a></MudTd>
                        <MudTd DataLabel="SKU">@orderItem.Sku</MudTd>
                        @* <MudTd DataLabel="Product type">@orderItem.ProductType</MudTd>*@
                        <MudTd DataLabel="Unit price">@orderItem.Price.FormatCurrency(order.Currency)</MudTd>
                        <MudTd DataLabel="Unit">@orderItem.Unit</MudTd>
                    @* <MudTd DataLabel="Regular price">@orderItem.RegularPrice?.FormatCurrency(order.Currency)</MudTd>*@
                        <MudTd DataLabel="Discount">@orderItem.Discount?.FormatCurrency(order.Currency)</MudTd>
                        <MudTd DataLabel="Quantity">
                            <MudNumericField T="double" Value="orderItem.Quantity"
                                ValueChanged="async (v) => await UpdateOrderItemQuantity(orderItem, v)"
                                Immediate="true" DebounceInterval="400" />
                        </MudTd>
                        @*<MudTd DataLabel="Sub total">@orderItem.SubTotal.FormatCurrency(order.Currency)</MudTd>*@
                        <MudTd DataLabel="VAT %">@(orderItem.VatRate * 100)%</MudTd>
                        <MudTd DataLabel="VAT">@orderItem.Vat.FormatCurrency(order.Currency)</MudTd>
                        <MudTd DataLabel="Total">@orderItem.Total.FormatCurrency(order.Currency)</MudTd>
                        @if (Model.Status.Id == 1)
                        {
                            <MudTd>
                                <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Small"
                                    OnClick="async () => await DeleteItem(orderItem)" />
                            </MudTd>
                        }
                    </RowTemplate>

                    <ChildRowContent>
                        @if (!string.IsNullOrEmpty(context.Notes))
                        {
                            <tr>
                                <MudTd colspan="9" class="mud-table-cell">
                                    <MudText Typo="Typo.body2">@context.Notes</MudText>
                                </MudTd>
                            </tr>
                        }
                    </ChildRowContent>

                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                </MudTable>
            </ChildContent>
        </MudExpansionPanel>

    </MudExpansionPanels>

}

@code
{
    YourBrand.Sales.Order? order;
    MudTable<OrderItemViewModel> table;
    bool loading = false;
    bool isExpanded = true;

    public int? OrderNo { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Required]
    public OrderViewModel Model { get; set; }

    public YourBrand.Portal.Organization Organization { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        if(int.TryParse(Id, out var orderNo)) 
        {
            OrderNo = orderNo;
            orderNoParsed = true;
        }

        if (OrderNo is not null || Id is not null)
        {
            await Load();
        }
        else
        {
            order = await OrdersClient.CreateDraftOrderAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, new CreateDraftOrderRequest());

            if(order.Customer is not null) 
            {
                customer = new YourBrand.Customers.Client.Customer {
                    Id = int.Parse(order.Customer.Id),
                    Name = order.Customer.Name
                };
            }

            Model = order.ToModel();

            NavigationManager.NavigateTo($"/orders/{Model.Id}", replace: true);

            Snackbar.Add("Created order draft", Severity.Info);
        }
    }

    async void OnLocationChanged(object? sender, LocationChangedEventArgs args) 
    {
        if(orderNoParsed && replacedUri) 
        {
            return;
        }

        await Load();

        StateHasChanged();

        replacedUri = false;
    }

    bool orderNoParsed = false;
    bool replacedUri = false;

    async Task Load() 
    {
        try 
        {
            order = OrderNo is not null ?
                await OrdersClient.GetOrderByNoAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, OrderNo.GetValueOrDefault())
                : await OrdersClient.GetOrderByIdAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, Id);

            if(order.Customer is not null) 
            {
                customer = new YourBrand.Customers.Client.Customer {
                    Id = int.Parse(order.Customer.Id),
                    Name = order.Customer.Name
                };
            }

            Model = order.ToModel();
            
            if(order.OrderNo is not null) 
            {
                replacedUri = true;
                NavigationManager.NavigateTo($"/orders/{order.OrderNo}", replace: true);
            }
        }
        catch(Exception) 
        {
            
        }
    }

    private async Task Submit()
    {
        await Task.CompletedTask;
    }

    YourBrand.Customers.Client.Customer? customer;

    async Task OnCustomerChanged(YourBrand.Customers.Client.Customer customer) 
    {
        if(customer is null)
            return;

        await OrdersClient.SetCustomerAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, order.Id, new SetCustomer {
            Id = customer.Id.ToString(),
            Name = customer.Name
        });

        this.customer = customer;
    }

    private async Task AddItem()
    {
        var model = new OrderItemViewModel();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(OrderItemDialog.OrderId), order.Id);

        var dialogRef = DialogService.Show<OrderItemDialog>("New Item", dialogParameters, new DialogOptions {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            CloseButton = true
        });

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        var vm = (OrderItemViewModel)result.Data;

        Model.AddItem(vm);
    }

    private async Task UpdateOrderItem(OrderItemViewModel model)
    {
        if (Model.Status.Id == 5 || Model.Status.Id == 2 || Model.Status.Id == 6 || Model.Status.Id == 7)
        {
            return;
        }

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(OrderItemDialog.OrderId), order.Id);
        dialogParameters.Add(nameof(OrderItemDialog.Model), model);

        var dialogRef = DialogService.Show<OrderItemDialog>("Update Item", dialogParameters, new DialogOptions {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            CloseButton = true
        });

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        Model.Update();
    }

    public async Task UpdateOrderStatus()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SetStatusDialog.OrderId), order.Id);
        dialogParameters.Add(nameof(SetStatusDialog.Status), Model.Status);

        var dialogRef = DialogService.Show<SetStatusDialog>("Update status", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        await OrdersClient.UpdateStatusAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, order.Id, ((OrderStatus)result.Data).Id);

        Model.Status = (OrderStatus)result.Data;
    }

    private async Task DeleteOrder(Order order)
    {
        var result = await DialogService.ShowMessageBox("Delete draft order", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await OrdersClient.DeleteOrderAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, order.Id);

        NavigationManager.NavigateTo("/orders");
    }

    async Task DeleteItem(OrderItemViewModel orderItem)
    {
        var result = await DialogService.ShowMessageBox("Delete item", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await OrdersClient.RemoveOrderItemAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, order.Id, orderItem.Id);

        Model.RemoveItem(orderItem);
    }

    async Task UpdateBillingDetails()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(UpdateBillingDetailsDialog.OrderId), order.Id);
        dialogParameters.Add(nameof(UpdateBillingDetailsDialog.Model), order.BillingDetails);

        var dialogRef = DialogService.Show<UpdateBillingDetailsDialog>("Update billing details", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        order.BillingDetails = (BillingDetails)result.Data;
    }

    async Task UpdateShippingDetails()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(UpdateShippingDetailsDialog.OrderId), order.Id);
        dialogParameters.Add(nameof(UpdateShippingDetailsDialog.Model), order.ShippingDetails);

        var dialogRef = DialogService.Show<UpdateShippingDetailsDialog>("Update shipping details", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        order.ShippingDetails = (ShippingDetails)result.Data;
    }

    async Task UpdateOrderItemQuantity(OrderItemViewModel orderItem, double quantity) 
    {
        double oldValue = orderItem.Quantity;

        try 
        {
            orderItem.Quantity = quantity;
            await OrdersClient.UpdateOrderItemQuantityAsync((await OrganizationProvider.GetCurrentOrganizationAsync()).Id, order.Id, orderItem.Id, new UpdateOrderItemQuantityRequest() { Quantity = quantity });
            Model.Update();
        } 
        catch 
        {
            orderItem.Quantity = oldValue;
        }
    }

    public async ValueTask DisposeAsync() 
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}