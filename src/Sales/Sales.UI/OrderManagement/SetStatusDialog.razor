@using System.ComponentModel.DataAnnotations
@inject IOrdersClient OrdersClient
@inject IOrderStatusesClient OrderStatusesClient
@inject IOrganizationProvider OrganizationProvider
@using YourBrand.Portal.Services
@using YourBrand.Sales

<EditForm Model="@this" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudSelect Label="Status" @bind-Value="Status" For="() => Status">
                @foreach (var status in orderStatuses)
                {
                    <MudSelectItem Value="@status">@status.Name</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Required]
    [Parameter] public string OrderId { get; set; }

    [Required]
    [Parameter] public OrderStatus Status { get; set; }

    OrderStatus currentStatus;
    IEnumerable<OrderStatus> orderStatuses = Array.Empty<OrderStatus>();

    protected override async Task OnInitializedAsync()
    {
        var organizationId = (await OrganizationProvider.GetCurrentOrganizationAsync()).Id;

        orderStatuses = (await OrderStatusesClient.GetOrderStatusesAsync(organizationId, 1, 100, null, null,
        null)).Items.ToList();
        Status = orderStatuses.FirstOrDefault(x => x.Id == Status?.Id);

        StateHasChanged();
    }

    async Task Submit()
    {
        //await OrdersClient.SetOrderStatusAsync(OrderId, Status);

        MudDialog.Close(DialogResult.Ok(Status));
    }

    void Cancel() => MudDialog.Cancel();
}