@using Microsoft.AspNetCore.SignalR.Client;

@page "/marketing/campaigns"
@attribute [Authorize]

@inject ICampaignsClient CampaignsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AppPageTitle>Campaigns</AppPageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Campaigns</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnItemClicked(null)" StartIcon="@Icons.Material.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    New Campaign
</MudButton>

<MudTable T="Campaign" @ref="table" ServerData="ServerReload" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
    Loading="@loading" LoadingProgressColor="Color.Info" Striped="true" OnRowClick="ItemOnClick">
    
        <ToolBarContent>
            <MudSpacer />

            <MudTextField T="string" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>

     <HeaderContent>
         <MudTh><MudTableSortLabel T="Campaign" SortLabel="Name">Name</MudTableSortLabel></MudTh>
     </HeaderContent>
     <RowTemplate Context="campaign">
         <MudTd DataLabel="Name">@campaign.Name</MudTd>
     </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<Campaign> table = null!;
    bool loading = false;
    string? searchString;

    private async Task<TableData<Campaign>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        loading = true;

        try
        {
            var result = await CampaignsClient.GetCampaignsAsync(state.Page, state.PageSize, null, null, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Marketing.Client.SortDirection.Asc : YourBrand.Marketing.Client.SortDirection.Desc), cancellationToken);

            return new TableData<Campaign>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task ItemOnClick(TableRowClickEventArgs<Campaign> ev)
    {
        var item = ev.Item;

        await OnItemClicked(item);
    }

    async Task OnItemClicked(Campaign? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(CampaignDialog.Id), dto?.Id);

            var dialogReference = DialogService.Show<CampaignDialog>(dto is null ? "New Campaign" : $"Update {dto.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Canceled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private TableData<Campaign>? GetTableData()
    {
        return (TableData<Campaign>?)table?.GetType()?
            .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
                         System.Reflection.BindingFlags.Instance)?
            .GetValue(table);
    }
}