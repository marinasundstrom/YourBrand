@inject IStringLocalizer<ChannelPage> T
@inject IMessagesClient MessagesClient

<div class="reactions-pane">
    @foreach (var reactionGroup in Message.Reactions.GroupBy(x => x.Content))
    {
        var r = reactionGroup.First();

        <MudTooltip ShowOnClick="true" ShowOnFocus="false" ShowOnHover="true" Arrow="true">
            <ChildContent>
                <div @key="@reactionGroup.Key">
                    @if (reactionGroup.Count() > 1)
                    {
                        <div class="reaction reaction-with-count bounce-in grow @(IsInReactions(reactionGroup) ? "marked" : null)" @onclick="async () => await OnReactionClicked(reactionGroup)"><span>@r.Content </span><span
                                class="reaction-count"> @reactionGroup.Count()</span></div>
                    }
                    else
                    {
                        <div class="reaction bounce-in grow @(IsInReactions(reactionGroup) ? "marked" : null)" @onclick="async () => await OnReactionClicked(reactionGroup)"><span>@r.Content</span></div>
                    }                   
                </div>
            </ChildContent>
            <TooltipContent>
                <ul>
                    @foreach (var reaction in reactionGroup)
                    {
                        <li>@((reaction.User.Id == CurrentUserId) ? T["Me"] : reaction.User.Name)</li>
                    }
                </ul>
            </TooltipContent>
        </MudTooltip>
    }
</div>

@code 
{
    [Parameter]
    [EditorRequired]
    public MessageViewModel Message { get; set;} = default!;

    [Parameter]
    [EditorRequired]
    public string CurrentUserId { get; set;} = default!;

    public async Task OnReactionClicked(IGrouping<string, Reaction> reactions) 
    {
        if(!reactions.Any(x => x.User.Id == CurrentUserId)) 
        {
             await MessagesClient.ReactAsync(Message.Id, reactions.Key);

             return;
        };

        await MessagesClient.RemoveReactionAsync(Message.Id, reactions.Key);
    }

    private bool IsInReactions(IEnumerable<Reaction> reactions) 
    {
        return reactions.Any(x => x.User.Id == CurrentUserId);
    }
}