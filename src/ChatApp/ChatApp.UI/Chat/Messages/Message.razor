<div class="message message-@(Direction == MessageDirection.Right ? "right" : "left") @(First ? "first" : null) @(Last ? "last" : null)" @attributes="AdditionalAttributes">
    <div class="message-inner d-flex flex-row flex-grow-1 gap-2">
        @if(IsSideAreaVisible) 
        {
            <div class="flex-none message-side">
                @SideAreaTemplate
            </div>
        }
        <div class="message-content">
            @ChildContent
        </div>
        <div class="flex-none message-side message-actions">
            <div class="d-flex message-actions-container">
                @ActionsTemplate
            </div>
        </div>
    </div>

    @if(IsFooterVisible) 
    {
        <div class="message-footer d-flex flex-row flex-grow-1 mb-5">
            <div>

            </div>
            <div>
                @FooterTemplate
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public MessageDirection Direction { get; set; } = MessageDirection.Left;

    [Parameter]
    public bool First { get; set; } = true;

    [Parameter]
    public bool Last { get; set; } = true;

    [Parameter]
    public bool IsFooterVisible { get; set; } = true;

    [Parameter]
    public bool IsSideAreaVisible { get; set; } = true;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public RenderFragment SideAreaTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment ActionsTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment FooterTemplate { get; set; } = default!;

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; } = default!;
}